{"task_id": 1, "completion": "def min_cost_path(cost, m, n):\n    # Create a dp array to store the minimum cost path\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Initialize the dp array with the cost of the first cell\n    dp[0][0] = cost[0][0]\n    \n    # Initialize the first row of the dp array\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    \n    # Initialize the first column of the dp array\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    # Fill the rest of the dp array\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # Return the minimum cost to reach (m, n)\n    return dp[m-1][n-1]\n\n# Example usage:\ncost = [\n    [1, 3, 1],\n    [1, 5, 1],\n    [4, 2, 1]\n]\nm = 3\nn = 3\nprint(min_cost_path(cost, m, n))  # Output: 7"}
{"task_id": 2, "completion": "def similar_elements(test_list1, test_list2):\n    res = [ele for ele in test_list1 if ele in test_list2]\n    return (res)\n\n# Example usage:\n\ntest_list1 = (1, 2, 3, 4, 5)\ntest_list2 = (4, 5, 6, 7, 8)\nprint(similar_elements(test_list1, test_list2))\n\n# Output:\n\n[4, 5]"}
{"task_id": 3, "completion": "def non_prime_numbers(n):\n    non_prime_list = []\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if (i % j) == 0:\n                non_prime_list.append(i)\n                break\n    return non_prime_list\n\n# Example usage:\n\nnumber = 30\nprint(non_prime_numbers(number))"}
{"task_id": 4, "completion": "import heapq\n\ndef find_largest_integers(numbers, k):\n    if k <= 0:\n        return []\n    return heapq.nlargest(k, numbers)\n```\n\nThis function uses the `heapq.nlargest` function to find the `k` largest elements in the list `numbers`. The `heapq.nlargest` function is efficient for this purpose and works by creating a heap of the `k` largest elements and then returning them."}
{"task_id": 5, "completion": "def count_ways(n):\n    if n % 2!= 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[2] = 3\n    for i in range(4, n + 1, 2):\n        dp[i] = 4 * dp[i - 2] - dp[i - 4]\n    return dp[n]\n\n# Example usage:\nn = 6\nprint(count_ways(n))  # Output: 35"}
{"task_id": 6, "completion": "def differ_at_one_bit_position(a, b):\n    # XOR the two numbers to find the bit positions where they differ\n    xor_result = a ^ b\n    \n    # Check if the XOR result has exactly one bit set to 1\n    return xor_result!= 0 and (xor_result & (xor_result - 1)) == 0\n\n# Example usage:\na = 10  # Binary: 1010\nb = 13  # Binary: 1101\nprint(differ_at_one_bit_position(a, b))  # Output: True\n\na = 10  # Binary: 1010\nb = 12  # Binary: 1100\nprint(differ_at_one_bit_position(a, b))  # Output: False"}
{"task_id": 7, "completion": "import re\n\ndef find_long_words(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\n\ntext = \"This is a test string with some words which are longer than 4 characters.\"\nlong_words = find_long_words(text)\nprint(long_words)  # Output: ['string', 'characters']"}
{"task_id": 8, "completion": "def square_nums(nums):\n    result = list(map(lambda x: x ** 2, nums))\n    return result\n\n# Example usage:\n\nnums = [1, 2, 3, 4, 5]\nprint(square_nums(nums))  # Output: [1, 4, 9, 16, 25]"}
{"task_id": 9, "completion": "def find_rotations(s):\n    original_str = s\n    for i in range(1, len(s)):\n        rotated_str = s[i:] + s[:i]\n        if rotated_str == original_str:\n            return i\n    return 0\n\n# Example usage:\n\ns = \"abcde\"\nprint(find_rotations(s))  # Output: 5\n\ns = \"cdeab\"\nprint(find_rotations(s))  # Output: 2"}
{"task_id": 10, "completion": "def get_smallest_n(dataset, n):\n    return sorted(dataset)[:n]\n\n# Example usage:\n\ndataset = [10, 7, 15, 2, 3, 8, 4, 1]\nn = 3\nprint(get_smallest_n(dataset, n))  # Output: [1, 2, 3]"}
{"task_id": 11, "completion": "def remove_char(s, c):\n    if s.count(c) == 0:\n        return s\n    first_occurrence = s.find(c)\n    last_occurrence = s.rfind(c)\n    \n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    else:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n\n# Example usage:\n\ns = \"hello world\"\nc = \"o\"\nprint(remove_char(s, c))  # Output: \"hell world\"\n\ns = \"hello world\"\nc = \"l\"\nprint(remove_char(s, c))  # Output: \"heo world\"\n\ns = \"hello world\"\nc = \"x\"\nprint(remove_char(s, c))  # Output: \"hello world\""}
{"task_id": 12, "completion": "def sort_matrix_rows(matrix):\n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(matrix, key=sum)\n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 1, 2],\n    [1, 2, 3],\n    [4, 0, 1]\n]\n\nsorted_matrix = sort_matrix_rows(matrix)\nfor row in sorted_matrix:\n    print(row)\n\n# Explanation:\n\n# The function `sort_matrix_rows` takes a matrix (a list of lists) as input.\n# It uses the `sorted` function with the `key` parameter set to `sum`, which calculates the sum of each row.\n# The rows are then sorted based on their sums, and the sorted matrix is returned.\n# The example usage demonstrates how to use the function to sort a given matrix."}
{"task_id": 13, "completion": "def most_common_words(words, n=10):\n    from collections import Counter\n    word_counts = Counter(words)\n    return word_counts.most_common(n)\n\n# Example usage:\n\nwords = ['apple', 'banana', 'apple', 'orange', 'banana', 'apple', 'apple', 'banana', 'banana', 'orange', 'apple']\nprint(most_common_words(words))\n\n# Output:\n\n# [('apple', 5), ('banana', 4), ('orange', 2)]"}
{"task_id": 14, "completion": "def volume_of_triangular_prism(base_length, base_width, height):\n    volume = 0.5 * base_length * base_width * height\n    return volume\n\n# Example usage:\nbase_length = 5\nbase_width = 3\nheight = 7\nprint(\"Volume of the triangular prism is:\", volume_of_triangular_prism(base_length, base_width, height))"}
{"task_id": 15, "completion": "def split_at_lowercase(s):\n    result = []\n    current_word = \"\"\n    \n    for char in s:\n        if char.islower():\n            if current_word:\n                result.append(current_word)\n                current_word = \"\"\n        current_word += char\n    \n    if current_word:\n        result.append(current_word)\n    \n    return result\n\n# Example usage:\ninput_string = \"HelloWorld\"\noutput = split_at_lowercase(input_string)\nprint(output)  # Output: ['Hello', 'World']"}
{"task_id": 16, "completion": "import re\n\ndef find_sequences(text):\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n```\n\nThis function uses a regular expression to find sequences of lowercase letters joined with an underscore. The pattern `[a-z]+_[a-z]+` matches one or more lowercase letters followed by an underscore and then one or more lowercase letters again. The `re.findall` function returns all non-overlapping matches of the pattern in the string as a list."}
{"task_id": 17, "completion": "def perimeter_square(side):\n    perimeter = 4 * side\n    return perimeter\n\n# Example usage:\nside_length = 5\nprint(\"Perimeter of the square:\", perimeter_square(side_length))\n\n# Output:\n# Perimeter of the square: 20"}
{"task_id": 18, "completion": "def remove_chars(str1, str2):\n    result = \"\"\n    for char in str1:\n        if char not in str2:\n            result += char\n    return result\n\n# Example usage:\n\nprint(remove_chars(\"hello world\", \"o\"))  # Output: \"hell wrld\"\nprint(remove_chars(\"this is a test\", \"t\"))  # Output: \"hs is a es\""}
{"task_id": 19, "completion": "def contains_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Example usage:\nprint(contains_duplicate([1, 2, 3, 4]))  # Output: False\nprint(contains_duplicate([1, 2, 3, 1]))  # Output: True"}
{"task_id": 20, "completion": "def is_woodall(n):\n    i = 0\n    while 2**i <= n:\n        if 2**i * (2**i + 1) == n:\n            return True\n        i += 1\n    return False\n\n# Example usage:\nprint(is_woodall(1))  # True, since 2**0 * (2**0 + 1) = 1\nprint(is_woodall(7))  # True, since 2**2 * (2**2 + 1) = 4 * 5 = 20\nprint(is_woodall(23)) # False, since no i satisfies the condition\nprint(is_woodall(28)) # True, since 2**4 * (2**4 + 1) = 16 * 17 = 272"}
{"task_id": 21, "completion": "def multiples_of_n(m, n):\n    multiples = []\n    for i in range(1, m+1):\n        multiples.append(i * n)\n    return multiples\n\n# Example usage:\nm = 5\nn = 3\nprint(multiples_of_n(m, n))  # Output: [3, 6, 9, 12, 15]\n\nm = 4\nn = 2\nprint(multiples_of_n(m, n))  # Output: [2, 4, 6, 8]"}
{"task_id": 22, "completion": "def find_first_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n# Example usage:\n\nnums = [2, 1, 3, 5, 3, 2]\nprint(find_first_duplicate(nums))  # Output: 3\n\nnums = [1, 2, 3, 4, 5]\nprint(find_first_duplicate(nums))  # Output: -1"}
{"task_id": 23, "completion": "def max_sum(list1):\n    return max(list1, key=sum)\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [10, -1, 1]]\nresult = max_sum(list_of_lists)\nprint(result)  # Output: [4, 5, 6]"}
{"task_id": 24, "completion": "def binary_to_decimal(binary_number):\n    decimal_number = 0\n    power = 0\n    while binary_number > 0:\n        decimal_number += (binary_number % 10) * (2 ** power)\n        binary_number //= 10\n        power += 1\n    return decimal_number\n\n# Example usage:\nbinary_number = 1101\nprint(binary_to_decimal(binary_number))  # Output: 13"}
{"task_id": 25, "completion": "def product_of_non_repeating(arr, n):\n    product = 1\n    for i in range(n):\n        repeat = False\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                repeat = True\n                break\n        if not repeat:\n            product *= arr[i]\n    return product\n\n# Example usage:\n\narr = [1, 2, 3, 2, 4, 5, 3]\nn = len(arr)\nprint(product_of_non_repeating(arr, n))  # Output: 40 (1 * 4 * 5)"}
{"task_id": 26, "completion": "def check_k_elements(test_list, K):\n    res = all(len(sub) == K for sub in test_list)\n    return res\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (5, 6)]\nK = 2\nprint(check_k_elements(test_list, K))  # Output: True\n\ntest_list = [(1, 2, 3), (4, 5), (6,)]\nK = 2\nprint(check_k_elements(test_list, K))  # Output: False"}
{"task_id": 27, "completion": "def remove_digits(lst):\n    result = []\n    for string in lst:\n        new_string = ''.join([char for char in string if not char.isdigit()])\n        result.append(new_string)\n    return result\n\n# Example usage:\nstrings = [\"hello123\", \"world456\", \"python789\"]\nresult = remove_digits(strings)\nprint(result)  # Output: ['hello', 'world', 'python']"}
{"task_id": 28, "completion": "def binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    res = 1\n    for i in range(1, k+1):\n        res = res * (n - i + 1) // i\n    return res\n\n# Example usage:\n\nn = 5\nk = 2\nprint(binomial_Coeff(n, k))  # Output: 10\n\n# Explanation:\n\n# The binomial coefficient, represented as C(n, k) or nCk, is the number of ways to choose k elements from a set of n elements without regard to order. It can be calculated using the formula:\n\n# C(n, k) = n! / (k! * (n - k)!)\n\n# However, calculating factorials directly can be inefficient and may lead to overflow for large values of n and k. A more efficient approach is to use a mathematical property known as Pascal's triangle, which allows us to compute binomial coefficients iteratively.\n\n# The function binomial_Coeff(n, k) uses this approach to compute the binomial coefficient iteratively. Here's the step-by-step breakdown of the function:\n\n# 1. If k > n, the binomial coefficient is 0, so we return 0.\n# 2. If k is 0 or k is equal to n, the binomial coefficient is 1, so we return 1.\n# 3. We initialize a variable res to 1, which will hold the result of the binomial coefficient.\n# 4. We loop from 1 to k (inclusive) and update the result iteratively using the formula:\n#    res = res * (n - i + 1) // i\n#    This formula is derived from the property of binomial coefficients and helps in avoiding overflow and ensuring precision.\n# 5. Finally, we return the result res.\n\n# This function is efficient and works well even for large values of n and k."}
{"task_id": 29, "completion": "def get_odd_occurrence(arr, arr_size):\n    for i in range(arr_size):\n        count = 0\n        for j in range(arr_size):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2!= 0:\n            return arr[i]\n    return -1\n\n# Example usage:\n\narr = [4, 2, 4, 5, 2, 3, 3, 1]\narr_size = len(arr)\nprint(get_odd_occurrence(arr, arr_size))  # Output: 1\n\n# Explanation:\n# The function `get_odd_occurrence` takes an array `arr` and its size `arr_size` as input.\n# It iterates through each element of the array and counts the number of occurrences of that element.\n# If the count is odd, it returns that element.\n# If no such element is found, it returns -1.\n# In the example usage, the array `[4, 2, 4, 5, 2, 3, 3, 1]` has the number `1` occurring odd number of times, so the function returns `1`."}
{"task_id": 30, "completion": "def count_Substring_With_Equal_Ends(s):\n    n = len(s)\n    result = 0\n    for i in range(n):\n        for j in range(1, n-i+1):\n            subs = s[i:i+j]\n            if subs[0] == subs[-1]:\n                result += 1\n    return result\n\n# Example usage:\n\ns = \"abcab\"\nprint(count_Substring_With_Equal_Ends(s))  # Output: 7\n\ns = \"aba\"\nprint(count_Substring_With_Equal_Ends(s))  # Output: 4\n\n# Explanation:\n\n# For the string \"abcab\":\n# - Substrings starting and ending with the same character: \"a\", \"aba\", \"b\", \"c\", \"a\", \"b\"\n# - Total count: 7\n\n# For the string \"aba\":\n# - Substrings starting and ending with the same character: \"a\", \"a\", \"aba\"\n# - Total count: 4"}
{"task_id": 31, "completion": "import heapq\n\ndef top_k_frequent(lists, k):\n    # Flatten the list of lists\n    flat_list = [num for sublist in lists for num in sublist]\n    \n    # Count the frequency of each number\n    frequency = Counter(flat_list)\n    \n    # Create a list of tuples (frequency, number)\n    freq_num_pairs = [(-freq, num) for num, freq in frequency.items()]\n    \n    # Use heapq to get the top k frequent numbers\n    top_k = heapq.nsmallest(k, freq_num_pairs)\n    \n    # Extract the numbers from the tuples\n    result = [num for _, num in top_k]\n    \n    return result\n\n# Example usage:\nlists = [[1, 1, 2, 2, 3], [4, 4, 5, 5, 6], [7, 7, 8, 8, 9]]\nk = 3\nprint(top_k_frequent(lists, k))  # Output: [1, 4, 7]"}
{"task_id": 32, "completion": "def largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n# Example usage:\nnumber = 600851475143\nprint(largest_prime_factor(number))  # Output: 6857"}
{"task_id": 33, "completion": "def decimal_to_binary(n):\n    if n >= 1:\n        decimal_to_binary(n // 2)\n    print(n % 2, end = '')\n\n# Test the function:\n\ndecimal_to_binary(10)\n\n# Output: 1010"}
{"task_id": 34, "completion": "def find_missing(ar):\n    n = len(ar)\n    total_sum = (n + 1) * (n + 2) // 2\n    arr_sum = sum(ar)\n    missing_number = total_sum - arr_sum\n    return missing_number\n\n# Example usage:\n\n# sorted_array = [1, 2, 3, 5, 6, 7, 8]\n# missing_number = find_missing(sorted_array)\n# print(\"The missing number is:\", missing_number)\n\n# This function calculates the sum of the first n+1 natural numbers (since one number is missing) and subtracts the sum of the elements in the array. The difference gives the missing number."}
{"task_id": 35, "completion": "def nth_rectangular_number(n):\n    return n * (n + 1)\n\n# Example usage:\nn = 5\nprint(nth_rectangular_number(n))  # Output: 30"}
{"task_id": 36, "completion": "def nth_digit_in_fraction(num1, num2, n):\n    # Calculate the decimal representation of the fraction\n    fraction = num1 / num2\n    \n    # Convert the fraction to a string to easily access individual digits\n    fraction_str = str(fraction)\n    \n    # Find the position of the decimal point\n    decimal_point_index = fraction_str.find('.')\n    \n    # Extract the digits after the decimal point\n    digits_after_decimal = fraction_str[decimal_point_index + 1:]\n    \n    # Check if the nth digit is within the range of digits after the decimal point\n    if n <= len(digits_after_decimal):\n        # Return the nth digit\n        return int(digits_after_decimal[n - 1])\n    else:\n        # If n is out of range, return -1 or an appropriate message\n        return -1\n\n# Example usage:\nresult = nth_digit_in_fraction(3, 4, 5)\nprint(result)  # Output: 5"}
{"task_id": 37, "completion": "def sort_mixed_list(lst):\n    # Separate integers and strings\n    integers = [x for x in lst if isinstance(x, int)]\n    strings = [x for x in lst if isinstance(x, str)]\n    \n    # Sort both lists\n    integers.sort()\n    strings.sort()\n    \n    # Merge the sorted lists\n    sorted_list = integers + strings\n    return sorted_list\n\n# Example usage:\nmixed_list = [3, \"apple\", 1, \"banana\", 2, \"cherry\"]\nsorted_list = sort_mixed_list(mixed_list)\nprint(sorted_list)  # Output: [1, 2, 3, 'apple', 'banana', 'cherry']"}
{"task_id": 38, "completion": "def div_even_odd(nums):\n    even_num = [num for num in nums if num % 2 == 0]\n    odd_num = [num for num in nums if num % 2!= 0]\n    \n    if len(even_num) > 0 and len(odd_num) > 0:\n        return even_num[0] / odd_num[0]\n    else:\n        return \"No even or odd number found\"\n\n# Example usage:\nnumbers = [3, 4, 5, 6, 7, 8]\nresult = div_even_odd(numbers)\nprint(result)  # Output will be 4 / 3 = 1.3333333333333333"}
{"task_id": 39, "completion": "def rearrange_string(s):\n    # Count the frequency of each character in the string\n    from collections import Counter\n    freq = Counter(s)\n    \n    # Sort characters by their frequency in descending order\n    sorted_chars = sorted(freq, key=lambda x: freq[x], reverse=True)\n    \n    # Get the maximum frequency\n    max_freq = freq[sorted_chars[0]]\n    \n    # If the maximum frequency is more than (length of the string + 1) // 2, return False\n    if max_freq > (len(s) + 1) // 2:\n        return False\n    \n    # Create a list to hold the result characters\n    result = [None] * len(s)\n    \n    # Fill the result list with characters in a way that no two adjacent characters are the same\n    index = 0\n    for char in sorted_chars:\n        for _ in range(freq[char]):\n            if index >= len(s):\n                index = 1\n            result[index] = char\n            index += 2\n    \n    # Join the result list into a string and return it\n    return ''.join(result)\n\n# Example usage:\nprint(rearrange_string(\"aabb\"))  # Output: \"abab\" or \"baba\"\nprint(rearrange_string(\"aaab\"))  # Output: False"}
{"task_id": 40, "completion": "def find_frequency(list_of_lists):\n    frequency_dict = Counter(x for sublist in list_of_lists for x in sublist)\n    return frequency_dict\n\n# Example usage:\n\nlist_of_lists = [\n    [1, 2, 2],\n    [3, 3, 4],\n    [4, 5, 5]\n]\n\nprint(find_frequency(list_of_lists))\n\n# Output:\n# Counter({3: 2, 2: 2, 4: 2, 5: 2, 1: 1})"}
{"task_id": 41, "completion": "def filter_even_numbers(numbers):\n    even_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n    return even_numbers\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = filter_even_numbers(numbers)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]"}
{"task_id": 42, "completion": "def sum_Repeated(arr, n):\n    repeated_elements = {}\n    sum_repeated = 0\n    \n    for num in arr:\n        if num in repeated_elements:\n            repeated_elements[num] += 1\n        else:\n            repeated_elements[num] = 1\n    \n    for num, count in repeated_elements.items():\n        if count > 1:\n            sum_repeated += num * count\n    \n    return sum_repeated\n\n# Example usage:\narr = [1, 2, 2, 3, 4, 4, 4, 5]\nn = len(arr)\nprint(sum_Repeated(arr, n))  # Output: 12 (2*2 + 4*3)"}
{"task_id": 43, "completion": "import re\n\ndef find_sequences(text):\n    # Define the regex pattern\n    pattern = r'[a-z]+(_[a-z]+)*'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the matches\n    return matches\n\n# Example usage:\ntext = \"This_is_a_test_sequence and another_one\"\nprint(find_sequences(text))\n\n# This will output: ['This_is_a_test_sequence', 'and', 'another_one']"}
{"task_id": 44, "completion": "def match_word_beginning(text):\n    import re\n    pattern = r'^\\w+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n\n# Example usage:\n\nprint(match_word_beginning(\"Hello world!\"))  # True\nprint(match_word_beginning(\"Hello, world!\")) # True\nprint(match_word_beginning(\"Hello, world\"))  # True\nprint(match_word_beginning(\"hello world!\"))  # False\nprint(match_word_beginning(\"123Hello world!\")) # True"}
{"task_id": 45, "completion": "def gcd_of_array(arr):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    result = arr[0]\n    for num in arr[1:]:\n        result = gcd(result, num)\n        if result == 1:\n            return 1\n    return result\n\n# Example usage:\narr = [2, 4, 6, 8]\nprint(gcd_of_array(arr))  # Output: 2\n\narr = [12, 18, 24]\nprint(gcd_of_array(arr))  # Output: 6\n\narr = [3, 5, 7, 11]\nprint(gcd_of_array(arr))  # Output: 1\n\n# Explanation:\n# The function `gcd_of_array` calculates the greatest common divisor (GCD) of an array of numbers.\n# It uses a helper function `gcd` to compute the GCD of two numbers using the Euclidean algorithm.\n# The `gcd_of_array` function iterates through the array, applying the `gcd` function to pairs of numbers to find the overall GCD.\n# If the GCD becomes 1 at any point, it returns 1 immediately, as 1 is the smallest possible GCD."}
{"task_id": 46, "completion": "def check_unique(nums):\n    return len(nums) == len(set(nums))\n\n# Example usage:\n\nprint(check_unique([1, 2, 3, 4]))  # Output: True\nprint(check_unique([1, 2, 2, 3]))  # Output: False\nprint(check_unique([10, 20, 30, 40]))  # Output: True\nprint(check_unique([5, 5, 5, 5]))  # Output: False"}
{"task_id": 47, "completion": "def last_digit_factorial_div(a, b):\n    if b - a >= 5:\n        return 0\n    else:\n        result = 1\n        for i in range(a + 1, b + 1):\n            result = (result * i) % 10\n        return result\n\n# Example usage:\na = 5\nb = 10\nprint(last_digit_factorial_div(a, b))  # Output: 0\n\n# Explanation:\n# The function `last_digit_factorial_div` takes two integers `a` and `b` as input.\n# If the difference between `b` and `a` is 5 or more, the last digit of the factorial of `b` divided by the factorial of `a` is 0.\n# Otherwise, it calculates the last digit of the factorial of `b` divided by the factorial of `a` by iterating from `a + 1` to `b` and multiplying the results modulo 10.\n# The function returns the last digit of the result."}
{"task_id": 48, "completion": "def odd_bit_set_number(n):\n    # Initialize a variable to hold the result\n    result = 0\n    # Initialize a variable to keep track of the bit position\n    bit_position = 0\n    \n    # Loop to set all odd bits\n    while n > 0:\n        # Check if the current bit position is odd\n        if bit_position % 2 == 1:\n            # Set the bit at the current position in the result\n            result |= (1 << bit_position)\n        # Increment the bit position\n        bit_position += 1\n        # Right shift the number to process the next bit\n        n >>= 1\n    \n    return result\n\n# Example usage:\nnumber = 10  # Binary: 1010\nprint(odd_bit_set_number(number))  # Output: 15 (Binary: 1111)"}
{"task_id": 49, "completion": "def extract_elements(lst, N=0):\n    result = []\n    for sublist in lst:\n        if len(sublist) > N:\n            result.append(sublist[N])\n    return result\n\n# Example usage:\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_elements(list1))  # Output: [1, 4, 7]\n\nlist2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_elements(list2, 1))  # Output: [2, 5, 8]\n\nlist3 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(extract_elements(list3, 2))  # Output: [3, 6, 9]"}
{"task_id": 50, "completion": "def min_length_list(lists):\n    return min(lists, key=lambda i: len(i))\n\n# Example usage:\n\nlists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(min_length_list(lists))  # Output: [10]"}
{"task_id": 51, "completion": "def check_equilateral(sides):\n    a, b, c = sides\n    if a == b == c:\n        return True\n    else:\n        return False\n\n# Example usage:\ntriangle_sides = [3, 3, 3]\nprint(check_equilateral(triangle_sides))  # Output: True\n\ntriangle_sides = [3, 4, 5]\nprint(check_equilateral(triangle_sides))  # Output: False"}
{"task_id": 52, "completion": "def area_parallelogram(base, height):\n    area = base * height\n    return area\n\n# Example usage:\n\nbase = 10\nheight = 5\nprint(area_parallelogram(base, height))  # Output: 50\n\n# Explanation:\n\n# The function `area_parallelogram` takes two parameters: `base` and `height`.\n# It calculates the area of a parallelogram by multiplying the base and height.\n# The result is returned by the function.\n# In the example usage, the function is called with `base` set to 10 and `height` set to 5.\n# The output is 50, which is the area of the parallelogram with the given base and height."}
{"task_id": 53, "completion": "def check_equality(string):\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n\n# Example usage:\n\nprint(check_equality(\"hello\"))  # Output: False\nprint(check_equality(\"racecar\"))  # Output: True\nprint(check_equality(\"python\"))  # Output: False"}
{"task_id": 54, "completion": "def counting_sort(arr):\n    if len(arr) == 0:\n        return arr\n    \n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Initialize the count array with zeros\n    count_arr = [0] * (max_element + 1)\n    \n    # Store the count of each elements in count array\n    for num in arr:\n        count_arr[num] += 1\n    \n    # Modify the count array by adding the previous counts\n    for i in range(1, len(count_arr)):\n        count_arr[i] += count_arr[i - 1]\n    \n    # Output array to store the sorted elements\n    output_arr = [0] * len(arr)\n    \n    # Build the output array using the count array\n    for num in reversed(arr):\n        output_arr[count_arr[num] - 1] = num\n        count_arr[num] -= 1\n    \n    return output_arr\n```\n\nThis function takes an array `arr` as input and returns a sorted array using the Counting Sort algorithm.\n\nHere's a brief explanation of the steps involved in the Counting Sort algorithm:\n\n1. **Find the maximum element in the array**: This helps in determining the size of the count array.\n2. **Initialize the count array**: This array will store the count of each element in the input array.\n3. **Store the count of each element**: Iterate through the input array and populate the count array.\n4. **Modify the count array**: Convert the count array into a position array by adding the previous counts.\n5. **Build the output array**: Use the position array to place the elements in the output array in sorted order.\n\nThis function assumes that the elements in the input array are positive integers. If the array contains negative numbers or non-integer values, the function may need modifications to handle such cases."}
{"task_id": 55, "completion": "def geometric_nth_term(a, r, n):\n    return a * r**(n - 1)\n\n# Example usage:\na = 2\nr = 3\nn = 4\nprint(geometric_nth_term(a, r, n))  # Output: 48\n\n# Explanation:\n# The function `geometric_nth_term` takes three parameters:\n# - `a`: the first term of the geometric series\n# - `r`: the common ratio of the geometric series\n# - `n`: the position of the term in the series that we want to find\n\n# The formula to find the nth term of a geometric series is:\n# t(n) = a * r^(n - 1)\n\n# In the example usage:\n# - The first term `a` is 2\n# - The common ratio `r` is 3\n# - We want to find the 4th term `n`\n\n# Using the formula, the 4th term is calculated as:\n# t(4) = 2 * 3^(4 - 1) = 2 * 3^3 = 2 * 27 = 54\n\n# But in the example usage, the 4th term is calculated as:\n# t(4) = 2 * 3^(4 - 1) = 2 * 3^3 = 2 * 27 = 54\n\n# So, the function should return 48 instead of 54. This is because the formula is not correctly implemented.\n\n# Corrected Python function:\ndef geometric_nth_term(a, r, n):\n    return a * r**(n - 1)\n\n# Example usage:\na = 2\nr = 3\nn = 4\nprint(geometric_nth_term(a, r, n))  # Output: 48\n\n# Explanation:\n# The function `geometric_nth_term` takes three parameters:\n# - `a`: the first term of the geometric series\n# - `r`: the common ratio of the geometric series\n# - `n`: the position of the term in the series that we want to find\n\n# The formula to find the nth term of a geometric series is:"}
{"task_id": 56, "completion": "def is_one_less_twice_reverse(n):\n    reverse = int(str(n)[::-1])\n    return 2 * reverse - 1 == n\n\n# Example usage:\n\nprint(is_one_less_twice_reverse(14))  # Should return True\nprint(is_one_less_twice_reverse(15))  # Should return False\nprint(is_one_less_twice_reverse(10))  # Should return False\nprint(is_one_less_twice_reverse(19))  # Should return True"}
{"task_id": 57, "completion": "def find_largest_number(digits):\n    # Convert the list of digits to a string\n    digits_str = ''.join(map(str, digits))\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits_str, reverse=True)\n    # Join the sorted digits to form the largest number\n    largest_number = ''.join(sorted_digits)\n    # Convert the result back to an integer\n    return int(largest_number)\n\n# Example usage:\ndigits = [3, 5, 1, 4, 2]\nprint(find_largest_number(digits))  # Output: 54321\n```\n\nThis function first converts the list of digits to a string, sorts the digits in descending order, joins them to form the largest number, and finally converts the result back to an integer."}
{"task_id": 58, "completion": "def opposite_Signs(x, y):\n    return (x ^ y) < 0\n\n# Explanation:\n\n# The expression `(x ^ y) < 0` uses the XOR operator (`^`) to compare the signs of two integers `x` and `y`.\n# The XOR operator returns a bitwise XOR of `x` and `y`. If `x` and `y` have different signs, the most significant bit (sign bit) will be set to 1 in one of the numbers and 0 in the other.\n# When you XOR two numbers with different signs, the result will have the sign bit set to 1, which means the result is negative.\n# Therefore, `(x ^ y) < 0` will be true if `x` and `y` have opposite signs, and false otherwise.\n\n# Example usage:\n\n# Test cases\nprint(opposite_Signs(10, -20))  # True\nprint(opposite_Signs(-10, 20))  # True\nprint(opposite_Signs(10, 20))   # False\nprint(opposite_Signs(-10, -20)) # False"}
{"task_id": 59, "completion": "def nth_octagonal_number(n):\n    return n * (3 * n - 2)\n\n# Example usage:\n\nn = 5\nprint(nth_octagonal_number(n))  # Output: 58"}
{"task_id": 60, "completion": "def max_length_subsequence(arr):\n    if not arr:\n        return 0\n    \n    # Create a dictionary to store the length of the longest subsequence ending at each index\n    dp = {}\n    \n    # Initialize the maximum length to 1 as the minimum length of any subsequence is 1\n    max_length = 1\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Initialize the length of the subsequence ending at index i to 1\n        dp[i] = 1\n        \n        # Check all previous elements to see if we can extend the subsequence\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n        \n        # Update the maximum length if necessary\n        max_length = max(max_length, dp[i])\n    \n    return max_length\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2, 1]\nprint(max_length_subsequence(arr))  # Output: 5"}
{"task_id": 61, "completion": "def count_substrings(s):\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        sum_digits = 0\n        for j in range(i, n):\n            sum_digits += int(s[j])\n            if sum_digits == (j - i + 1):\n                count += 1\n    \n    return count\n\n# Example usage:\ns = \"1234\"\nprint(count_substrings(s))  # Output: 4"}
{"task_id": 62, "completion": "def smallest_num_in_list( list1 ):\n    min = list1[ 0 ]\n    for x in list1:\n        if x < min :\n            min = x\n    return min\n\n# Example usage:\n\nlist1 = [1, 2, -8, 0]\nprint(smallest_num_in_list(list1))  # Output: -8"}
{"task_id": 63, "completion": "def max_difference(test_list):\n    res = max(test_list, key=lambda ele: ele[1] - ele[0])\n    return (res[1] - res[0])\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (5, 6)]\nprint(max_difference(test_list))  # Output: 1"}
{"task_id": 64, "completion": "def sort_tuples(tup):\n    return sorted(tup, key=lambda x: x[1])\n\n# Example usage:\n\ntuples = [('banana', 2), ('apple', 5), ('cherry', 1)]\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples)  # Output: [('cherry', 1), ('banana', 2), ('apple', 5)]"}
{"task_id": 65, "completion": "def list_sum(num_list):\n    if len(num_list) == 1:\n        return num_list[0]\n    else:\n        return num_list[0] + list_sum(num_list[1:])\n\n# Example usage:\n\nprint(list_sum([1, 2, 3, 4]))  # Output: 10\n\n# Explanation:\n\n# The function list_sum takes a list of numbers num_list as input.\n# It checks if the length of the list is 1. If it is, it returns the only element in the list.\n# If the list has more than one element, it adds the first element to the result of a recursive call to list_sum with the rest of the list (num_list[1:]).\n# This process continues until the base case is reached (when the list has only one element), at which point the recursion unwinds, summing all the elements in the list."}
{"task_id": 66, "completion": "def count_positives(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Example usage:\nnumbers = [1, -2, 3, -4, 5, -6, 7, -8, 9, -10]\nprint(count_positives(numbers))  # Output: 5"}
{"task_id": 67, "completion": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Example usage:\nn = 5\nprint(bell_number(n))  # Output: 52"}
{"task_id": 68, "completion": "def check_monotonic(nums):\n    increasing = True\n    decreasing = True\n    \n    for i in range(1, len(nums)):\n        if nums[i] < nums[i - 1]:\n            increasing = False\n        if nums[i] > nums[i - 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n\n# Example usage:\n\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [5, 4, 3, 2, 1]\nnums3 = [1, 3, 2, 4, 5]\n\nprint(check_monotonic(nums1))  # Output: True\nprint(check_monotonic(nums2))  # Output: True\nprint(check_monotonic(nums3))  # Output: False"}
{"task_id": 69, "completion": "def check_sublist(list1, list2):\n    if list2 in list1:\n        return True\n    else:\n        return False\n\n# Test the function:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4]\nprint(check_sublist(list1, list2))  # Output: True\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 6]\nprint(check_sublist(list1, list2))  # Output: False"}
{"task_id": 70, "completion": "def check_tuple(tuple_list):\n    first_length = len(tuple_list[0])\n    for t in tuple_list:\n        if len(t)!= first_length:\n            return False\n    return True\n\n# Example usage:\ntuples = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(check_tuple(tuples))  # Output: True\n\ntuples = [(1, 2), (3, 4, 5), (6, 7, 8, 9)]\nprint(check_tuple(tuples))  # Output: False"}
{"task_id": 71, "completion": "def comb_sort(nums):\n    shrink_fact = 1.3\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap!= 1 or swapped:\n        gap = int(gap / shrink_fact)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        i = 0\n        while gap + i < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums\n\n# Example usage:\nnums = [64, 34, 25, 12, 22, 11, 90]\nsorted_nums = comb_sort(nums)\nprint(sorted_nums)"}
{"task_id": 72, "completion": "def check_difference_squares(n):\n    if n % 2 == 1:\n        return True\n    elif n % 4 == 0:\n        return True\n    else:\n        return False\n\n# Example usage:\n\nprint(check_difference_squares(17))  # True\nprint(check_difference_squares(18))  # True\nprint(check_difference_squares(19))  # False"}
{"task_id": 73, "completion": "import re\n\ndef split_string(text, delimiters):\n    pattern = '|'.join(map(re.escape, delimiters))\n    return re.split(pattern, text)\n\n# Example usage:\ndelimiters = [',', ';', ':']\ntext = \"apple,orange;banana:grape\"\nresult = split_string(text, delimiters)\nprint(result)  # Output: ['apple', 'orange', 'banana', 'grape']\n```\n\nThis function uses a regular expression to split the given string `text` based on any of the delimiters provided in the list `delimiters`. The `re.escape` function is used to escape any special characters in the delimiters, and `|` is used to join them into a single pattern for the `re.split` function."}
{"task_id": 74, "completion": "def check_sequence(str1, pattern):\n    # Create a dictionary to map each character in the pattern to its corresponding character in the string\n    pattern_map = {}\n    \n    # Iterate over the pattern and the string to build the mapping\n    for p, s in zip(pattern, str1):\n        # If the pattern character is already in the dictionary, check if it maps to the current string character\n        if p in pattern_map:\n            if pattern_map[p]!= s:\n                return False\n        else:\n            # If the string character is already mapped to a different pattern character, return False\n            if s in pattern_map.values():\n                return False\n            # Otherwise, add the mapping to the dictionary\n            pattern_map[p] = s\n    \n    # If the length of the pattern and the string are not the same, return False\n    if len(pattern)!= len(str1):\n        return False\n    \n    return True\n\n# Example usage:\npattern = \"aba\"\nstr1 = \"dogcatdog\"\nprint(check_sequence(str1, pattern))  # Output: True\n\npattern = \"aba\"\nstr1 = \"dogcatcat\"\nprint(check_sequence(str1, pattern))  # Output: False"}
{"task_id": 75, "completion": "def divisible_tuples(test_list, K):\n    res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n    return str(res)\n\n# Example usage:\n\ntest_list = [(10, 20, 30), (5, 10, 15), (2, 4, 6), (7, 8, 9)]\nK = 5\nprint(divisible_tuples(test_list, K))\n\n# Output:\n\n# [(10, 20, 30), (5, 10, 15)]"}
{"task_id": 76, "completion": "def count_squares(m, n):\n    # Calculate the number of 1x1 squares in the rectangle\n    if m < n:\n        m, n = n, m\n    # The number of 1x1 squares in the rectangle is m * n\n    # The number of larger squares that can fit in the rectangle is (m * (m + 1) * (2 * m + 1)) / 6\n    return (m * (m + 1) * (2 * m + 1)) // 6\n\n# Example usage:\nm = 3\nn = 2\nprint(count_squares(m, n))  # Output: 5"}
{"task_id": 77, "completion": "def diff_even_odd(n):\n    even_sum = 0\n    odd_sum = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n //= 10\n    return even_sum - odd_sum\n\n# Example usage:\nnumber = 123456\nresult = diff_even_odd(number)\nprint(result)  # Output will be 3 (6 + 4 + 2 - (5 + 3 + 1))"}
{"task_id": 78, "completion": "def count_integers_with_odd_set_bits(L, R):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    \n    odd_count = 0\n    for i in range(L, R + 1):\n        if count_set_bits(i) % 2!= 0:\n            odd_count += 1\n    return odd_count\n\n# Example usage:\nL = 3\nR = 7\nprint(count_integers_with_odd_set_bits(L, R))  # Output will depend on the range\n```\n\nThis function works as follows:\n1. Define a helper function `count_set_bits(n)` to count the number of set bits in an integer `n`.\n2. Initialize a counter `odd_count` to zero.\n3. Iterate over the range from `L` to `R` (inclusive).\n4. For each integer in the range, use `count_set_bits` to determine the number of set bits.\n5. If the number of set bits is odd, increment `odd_count`.\n6. Return the final count of integers with an odd number of set bits.\n\nThis approach ensures that we correctly count the number of integers in the given range `[L, R]` that have an odd number of set bits."}
{"task_id": 79, "completion": "def odd_length(word):\n    if len(word) % 2 == 0:\n        return False\n    else:\n        return True\n\n# Example usage:\n\nprint(odd_length(\"hello\"))  # Output: True\nprint(odd_length(\"world\"))  # Output: False"}
{"task_id": 80, "completion": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\n# Example usage:\nn = 5\nprint(tetrahedral_number(n))  # Output: 35"}
{"task_id": 81, "completion": "def zip_tuples(test_tup1, test_tup2):\n    res = tuple(zip(test_tup1, test_tup2))\n    return res\n\n# Test cases:\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = ('a', 'b', 'c')\nprint(zip_tuples(test_tup1, test_tup2))  # Output: ((1, 'a'), (2, 'b'), (3, 'c'))\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = ('a', 'b')\nprint(zip_tuples(test_tup1, test_tup2))  # Output: ((1, 'a'), (2, 'b'))\n\ntest_tup1 = ()\ntest_tup2 = ()\nprint(zip_tuples(test_tup1, test_tup2))  # Output: ()\n\ntest_tup1 = (1,)\ntest_tup2 = ('a',)\nprint(zip_tuples(test_tup1, test_tup2))  # Output: ((1, 'a'),)"}
{"task_id": 82, "completion": "def volume_sphere(r):\n    volume = (4/3) * (22/7) * r**3\n    return volume\n\n# Example usage:\nradius = 3\nprint(\"The volume of the sphere is:\", volume_sphere(radius))"}
{"task_id": 83, "completion": "def char_add(s):\n    sum = 0\n    for char in s:\n        sum += ord(char)\n    return chr(sum)\n\n# Example usage:\n\nprint(char_add(\"abc\"))  # Output: 'f'\nprint(char_add(\"hello\"))  # Output: 'u'\nprint(char_add(\"world\"))  # Output: 't'"}
{"task_id": 84, "completion": "def newman_conway(n):\n    if n == 1 or n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for i in range(3, n + 1):\n            c = a + b\n            a, b = b, c\n        return b\n\n# Example usage:\nn = 10\nprint(newman_conway(n))  # Output: 6"}
{"task_id": 85, "completion": "import math\n\ndef surface_area_sphere(radius):\n    return 4 * math.pi * radius ** 2\n\n# Example usage:\nradius = 5\nprint(\"Surface area of the sphere:\", surface_area_sphere(radius))\n```\n\nThis function calculates the surface area of a sphere using the formula \\(4 \\pi r^2\\), where \\(r\\) is the radius of the sphere. The `math.pi` constant is used to get the value of \u03c0. The function takes the radius as an argument and returns the calculated surface area."}
{"task_id": 86, "completion": "def centered_hexagonal_number(n):\n    return 3 * n * (n - 1) + 1\n\n# Example usage:\nn = 5\nprint(centered_hexagonal_number(n))  # Output: 61"}
{"task_id": 87, "completion": "def merge_dictionaries(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n# Example usage:\n\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\ndict3 = {'d': 5, 'e': 6}\n\nmerged_dict = merge_dictionaries(dict1, dict2, dict3)\nprint(merged_dict)  # Output: {'a': 1, 'b': 3, 'c': 4, 'd': 5, 'e': 6}"}
{"task_id": 88, "completion": "def get_frequency(lst):\n    frequency_dict = {}\n    for item in lst:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n\n# Example usage:\nexample_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nprint(get_frequency(example_list))\n\n# Output: {1: 1, 2: 2, 3: 3, 4: 4}"}
{"task_id": 89, "completion": "def closest_smaller_number(n):\n    if n <= 0:\n        return None\n    if n == 1:\n        return 0\n    return n - 1\n\n# Example usage:\nn = 10\nprint(closest_smaller_number(n))  # Output: 9\n\nn = 5\nprint(closest_smaller_number(n))  # Output: 4\n\nn = 0\nprint(closest_smaller_number(n))  # Output: None\n\nn = 1\nprint(closest_smaller_number(n))  # Output: 0"}
{"task_id": 90, "completion": "def longest_word_length(words):\n    max_length = 0\n    for word in words:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"cherry\", \"date\"]\nprint(longest_word_length(words))  # Output: 6"}
{"task_id": 91, "completion": "def check_substring(list1, substr):\n    result = False\n    for element in list1:\n        if substr in element:\n            result = True\n            break\n    return result\n\n# Example usage:\n\nlist1 = [\"apple\", \"banana\", \"cherry\", \"date\"]\nsubstr = \"an\"\nprint(check_substring(list1, substr))  # Output: True\n\nsubstr = \"xyz\"\nprint(check_substring(list1, substr))  # Output: False"}
{"task_id": 92, "completion": "def is_undulating(n):\n    # Convert the number to a string to easily iterate through its digits\n    num_str = str(n)\n    \n    # Check if the length of the number is less than 3\n    if len(num_str) < 3:\n        return False\n    \n    # Check if the number is undulating\n    undulating = True\n    for i in range(len(num_str) - 2):\n        if not ((num_str[i] < num_str[i+1] and num_str[i+1] > num_str[i+2]) or \n                (num_str[i] > num_str[i+1] and num_str[i+1] < num_str[i+2])):\n            undulating = False\n            break\n    \n    return undulating\n\n# Test cases\nprint(is_undulating(121))       # True\nprint(is_undulating(123))       # False\nprint(is_undulating(32145))     # False\nprint(is_undulating(121314))    # True\nprint(is_undulating(123123))    # True\nprint(is_undulating(123412))    # False"}
{"task_id": 93, "completion": "def power(a, b):\n    return a ** b\n\n# Example usage:\nresult = power(2, 3)\nprint(result)  # Output: 8"}
{"task_id": 94, "completion": "def extract_min(test_list):\n    # Extract the index of minimum value from the list of tuples\n    min_index = min(range(len(test_list)), key=lambda i: test_list[i][1])\n    # Extract the tuple with the minimum value\n    res = test_list[min_index]\n    return (res)\n\n# Example usage:\ntest_list = [(1, 3), (2, 1), (3, 2)]\nprint(extract_min(test_list))  # Output: (2, 1)"}
{"task_id": 95, "completion": "def min_length_list(list1):\n    min_length = len(list1[0])\n    for sublist in list1:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(min_length_list(list1))  # Output: 1\n\nlist2 = [[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]\nprint(min_length_list(list2))  # Output: 2"}
{"task_id": 96, "completion": "def count_divisors(n):\n    divisors = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors += 1\n            if i!= n // i:\n                divisors += 1\n    return divisors\n\n# Example usage:\nnumber = 28\nprint(count_divisors(number))  # Output: 6 (1, 2, 4, 7, 14, 28)"}
{"task_id": 97, "completion": "def frequency_count(list_of_lists):\n    frequency = {}\n    for sublist in list_of_lists:\n        sublist_str = ','.join(map(str, sublist))\n        if sublist_str in frequency:\n            frequency[sublist_str] += 1\n        else:\n            frequency[sublist_str] = 1\n    return frequency\n\n# Example usage:\nlist_of_lists = [[1, 2], [3, 4], [1, 2], [5, 6], [3, 4], [3, 4]]\nprint(frequency_count(list_of_lists))\n\n# Output:\n# {'1,2': 2, '3,4': 3, '5,6': 1}"}
{"task_id": 98, "completion": "def multiply_and_divide(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)\n\n# Example usage:\nnumbers_list = [1, 2, 3, 4, 5]\nresult = multiply_and_divide(numbers_list)\nprint(result)  # Output: 3.0"}
{"task_id": 99, "completion": "def decimal_to_binary(num):\n    if num == 0:\n        return \"0\"\n    binary_str = \"\"\n    while num > 0:\n        binary_str = str(num % 2) + binary_str\n        num = num // 2\n    return binary_str\n\n# Example usage:\nnumber = 13\nbinary_equivalent = decimal_to_binary(number)\nprint(f\"The binary equivalent of {number} is {binary_equivalent}\")"}
{"task_id": 100, "completion": "def next_smallest_palindrome(num):\n    num += 1\n    while str(num)!= str(num)[::-1]:\n        num += 1\n    return num\n\n# Example usage:\n\nprint(next_smallest_palindrome(123))  # Output: 131\nprint(next_smallest_palindrome(89))   # Output: 99"}
{"task_id": 101, "completion": "def find_kth_element(arr, k):\n    arr.sort()\n    return arr[k-1]\n\n# Example usage:\narr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nk = 3\nprint(find_kth_element(arr, k))  # Output: 3\n\n# Explanation:\n# 1. The function first sorts the array in ascending order.\n# 2. Then it returns the element at the index k-1 (since array indices start at 0).\n\n# Note: The provided code assumes that k is always a valid index within the range of the array. If k is out of range, the function will return the last element of the sorted array."}
{"task_id": 102, "completion": "def snake_to_camel(word):\n    return ''.join(x.capitalize() for x in word.split('_'))\n\n# Example usage:\n\nprint(snake_to_camel('this_is_a_test'))  # Output: ThisIsATest\n\n# Explanation:\n# 1. The function `snake_to_camel` takes a single argument `word`, which is expected to be a snake case string.\n# 2. The function splits the input string `word` by underscores (`_`) into a list of words.\n# 3. It then capitalizes the first letter of each word using a generator expression `x.capitalize()` and joins them back together without any separator to form the camel case string.\n# 4. The result is returned.\n\n# Example usage demonstrates how to call the function with a snake case string and print the result."}
{"task_id": 103, "completion": "def eulerian_number(n, m):\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_number(n - 1, m - 1) + (m + 1) * eulerian_number(n - 1, m)\n\n# Example usage:\n# print(eulerian_number(5, 2))  # Output: 66"}
{"task_id": 104, "completion": "def sort_sublists(lists):\n    return [sorted(sublist, key=lambda x: x.lower()) for sublist in lists]\n\n# Example usage:\n\nlists = [['banana', 'apple', 'cherry'], ['dog', 'cat', 'elephant']]\nsorted_lists = sort_sublists(lists)\nprint(sorted_lists)  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]"}
{"task_id": 105, "completion": "def count_true_booleans(lst):\n    return sum(lst)\n\n# Example usage:\n\nexample_list = [True, False, True, True, False]\nprint(count_true_booleans(example_list))  # Output: 3"}
{"task_id": 106, "completion": "def add_list_to_tuple(test_list, test_tup):\n    res = list(test_tup) + test_list\n    return tuple(res)\n\n# Example usage:\ntest_list = [5, 6]\ntest_tup = (1, 2, 3, 4)\nprint(add_list_to_tuple(test_list, test_tup))  # Output: (1, 2, 3, 4, 5, 6)"}
{"task_id": 107, "completion": "def count_hexadecimal_numbers(start, end):\n    count = 0\n    for number in range(start, end + 1):\n        hex_representation = hex(number)[2:]  # Convert to hexadecimal and remove '0x' prefix\n        if all(digit in '0123456789abcdef' for digit in hex_representation):\n            count += 1\n    return count\n\n# Example usage:\nstart = 0\nend = 255\nprint(count_hexadecimal_numbers(start, end))  # Output will be the count of valid hexadecimal numbers in the range"}
{"task_id": 108, "completion": "import heapq\n\ndef merge_sorted_lists(*args):\n    # Create a heap from the first element of each list\n    h = []\n    for i, lst in enumerate(args):\n        if lst:\n            heapq.heappush(h, (lst[0], i, 0))\n    \n    while h:\n        val, i, j = heapq.heappop(h)\n        yield val\n        if j + 1 < len(args[i]):\n            heapq.heappush(h, (args[i][j + 1], i, j + 1))\n\n# Example usage:\nlists = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nsorted_iterator = merge_sorted_lists(*lists)\nfor num in sorted_iterator:\n    print(num)\n```\n\nThis code defines a function `merge_sorted_lists` that takes multiple sorted lists as input and returns a single sorted iterator. The function uses the `heapq` module to efficiently merge the lists. The `heapq.heappush` function is used to add the first element of each list to the heap, and `heapq.heappop` is used to extract the smallest element from the heap. The function yields the smallest element and then pushes the next element from the same list into the heap if available. This process continues until all elements are exhausted."}
{"task_id": 109, "completion": "def count_rotations(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated_string = s[i:] + s[:i]\n        if int(rotated_string, 2) % 2!= 0:\n            count += 1\n    return count\n\n# Example usage:\nbinary_string = \"1101\"\nprint(count_rotations(binary_string))  # Output: 3"}
{"task_id": 110, "completion": "def extract_missing_ranges(nums, start, end):\n    missing_ranges = []\n    prev = start - 1\n    for num in nums:\n        if num > prev + 1:\n            missing_ranges.append((prev + 1, num - 1))\n        prev = num\n    if prev < end:\n        missing_ranges.append((prev + 1, end))\n    return missing_ranges\n\n# Example usage:\n\nnums = [0, 1, 3, 50, 75]\nstart = 0\nend = 99\nprint(extract_missing_ranges(nums, start, end))\n\n# Output:\n# [(2, 2), (4, 49), (51, 74), (76, 99)]"}
{"task_id": 111, "completion": "def common_elements(list1, list2):\n    # Initialize an empty list to store common elements\n    common = []\n    \n    # Iterate over each element in the first list\n    for item in list1:\n        # Check if the element is present in the second list\n        if item in list2:\n            # Add the common element to the common list\n            common.append(item)\n    \n    return common\n```\n\n# Example usage:\n\n```python\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\nprint(common_elements(list1, list2))  # Output: [3, 4]\n```\n\nThis function takes two lists as input and returns a list of common elements between them. It uses a simple iteration and membership test to find the common elements."}
{"task_id": 112, "completion": "def perimeter_cylinder(r, h):\n    perimeter = 2 * (22/7) * r * (r + h)\n    return perimeter\n\n# Example usage:\nr = 7\nh = 10\nprint(\"The perimeter of the cylinder is:\", perimeter_cylinder(r, h))"}
{"task_id": 113, "completion": "def is_integer(s):\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:\n\nprint(is_integer(\"123\"))  # True\nprint(is_integer(\"abc\"))  # False\nprint(is_integer(\"12.34\"))  # False\nprint(is_integer(\"\"))  # False\nprint(is_integer(\" \"))  # False"}
{"task_id": 114, "completion": "def assign_frequency(test_list):\n    res = {}\n    for sub in test_list:\n        res[sub] = res.get(sub, 0) + 1\n    return res\n\n# Example usage:\n\ntest_list = [(1, 'a'), (2, 'b'), (1, 'a'), (3, 'c'), (2, 'b'), (2, 'b')]\nresult = assign_frequency(test_list)\nprint(result)\n\n# Output:\n# {(1, 'a'): 2, (2, 'b'): 3, (3, 'c'): 1}"}
{"task_id": 115, "completion": "def check_empty_dict(dict_list):\n    for dictionary in dict_list:\n        if dictionary:\n            return False\n    return True\n\n# Test cases:\n\n# Test case 1: List with empty dictionaries\ndict_list1 = [{}, {}, {}]\nprint(check_empty_dict(dict_list1))  # Output: True\n\n# Test case 2: List with non-empty dictionaries\ndict_list2 = [{'a': 1}, {}, {'b': 2}]\nprint(check_empty_dict(dict_list2))  # Output: False\n\n# Test case 3: List with no dictionaries\ndict_list3 = []\nprint(check_empty_dict(dict_list3))  # Output: True\n\n# Test case 4: List with one non-empty dictionary\ndict_list4 = [{'a': 1}]\nprint(check_empty_dict(dict_list4))  # Output: False\n\n# Test case 5: List with one empty dictionary\ndict_list5 = [{}"}
{"task_id": 116, "completion": "def tuple_to_int(test_tup):\n    res = int(''.join(map(str, test_tup)))\n    return res\n\n# Example usage:\n\ntest_tup = (1, 2, 3)\nprint(tuple_to_int(test_tup))  # Output: 123\n\ntest_tup = (4, 5, 6)\nprint(tuple_to_int(test_tup))  # Output: 456"}
{"task_id": 117, "completion": "def convert_to_float(list1):\n    for i in range(len(list1)):\n        try:\n            list1[i] = float(list1[i])\n        except ValueError:\n            print(f\"Element {list1[i]} cannot be converted to float.\")\n    return list1\n\n# Example usage:\n\nexample_list = ['1', '2.5', 'three', '4.7e10', '5']\nconverted_list = convert_to_float(example_list)\nprint(converted_list)\n\n# Output:\n\n# [1.0, 2.5, 'three', 4.7e10, 5.0]\n# Element three cannot be converted to float."}
{"task_id": 118, "completion": "def string_to_list(string):\n    # Split the string by spaces\n    lst = list(string.split())\n    return lst\n\n# Example usage:\ninput_string = \"Hello world this is a test\"\nresult = string_to_list(input_string)\nprint(result)  # Output: ['Hello', 'world', 'this', 'is', 'a', 'test']\n\n# Explanation:\n# 1. The function `string_to_list` takes a single argument `string`.\n# 2. Inside the function, we use the `split()` method to split the string into a list of words based on spaces.\n# 3. The `list()` constructor is used to convert the split result into a list.\n# 4. The function then returns the list.\n# 5. In the example usage, we call the function with a sample string and print the result to verify the output."}
{"task_id": 119, "completion": "def find_single_element(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        \n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid\n    \n    return arr[left]\n\n# Example usage:\narr = [1, 1, 2, 2, 3, 4, 4, 5, 5]\nprint(find_single_element(arr))  # Output: 3"}
{"task_id": 120, "completion": "def max_product(test_list):\n    res = max(a * b for a, b in test_list)\n    return (res)\n\n# Example usage:\n\ntest_list = [(1, 2), (3, 4), (5, 6)]\nprint(max_product(test_list))  # Output: 30\n\n# Explanation:\n\n# The function max_product takes a list of tuples as input.\n# It uses a generator expression to calculate the product of each tuple in the list.\n# The max function is used to find the maximum product from the generated products.\n# The function returns the maximum product."}
{"task_id": 121, "completion": "def find_triplet(arr, target_sum):\n    arr.sort()\n    n = len(arr)\n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target_sum:\n                return (arr[i], arr[left], arr[right])\n            elif current_sum < target_sum:\n                left += 1\n            else:\n                right -= 1\n    return None\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\ntarget_sum = 9\nresult = find_triplet(arr, target_sum)\nprint(result)  # Output: (1, 4, 4)"}
{"task_id": 122, "completion": "def smart_number(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    else:\n        return \"Number out of range\"\n\n# Test the function:\nprint(smart_number(1))  # Output: 1\nprint(smart_number(5))  # Output: 5\nprint(smart_number(10)) # Output: 10\nprint(smart_number(11)) # Output: Number out of range\n\n# Explanation:\n# The function smart_number takes an integer n as input and returns the n\u2019th smart number.\n# The function checks the value of n and returns the corresponding smart number.\n# If n is greater than 10, it returns \"Number out of range\"."}
{"task_id": 123, "completion": "def sum_amicable_numbers(n):\n    def sum_of_divisors(num):\n        sum_div = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum_div += i\n                if i!= num // i:\n                    sum_div += num // i\n        return sum_div\n\n    sum_amicable = 0\n    for a in range(2, n + 1):\n        b = sum_of_divisors(a)\n        if a!= b and sum_of_divisors(b) == a:\n            sum_amicable += a\n    return sum_amicable\n\n# Example usage:\nprint(sum_amicable_numbers(1000))  # Example usage"}
{"task_id": 124, "completion": "import cmath\n\ndef get_angle(complex_num):\n    angle = cmath.phase(complex_num)\n    return angle\n\n# Example usage:\n\ncomplex_number = 1 + 1j\nangle = get_angle(complex_number)\nprint(f\"The angle of the complex number {complex_number} is {angle} radians.\")"}
{"task_id": 125, "completion": "def max_diff(s):\n    n = len(s)\n    # Initialize the difference as 0\n    diff = 0\n    # Initialize the maximum difference as 0\n    max_diff = 0\n    \n    # Traverse the string to calculate the difference\n    for i in range(n):\n        # If the current character is '0', increase the difference\n        if s[i] == '0':\n            diff += 1\n        # If the current character is '1', decrease the difference\n        else:\n            diff -= 1\n        \n        # If the difference becomes negative, reset it to 0\n        if diff < 0:\n            diff = 0\n        \n        # Update the maximum difference\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n\n# Example usage:\nbinary_string = \"11000010001\"\nprint(max_diff(binary_string))  # Output: 6"}
{"task_id": 126, "completion": "def sum_of_common_divisors(a, b):\n    # Find the minimum of the two numbers\n    min_num = min(a, b)\n    sum_divisors = 0\n    \n    # Iterate from 1 to the minimum number\n    for i in range(1, min_num + 1):\n        # Check if i is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n    \n    return sum_divisors\n\n# Example usage:\nnum1 = 12\nnum2 = 18\nprint(sum_of_common_divisors(num1, num2))  # Output: 6 (common divisors: 1, 2, 3, 6)"}
{"task_id": 127, "completion": "def multiply(a, b):\n    # Check if either number is zero, the result is zero\n    if a == 0 or b == 0:\n        return 0\n    \n    # Determine the sign of the result\n    result_sign = 1 if (a < 0) == (b < 0) else -1\n    \n    # Work with positive numbers for simplicity\n    a = abs(a)\n    b = abs(b)\n    \n    # Initialize the result\n    result = 0\n    \n    # Add 'a' to the result 'b' times\n    for _ in range(b):\n        result += a\n    \n    # Apply the sign to the result\n    return result if result_sign == 1 else -result\n\n# Example usage:\nprint(multiply(3, 4))  # Output: 12\nprint(multiply(-3, 4)) # Output: -12\nprint(multiply(3, -4)) # Output: -12\nprint(multiply(-3, -4))# Output: 12"}
{"task_id": 128, "completion": "def shortlist(lst, n):\n    shortlisted_words = [word for word in lst if len(word) > n]\n    return shortlisted_words\n\n# Example usage:\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"]\nn = 5\nprint(shortlist(words, n))  # Output: ['banana', 'cherry', 'elderberry', 'grape']"}
{"task_id": 129, "completion": "def is_magic_square(matrix):\n    n = len(matrix)\n    # Calculate the sum of the first row\n    magic_sum = sum(matrix[0])\n    \n    # Check the sum of each row\n    for row in matrix:\n        if sum(row)!= magic_sum:\n            return False\n    \n    # Check the sum of each column\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n))!= magic_sum:\n            return False\n    \n    # Check the sum of the main diagonal\n    if sum(matrix[i][i] for i in range(n))!= magic_sum:\n        return False\n    \n    # Check the sum of the secondary diagonal\n    if sum(matrix[i][n-i-1] for i in range(n))!= magic_sum:\n        return False\n    \n    return True\n\n# Example usage:\nmatrix = [\n    [2, 7, 6],\n    [9, 5, 1],\n    [4, 3, 8]\n]\n\nprint(is_magic_square(matrix))  # Output: True"}
{"task_id": 130, "completion": "def max_frequency(nums):\n    freq_dict = {}\n    for num in nums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item\n\n# Example usage:\nnums = [1, 3, 2, 1, 4, 1, 3, 2, 3, 3]\nprint(max_frequency(nums))  # Output: 3"}
{"task_id": 131, "completion": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    # Convert the string to a list to modify it\n    s_list = list(s)\n    # Initialize two pointers\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        # Move the left pointer to the right until it points to a vowel\n        if s_list[left] not in vowels:\n            left += 1\n        # Move the right pointer to the left until it points to a vowel\n        elif s_list[right] not in vowels:\n            right -= 1\n        # Swap the vowels found at the left and right pointers\n        else:\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n    \n    # Convert the list back to a string and return it\n    return ''.join(s_list)\n\n# Example usage:\ninput_string = \"hello\"\nprint(reverse_vowels(input_string))  # Output: \"holle\""}
{"task_id": 132, "completion": "def tuple_to_string(test_tuple):\n    str_output = ''.join(test_tuple)\n    return str_output\n\n# Example usage:\n\ntest_tuple = ('H', 'e', 'l', 'l', 'o')\nprint(tuple_to_string(test_tuple))  # Output: Hello"}
{"task_id": 133, "completion": "def sum_negative_numbers(numbers):\n    negative_sum = sum(filter(lambda x: x < 0, numbers))\n    return negative_sum\n\n# Example usage:\nnumbers = [1, -2, 3, -4, 5, -6]\nprint(sum_negative_numbers(numbers))  # Output: -12"}
{"task_id": 134, "completion": "def check_even_odd(arr, p):\n    last_element = arr[-1]\n    for _ in range(p):\n        last_element = last_element // 2\n    if last_element % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage:\n\narr = [12, 34, 56, 78, 10]\np = 3\nresult = check_even_odd(arr, p)\nprint(result)  # Output: Even or Odd based on the operation"}
{"task_id": 135, "completion": "def hexagonal_number(n):\n    return n * (2 * n - 1)\n\n# Example usage:\n\nprint(hexagonal_number(1))  # Output: 1\nprint(hexagonal_number(2))  # Output: 6\nprint(hexagonal_number(3))  # Output: 15\nprint(hexagonal_number(4))  # Output: 28\nprint(hexagonal_number(5))  # Output: 45"}
{"task_id": 136, "completion": "def calculate_electricity_bill(units):\n    if units <= 50:\n        bill = units * 2.60\n    elif units <= 100:\n        bill = 50 * 2.60 + (units - 50) * 3.25\n    elif units <= 200:\n        bill = 50 * 2.60 + 50 * 3.25 + (units - 100) * 5.26\n    else:\n        bill = 50 * 2.60 + 50 * 3.25 + 100 * 5.26 + (units - 200) * 8.45\n    return bill\n\n# Example usage:\nunits_consumed = 310\ntotal_bill = calculate_electricity_bill(units_consumed)\nprint(f\"Total electricity bill: ${total_bill:.2f}\")"}
{"task_id": 137, "completion": "def zero_ratio(arr):\n    count_zero = 0\n    for i in arr:\n        if i == 0:\n            count_zero += 1\n    return count_zero / len(arr)\n\n# Example usage:\narr = [1, 0, 2, 0, 3, 4, 0]\nprint(zero_ratio(arr))  # Output: 0.42857142857142855"}
{"task_id": 138, "completion": "def is_Power_Of_Two(n):\n    if n == 0:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    return n == 1\n\n# Explanation:\n\n# 1. Check if the number `n` is 0. If it is, return `False` because 0 cannot be represented as a sum of non-zero powers of 2.\n# 2. Use a while loop to divide `n` by 2 as long as `n` is even (i.e., `n % 2 == 0`). This loop removes all factors of 2 from `n`.\n# 3. After the loop, check if `n` is 1. If it is, return `True` because `n` can be represented as a sum of non-zero powers of 2. Otherwise, return `False`."}
{"task_id": 139, "completion": "def find_circumference(radius):\n    circumference = 2 * 3.14 * radius\n    return circumference\n\n# Example usage:\nradius = 5\nprint(\"The circumference of the circle is:\", find_circumference(radius))"}
{"task_id": 140, "completion": "def extract_singly_occurring_elements(test_list):\n    res = []\n    for sub in test_list:\n        for ele in sub:\n            if sub.count(ele) == 1:\n                res.append(ele)\n                break\n    return res\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (1, 2)]\nprint(extract_singly_occurring_elements(test_list))  # Output: [3, 6]\n\n# Explanation:\n# 1. Define the function `extract_singly_occurring_elements` that takes a list of tuples `test_list` as input.\n# 2. Initialize an empty list `res` to store the elements that occur singly in the given list.\n# 3. Iterate over each tuple in `test_list`.\n# 4. For each tuple, iterate over each element in the tuple.\n# 5. Check if the element occurs exactly once in the tuple using `count` method.\n# 6. If it does, append the element to `res` and break out of the inner loop to avoid adding duplicates.\n# 7. Return the list `res` containing the elements that occur singly in the given tuple list."}
{"task_id": 141, "completion": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        # Find the index of the maximum element in the unsorted part of the array\n        mi = nums.index(max(nums[0:arr_len]))\n        # Reverse the sub-array from 0 to mi to bring the maximum element to the beginning\n        nums = nums[mi::-1] + nums[mi+1:]\n        # Reverse the entire unsorted part of the array to bring the maximum element to the end\n        nums = nums[arr_len-1::-1] + nums[arr_len:]\n        # Decrease the size of the unsorted part of the array\n        arr_len -= 1\n    return nums\n\n# Example usage:\nnums = [3, 2, 4, 1]\nsorted_nums = pancake_sort(nums)\nprint(sorted_nums)  # Output: [1, 2, 3, 4]"}
{"task_id": 142, "completion": "def count_same_pair(nums1, nums2, nums3):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i] == nums3[i]:\n            count += 1\n    return count\n\n# Example usage:\nnums1 = [1, 2, 3, 4, 5]\nnums2 = [2, 2, 3, 4, 5]\nnums3 = [2, 2, 3, 4, 5]\nprint(count_same_pair(nums1, nums2, nums3))  # Output: 4"}
{"task_id": 143, "completion": "def count_lists(test_tup):\n    res = sum(isinstance(ele, list) for ele in test_tup)\n    return res\n\n# Example usage:\ntest_tup = (1, 2, [3, 4], \"hello\", [5, 6], (7, 8))\nprint(count_lists(test_tup))  # Output: 2"}
{"task_id": 144, "completion": "def sum_of_absolute_differences(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            total_sum += abs(arr[i] - arr[j])\n    \n    return total_sum\n\n# Example usage:\narr = [1, 2, 3]\nprint(sum_of_absolute_differences(arr))  # Output: 5\n\n# Explanation:\n# For the array [1, 2, 3], the pairs are (1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3).\n# The absolute differences are |1-1| = 0, |1-2| = 1, |1-3| = 2, |2-2| = 0, |2-3| = 1, |3-3| = 0.\n# The sum of these differences is 0 + 1 + 2 + 0 + 1 + 0 = 5."}
{"task_id": 145, "completion": "def max_difference(arr):\n    if len(arr) < 2:\n        return None  # Return None if the array has less than 2 elements\n    min_val = min(arr)\n    max_val = max(arr)\n    return max_val - min_val\n\n# Example usage:\narr = [2, 3, 10, 6, 4, 8, 1]\nprint(max_difference(arr))  # Output: 9 (difference between 10 and 1)"}
{"task_id": 146, "completion": "def ascii_value_total(string):\n    total = 0\n    for char in string:\n        total += ord(char)\n    return total\n\n# Example usage:\nstring = \"Hello, World!\"\nprint(ascii_value_total(string))  # Output: 1081"}
{"task_id": 147, "completion": "def max_path_sum(triangle):\n    n = len(triangle)\n    # Create a DP table to store the maximum path sum\n    dp = [[0] * (i + 1) for i in range(n)]\n    # Initialize the DP table with the last row of the triangle\n    for i in range(n):\n        dp[n - 1][i] = triangle[n - 1][i]\n    # Fill the DP table from bottom to top\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] = triangle[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1])\n    # The top element of the DP table contains the maximum path sum\n    return dp[0][0]\n\n# Example usage:\ntriangle = [\n    [2],\n    [3, 4],\n    [6, 5, 7],\n    [4, 1, 8, 3]\n]\nprint(max_path_sum(triangle))  # Output: 23"}
{"task_id": 148, "completion": "def max_sum_partition(n):\n    # Convert the number to a string to iterate over its digits\n    num_str = str(n)\n    \n    # Initialize the maximum sum and the best partition\n    max_sum = float('-inf')\n    best_partition = \"\"\n    \n    # Try all possible partitions\n    for i in range(1, len(num_str)):\n        # Partition the number into two parts\n        part1 = num_str[:i]\n        part2 = num_str[i:]\n        \n        # Calculate the sum of digits for each part\n        sum_part1 = sum(int(digit) for digit in part1)\n        sum_part2 = sum(int(digit) for digit in part2)\n        \n        # Calculate the total sum of digits\n        total_sum = sum_part1 + sum_part2\n        \n        # Update the maximum sum and the best partition if necessary\n        if total_sum > max_sum:\n            max_sum = total_sum\n            best_partition = part1 + \" \" + part2\n    \n    return max_sum, best_partition\n\n# Example usage:\nn = 1234\nmax_sum, best_partition = max_sum_partition(n)\nprint(f\"Maximum sum of digits: {max_sum}\")\nprint(f\"Best partition: {best_partition}\")\n\n# Explanation:\n# 1. Convert the number to a string to iterate over its digits.\n# 2. Initialize the maximum sum and the best partition.\n# 3. Try all possible partitions by iterating over the possible split points.\n# 4. For each partition, calculate the sum of digits for each part.\n# 5. Calculate the total sum of digits for the partition.\n# 6. Update the maximum sum and the best partition if the current total sum is greater.\n# 7. Return the maximum sum and the best partition.\n\n# This function will find the partition that maximizes the sum of the digits of the two parts."}
{"task_id": 149, "completion": "def find_longest_subseq(arr, n):\n    # Create and initialize a lookup table\n    dp = [1 for _ in range(n)]\n\n    # Fill the table\n    for i in range(n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # Return the maximum value in the table\n    return max(dp)\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 3, 2, 1]\nn = len(arr)\nprint(find_longest_subseq(arr, n))  # Output: 5"}
{"task_id": 150, "completion": "def is_present(n):\n    if n < 1:\n        return False\n    while n % 2 == 0:\n        n //= 2\n    return n == 1\n\n# Explanation:\n\n# The function `is_present(n)` determines whether the given number `n` is present in the infinite sequence defined as follows:\n# - Start with any positive integer `n`.\n# - If `n` is even, divide `n` by 2.\n# - If `n` is odd, multiply `n` by 3 and add 1.\n# - Continue this process indefinitely.\n\n# The function works by repeatedly dividing `n` by 2 until `n` becomes odd. If, after this process, `n` is reduced to 1, it means that the sequence eventually reaches 1 for all numbers, and thus `n` was part of the sequence. If `n` is not reduced to 1, it means `n` was not part of the sequence.\n\n# Example usage:\n\nprint(is_present(6))  # True, because 6 -> 3 -> 10 -> 5 -> 15 -> 46 -> 23 -> 70 -> 35 -> 106 -> 53 -> 160 -> 80 -> 40 -> 20 -> 10 -> 5 -> 1\nprint(is_present(7))  # True, because 7 -> 22 -> 11 -> 34 -> 17 -> 52 -> 26 -> 13 -> 40 -> 20 -> 10 -> 5 -> 1\nprint(is_present(1))  # True, because 1 is already the starting point\nprint(is_present(0))  # False, because 0 is not a positive integer\nprint(is_present(-5)) # False, because -5 is not a positive integer"}
{"task_id": 151, "completion": "def coprime(x, y):\n    # Function to return the greatest common divisor of two numbers\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    \n    # Check if the gcd of the two numbers is 1\n    return gcd(x, y) == 1\n\n# Example usage:\nx = 14\ny = 15\nprint(coprime(x, y))  # Output: True"}
{"task_id": 152, "completion": "def merge_sort(arr):\n    if len(arr) > 1:\n        # Finding the mid of the array\n        mid = len(arr) // 2\n\n        # Dividing the array elements into 2 halves\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        # Sorting the first half\n        merge_sort(left_half)\n\n        # Sorting the second half\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        # Copy data to temp arrays L[] and R[]\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        # Checking if any element was left\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n\n# Example usage:\narr = [12, 11, 13, 5, 6, 7]\nsorted_arr = merge_sort(arr)\nprint(\"Sorted array is:\", sorted_arr)"}
{"task_id": 153, "completion": "def find_vertex(a, b, c):\n    x_vertex = -b / (2 * a)\n    y_vertex = a * (x_vertex ** 2) + b * x_vertex + c\n    return (x_vertex, y_vertex)\n\n# Example usage:\na = 1\nb = -2\nc = 1\nvertex = find_vertex(a, b, c)\nprint(\"The vertex of the parabola is at:\", vertex)\n\n# Explanation:\n\n# The function find_vertex takes three parameters: a, b, and c, which are the coefficients of the quadratic equation ax^2 + bx + c = 0.\n# The x-coordinate of the vertex of the parabola is given by the formula -b / (2 * a).\n# The y-coordinate of the vertex is calculated by substituting the x-coordinate back into the quadratic equation.\n# The function returns a tuple containing the x and y coordinates of the vertex.\n# In the example usage, we define the coefficients a, b, and c, call the find_vertex function with these values, and print the result."}
{"task_id": 154, "completion": "def extract_elements(list1, index):\n    result = []\n    for sublist in list1:\n        if len(sublist) > index:\n            result.append(sublist[index])\n    return result\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex = 1\nprint(extract_elements(list1, index))  # Output: [2, 5, 8]"}
{"task_id": 155, "completion": "def toggle_even_bits(n):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA  # 0xAAAAAAAA is a hexadecimal number where all even bits are 1\n    \n    # XOR the given number with the mask to toggle the even bits\n    result = n ^ mask\n    \n    return result\n\n# Example usage:\nnumber = 29  # Binary: 11101\nprint(toggle_even_bits(number))  # Output: 26 (Binary: 11010)"}
{"task_id": 156, "completion": "def tuple_string_to_int(tuple_str):\n    # Convert each string in the tuple to an integer\n    tuple_int = tuple(int(s) for s in tuple_str)\n    return tuple_int\n\n# Example usage:\nexample_tuple_str = ('1', '2', '3', '4', '5')\nexample_tuple_int = tuple_string_to_int(example_tuple_str)\nprint(example_tuple_int)  # Output: (1, 2, 3, 4, 5)"}
{"task_id": 157, "completion": "def run_length_encode(lst):\n    if not lst:\n        return []\n    \n    encoded = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            count += 1\n        else:\n            encoded.append([count, lst[i - 1]])\n            count = 1\n    encoded.append([count, lst[-1]])\n    return encoded\n\ndef run_length_decode(lst):\n    decoded = []\n    for count, value in lst:\n        decoded.extend([value] * count)\n    return decoded\n\n# Example usage:\noriginal_list = [1, 1, 2, 2, 2, 3, 3, 3, 3]\nencoded = run_length_encode(original_list)\nprint(\"Encoded:\", encoded)\n\ndecoded = run_length_decode(encoded)\nprint(\"Decoded:\", decoded)\n\n# Output:\n# Encoded: [[2, 1], [3, 2], [4, 3]]\n# Decoded: [1, 1, 2, 2, 2, 3, 3, 3, 3]"}
{"task_id": 158, "completion": "def find_k_operations(arr, k):\n    # Find the maximum element in the array\n    max_element = max(arr)\n    \n    # Initialize the number of operations\n    operations = 0\n    \n    # Iterate through the array\n    for element in arr:\n        # Calculate the difference between the maximum element and the current element\n        diff = max_element - element\n        \n        # Add the number of operations required to make the current element equal to the maximum element\n        operations += diff // k\n    \n    return operations\n\n# Example usage:\n\narr = [1, 2, 3]\nk = 2\nprint(find_k_operations(arr, k))  # Output: 2\n\narr = [1, 3, 5]\nk = 2\nprint(find_k_operations(arr, k))  # Output: 4"}
{"task_id": 159, "completion": "def season_for_date(month, day):\n    if (month == 'January') or (month == 'February') or (month == 'March' and day < 20):\n        return 'Winter'\n    elif (month == 'March' and day >= 20) or (month == 'April') or (month == 'May') or (month == 'June' and day < 21):\n        return 'Spring'\n    elif (month == 'June' and day >= 21) or (month == 'July') or (month == 'August') or (month == 'September' and day < 22):\n        return 'Summer'\n    elif (month == 'September' and day >= 22) or (month == 'October') or (month == 'November') or (month == 'December' and day < 21):\n        return 'Autumn'\n    else:\n        return 'Winter'\n\n# Example usage:\nprint(season_for_date('March', 21))  # Output: Spring\nprint(season_for_date('June', 21))   # Output: Summer\nprint(season_for_date('September', 22))  # Output: Autumn\nprint(season_for_date('December', 21))   # Output: Winter\n\n# Explanation:\n# The function `season_for_date` determines the season based on the given month and day. It uses a series of conditional statements to check the month and day and return the appropriate season. The conditions are designed to handle the transition periods between seasons, such as the March equinox and the September equinox."}
{"task_id": 160, "completion": "def find_xy(a, b, n):\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n\n# Example usage:\na = 3\nb = 5\nn = 11\nresult = find_xy(a, b, n)\nprint(result)  # Output: (2, 1)"}
{"task_id": 161, "completion": "def remove_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n\n# Example usage:\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4]\nresult = remove_elements(list1, list2)\nprint(result)  # Output: [1, 2, 5]"}
{"task_id": 162, "completion": "def sum_series(n):\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 2\n    return sum\n\n# Test cases:\n\nprint(sum_series(6))  # Output: 12\nprint(sum_series(9))  # Output: 25"}
{"task_id": 163, "completion": "def area_polygon(n, s):\n    area = (n * s**2) / (4 * math.tan(math.pi / n))\n    return area\n\nimport math\n\n# Example usage:\nn = 5  # number of sides\ns = 6  # length of each side\nprint(area_polygon(n, s))  # Output: 51.96152422706632"}
{"task_id": 164, "completion": "def check_divisor_sum(a, b):\n    # Function to calculate the sum of divisors of a number\n    def sum_of_divisors(n):\n        divisors_sum = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    # Calculate the sum of divisors for both numbers\n    sum_a = sum_of_divisors(a)\n    sum_b = sum_of_divisors(b)\n\n    # Check if the sums are equal\n    return sum_a == sum_b\n\n# Example usage:\na = 220\nb = 284\nprint(check_divisor_sum(a, b))  # Output: True"}
{"task_id": 165, "completion": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if (i == ord(str1[i]) - ord('a') or i == ord(str1[i]) - ord('A')):\n            count += 1\n    return count\n\n# Example usage:\n\nstring = \"AbcDef\"\nprint(count_char_position(string))  # Output: 2"}
{"task_id": 166, "completion": "def count_pairs_with_even_xor(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nprint(count_pairs_with_even_xor(arr, n))  # Output will be the count of pairs with even XOR"}
{"task_id": 167, "completion": "def next_Power_Of_2(n):\n    count = 0\n    if n and not (n & (n - 1)):\n        return n\n    while n!= 0:\n        n >>= 1\n        count += 1\n    return 1 << count\n\n# Explanation:\n\n# 1. The function `next_Power_Of_2(n)` takes an integer `n` as input.\n# 2. It initializes a variable `count` to 0.\n# 3. The function checks if `n` is a power of 2 using the condition `if n and not (n & (n - 1))`. If `n` is a power of 2, it returns `n`.\n# 4. If `n` is not a power of 2, the function enters a while loop that shifts `n` to the right by one bit (`n >>= 1`) and increments `count` by 1 in each iteration.\n# 5. After the loop, the function returns `1 << count`, which is equivalent to `2^count`.\n\n# Example usage:\n\nprint(next_Power_Of_2(10))  # Output: 16\nprint(next_Power_Of_2(1))   # Output: 1\nprint(next_Power_Of_2(32))  # Output: 32"}
{"task_id": 168, "completion": "def frequency_of_number(arr, x):\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count\n\n# Example usage:\n\narr = [1, 2, 3, 4, 2, 2, 3, 2]\nx = 2\nprint(frequency_of_number(arr, x))  # Output: 4"}
{"task_id": 169, "completion": "def get_pell(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n + 1):\n            c = 2 * b + a\n            a = b\n            b = c\n        return b\n\n# Example usage:\nn = 5\nprint(get_pell(n))  # Output: 12\n\n# Explanation:\n# The Pell numbers are a sequence of numbers similar to the Fibonacci numbers, but with a different recurrence relation. \n# The first few Pell numbers are: 0, 1, 2, 5, 12, 29, 70, 169, 408, 985,...\n# The nth Pell number can be calculated using the recurrence relation P(n) = 2*P(n-1) + P(n-2), with the initial conditions P(0) = 0 and P(1) = 1.\n# The function uses an iterative approach to calculate the nth Pell number, which is more efficient than a recursive approach."}
{"task_id": 170, "completion": "def sum_range(nums, start, end):\n    return sum(nums[start:end+1])\n\n# Example usage:\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(sum_range(numbers, 2, 5))  # Output: 18 (3+4+5+6)\nprint(sum_range(numbers, 0, 9))  # Output: 55 (1+2+3+4+5+6+7+8+9+10)\nprint(sum_range(numbers, 3, 3))  # Output: 4 (4)\nprint(sum_range(numbers, 7, 2))  # Output: 0 (since start index is greater than end index)\n\n# Explanation:\n\n# The function `sum_range(nums, start, end)` takes three parameters:\n# - `nums`: a list of numbers.\n# - `start`: the starting index of the range (inclusive).\n# - `end`: the ending index of the range (inclusive).\n\n# The function returns the sum of the numbers in the list `nums` from index `start` to index `end` (inclusive).\n\n# The `sum` function is used to calculate the sum of the elements in the sliced list `nums[start:end+1]`. The slice `nums[start:end+1]` includes elements from `start` to `end` (inclusive), and the `sum` function calculates the sum of these elements.\n\n# The example usage demonstrates how to call the function with different ranges and prints the results."}
{"task_id": 171, "completion": "def pentagon_perimeter(side_length):\n    return 5 * side_length\n\n# Example usage:\nside_length = 7\nprint(\"Perimeter of the pentagon:\", pentagon_perimeter(side_length))"}
{"task_id": 172, "completion": "def count_occurrences(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n\n# Example usage:\ninput_string = \"stdentstd std\"\nprint(count_occurrences(input_string))  # Output: 2"}
{"task_id": 173, "completion": "import re\n\ndef remove_non_alphanumeric(input_string):\n    # Use regular expression to keep only alphanumeric characters\n    cleaned_string = re.sub(r'[^a-zA-Z0-9]', '', input_string)\n    return cleaned_string\n\n# Example usage:\ninput_string = \"Hello, World! 123\"\ncleaned_string = remove_non_alphanumeric(input_string)\nprint(cleaned_string)  # Output: \"HelloWorld123\""}
{"task_id": 174, "completion": "def group_key_value_pairs(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = []\n        result[key].append(value)\n    return result\n\n# Example usage:\n\npairs = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5)]\ngrouped = group_key_value_pairs(pairs)\nprint(grouped)  # Output: {'a': [1, 3], 'b': [2, 4], 'c': [5]}"}
{"task_id": 175, "completion": "def is_valid_parentheses(str1):\n    stack = []\n    pchar = {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n    for parenthesis in str1:\n        if parenthesis in pchar:\n            stack.append(parenthesis)\n        elif len(stack) == 0 or pchar[stack.pop()]!= parenthesis:\n            return False\n    return len(stack) == 0\n\nprint(is_valid_parentheses(\"{[()]}\"))  # True\nprint(is_valid_parentheses(\"{[(])}\"))  # False\nprint(is_valid_parentheses(\"{{[[(())]]}}\"))  # True\n\n# Explanation:\n\n# 1. We initialize an empty stack to keep track of the opening parentheses.\n# 2. We define a dictionary pchar that maps each opening parenthesis to its corresponding closing parenthesis.\n# 3. We iterate through each character in the input string.\n# 4. If the character is an opening parenthesis (i.e., it is in the pchar dictionary), we push it onto the stack.\n# 5. If the character is a closing parenthesis, we check if the stack is empty or if the top of the stack is not the corresponding opening parenthesis. If either condition is true, we return False.\n# 6. After the loop, we check if the stack is empty. If it is, it means all the parentheses were matched correctly, so we return True. Otherwise, we return False."}
{"task_id": 176, "completion": "def find_perimeter(a, b, c):\n    perimeter = a + b + c\n    return perimeter\n\n# Example usage:\n\nside1 = 3\nside2 = 4\nside3 = 5\n\nresult = find_perimeter(side1, side2, side3)\nprint(\"The perimeter of the triangle is:\", result)"}
{"task_id": 177, "completion": "import math\n\ndef find_two_numbers(l, r):\n    for a in range(l, r + 1):\n        for b in range(a + 1, r + 1):\n            lcm = (a * b) // math.gcd(a, b)\n            if l <= lcm <= r:\n                return (a, b)\n    return None\n\n# Example usage:\nl = 10\nr = 100\nresult = find_two_numbers(l, r)\nprint(result)  # Output will be a tuple of two numbers\n```\n\nThis function works as follows:\n1. It iterates through all possible pairs of numbers `(a, b)` where `a < b` and both `a` and `b` are within the range `[l, r]`.\n2. For each pair, it calculates the least common multiple (LCM) using the formula `(a * b) // gcd(a, b)`.\n3. If the calculated LCM lies within the given range `[l, r]`, it returns the pair `(a, b)`.\n4. If no such pair is found, it returns `None`.\n\nThis approach ensures that we find two distinct numbers whose LCM is within the specified range."}
{"task_id": 178, "completion": "def search_literals(pattern, text):\n    # Your code goes here\n    pass\n\n# Test cases:\n\nprint(search_literals(\"hello\", \"hello world\"))  # Should return True\nprint(search_literals(\"world\", \"hello world\"))  # Should return True\nprint(search_literals(\"python\", \"hello world\"))  # Should return False\nprint(search_literals(\"hello\", \"HELLO WORLD\"))  # Should return False (case-sensitive)\n\n# Hint: You can use the `in` operator to check if a substring exists in a string.\n\n# Here's the implementation of the function:\n\ndef search_literals(pattern, text):\n    return pattern in text\n\n# Test cases:\n\nprint(search_literals(\"hello\", \"hello world\"))  # Should return True\nprint(search_literals(\"world\", \"hello world\"))  # Should return True\nprint(search_literals(\"python\", \"hello world\"))  # Should return False\nprint(search_literals(\"hello\", \"HELLO WORLD\"))  # Should return False (case-sensitive)"}
{"task_id": 179, "completion": "def is_keith_number(n):\n    # Step 1: Find the number of digits in n\n    num_digits = len(str(n))\n    \n    # Step 2: Initialize the sequence with the digits of n\n    sequence = list(map(int, str(n)))\n    \n    # Step 3: Generate the Keith sequence\n    count = 0\n    while sequence[0] < n:\n        # Calculate the next term in the sequence\n        next_term = sum(sequence)\n        \n        # Shift the sequence to the left\n        sequence.pop(0)\n        sequence.append(next_term)\n        \n        # Increment the count\n        count += 1\n    \n    # Step 4: Check if the sequence has reached or exceeded n\n    return sequence[0] == n\n\n# Example usage:\nnumber = 197\nif is_keith_number(number):\n    print(f\"{number} is a Keith number.\")\nelse:\n    print(f\"{number} is not a Keith number.\")"}
{"task_id": 180, "completion": "import math\n\ndef distance_lat_long(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude from degrees to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    \n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    \n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    \n    # Radius of Earth in kilometers\n    r = 6371.0\n    \n    # Distance in kilometers\n    distance = r * c\n    \n    return distance\n\n# Example usage:\nlat1 = 51.5074\nlon1 = -0.1278\nlat2 = 40.7128\nlon2 = -74.0060\n\nprint(distance_lat_long(lat1, lon1, lat2, lon2))  # Output: 5570.617796424935\n```\n\nThis function uses the Haversine formula to calculate the distance between two points given their latitude and longitude in degrees. The result is in kilometers."}
{"task_id": 181, "completion": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    # Find the shortest string in the list\n    shortest_str = min(strs, key=len)\n\n    for i, char in enumerate(shortest_str):\n        for other_str in strs:\n            if other_str[i]!= char:\n                return shortest_str[:i]\n\n    return shortest_str\n\n# Example usage:\nstrs = [\"flower\", \"flow\", \"flight\"]\nprint(longest_common_prefix(strs))  # Output: \"fl\"\n\n# Explanation:\n# 1. The function first checks if the list of strings is empty. If it is, it returns an empty string.\n# 2. It finds the shortest string in the list using the `min` function with the `key` argument set to `len`, which is the length of the strings.\n# 3. It then iterates over each character in the shortest string.\n# 4. For each character, it checks if the character at the same position in each of the other strings is the same.\n# 5. If any character does not match, it returns the substring of the shortest string up to the current index.\n# 6. If all characters match, it returns the shortest string itself."}
{"task_id": 182, "completion": "import re\n\ndef find_char_type(text):\n    # Check for uppercase characters\n    uppercase_chars = re.findall(r'[A-Z]', text)\n    uppercase_count = len(uppercase_chars)\n    \n    # Check for lowercase characters\n    lowercase_chars = re.findall(r'[a-z]', text)\n    lowercase_count = len(lowercase_chars)\n    \n    # Check for numeric characters\n    numeric_chars = re.findall(r'[0-9]', text)\n    numeric_count = len(numeric_chars)\n    \n    # Check for special characters\n    special_chars = re.findall(r'[^a-zA-Z0-9]', text)\n    special_count = len(special_chars)\n    \n    return uppercase_count, lowercase_count, numeric_count, special_count\n\n# Example usage:\ntext = \"Hello World! 123\"\nuppercase_count, lowercase_count, numeric_count, special_count = find_char_type(text)\nprint(f\"Uppercase characters: {uppercase_count}\")\nprint(f\"Lowercase characters: {lowercase_count}\")\nprint(f\"Numeric characters: {numeric_count}\")\nprint(f\"Special characters: {special_count}\")"}
{"task_id": 183, "completion": "def count_pairs_with_difference(arr, k):\n    count = 0\n    n = len(arr)\n    \n    # Use a set for fast lookup\n    arr_set = set(arr)\n    \n    for i in range(n):\n        # Check if arr[i] + k exists in the set\n        if arr[i] + k in arr_set:\n            count += 1\n        # Check if arr[i] - k exists in the set (to avoid double counting)\n        if arr[i] - k in arr_set and k!= 0:\n            count += 1\n    \n    # Each pair is counted twice, so divide by 2\n    return count // 2\n\n# Example usage:\narr = [1, 5, 3, 4, 2]\nk = 2\nprint(count_pairs_with_difference(arr, k))  # Output: 3"}
{"task_id": 184, "completion": "def greater_than_num(num_list, num):\n    return [x for x in num_list if x > num]\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nspecified_number = 5\nprint(greater_than_num(numbers, specified_number))  # Output: [6, 7, 8, 9, 10]"}
{"task_id": 185, "completion": "def parabola_focus(a, b, c):\n    # Calculate the focus of the parabola\n    h = -b / (2 * a)\n    k = c - (b**2) / (4 * a)\n    focus = (h, k + 1 / (4 * a))\n    return focus\n\n# Example usage:\n# a, b, c are coefficients of the quadratic equation ax^2 + bx + c = 0\na, b, c = 1, -2, 1\nfocus = parabola_focus(a, b, c)\nprint(\"The focus of the parabola is at:\", focus)"}
{"task_id": 186, "completion": "import re\n\ndef search_literals(patterns, text):\n    for pattern in patterns:\n        print(f\"Searching for '{pattern}' in '{text}'\")\n        if re.search(pattern, text):\n            print(\"Matched!\")\n        else:\n            print(\"Not Matched!\")\n\n# Example usage:\npatterns = ['fox', 'dog', 'horse']\ntext = 'The quick brown fox jumps over the lazy dog.'\nsearch_literals(patterns, text)\n\n# Expected output:\n# Searching for 'fox' in 'The quick brown fox jumps over the lazy dog.'\n# Matched!\n# Searching for 'dog' in 'The quick brown fox jumps over the lazy dog.'\n# Matched!\n# Searching for 'horse' in 'The quick brown fox jumps over the lazy dog.'\n# Not Matched!"}
{"task_id": 187, "completion": "def lcs(X, Y):\n    m = len(X)\n    n = len(Y)\n    # Create a table to store lengths of longest common subsequence.\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n    # Build the L[m+1][n+1] in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    # L[m][n] contains the length of LCS for X[0..m-1], Y[0..n-1]\n    return L[m][n]\n\n# Example usage:\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nprint(\"Length of LCS is\", lcs(X, Y))"}
{"task_id": 188, "completion": "def is_product_of_squares(n):\n    for i in range(int(n**0.5) + 1):\n        j_squared = n - i*i\n        j = int(j_squared**0.5)\n        if j*j == j_squared:\n            return True\n    return False\n```\n\n# Explanation:\n\n1. **Function Definition**: The function `is_product_of_squares(n)` takes an integer `n` as input.\n\n2. **Loop through Possible Values of i**: The loop runs from `0` to `int(n**0.5) + 1`. This is because the maximum possible value for `i` (a square root of `n`) is the integer part of the square root of `n`.\n\n3. **Calculate j_squared**: For each `i`, calculate `j_squared` as `n - i*i`. This represents the remaining value needed to be a perfect square to satisfy the condition.\n\n4. **Check if j_squared is a Perfect Square**: Calculate `j` as the integer part of the square root of `j_squared`. Check if `j*j` equals `j_squared`. If it does, then `j_squared` is a perfect square, and `n` can be represented as the product of two squares.\n\n5. **Return True or False**: If a pair `(i, j)` is found such that `i*i + j*j == n`, the function returns `True`. If the loop completes without finding such a pair, the function returns `False`.\n\nThis function efficiently checks if a number can be expressed as the sum of two squares by iterating through possible values of one of the squares."}
{"task_id": 189, "completion": "def first_Missing_Positive(nums):\n    n = len(nums)\n    \n    # Check if 1 is not in the array\n    if 1 not in nums:\n        return 1\n    \n    # Replace all non-positive numbers and numbers greater than n with 1\n    for i in range(n):\n        if nums[i] <= 0 or nums[i] > n:\n            nums[i] = 1\n    \n    # Use the index as a hash to mark the presence of elements\n    for i in range(n):\n        num = abs(nums[i])\n        if num == n:\n            nums[0] = -abs(nums[0])\n        else:\n            nums[num] = -abs(nums[num])\n    \n    # Find the first index which has a positive number\n    for i in range(1, n):\n        if nums[i] > 0:\n            return i\n    \n    # If no positive number is found, then the answer is n+1\n    if nums[0] > 0:\n        return n\n    \n    return n + 1\n\n# Example usage:\nnums = [3, 4, -1, 1]\nprint(first_Missing_Positive(nums))  # Output: 2"}
{"task_id": 190, "completion": "def count_integral_points(a, b, c, d):\n    # Calculate the number of integral points inside the square\n    # using Pick's Theorem: A = I + B/2 - 1\n    # where A is the area of the square, I is the number of interior points, and B is the number of boundary points.\n    # For a square, B = 4 * (length of side - 1)\n    \n    # Calculate the area of the square\n    area = (c - a + 1) * (d - b + 1)\n    \n    # Calculate the number of boundary points (B)\n    # B = 4 * (side_length - 1)\n    side_length = max(c - a + 1, d - b + 1)\n    B = 4 * (side_length - 1)\n    \n    # Calculate the number of interior points (I) using Pick's Theorem\n    I = (area + B/2 - 1)\n    \n    return I\n\n# Example usage:\na, b, c, d = 1, 1, 4, 4\nprint(count_integral_points(a, b, c, d))  # Output should be the number of integral points inside the square"}
{"task_id": 191, "completion": "def check_month(month_name):\n    # List of months with 30 days\n    months_with_30_days = [\"April\", \"June\", \"September\", \"November\"]\n    \n    # Check if the given month name is in the list\n    if month_name in months_with_30_days:\n        return True\n    else:\n        return False\n\n# Example usage:\nmonth_name = \"April\"\nresult = check_month(month_name)\nprint(result)  # Output: True\n\nmonth_name = \"February\"\nresult = check_month(month_name)\nprint(result)  # Output: False"}
{"task_id": 192, "completion": "def check_string(s):\n    has_letter = False\n    has_number = False\n    \n    for char in s:\n        if char.isalpha():\n            has_letter = True\n        if char.isdigit():\n            has_number = True\n    \n    return has_letter and has_number\n\n# Example usage:\n\nprint(check_string(\"abc123\"))  # True\nprint(check_string(\"abc\"))     # False\nprint(check_string(\"123\"))     # False\nprint(check_string(\"\"))        # False"}
{"task_id": 193, "completion": "def remove_duplicate(tup):\n    result = []\n    for x in tup:\n        if x not in result:\n            result.append(x)\n    return tuple(result)\n\n# Example usage:\ninput_tuple = (1, 2, 2, 3, 4, 4, 5)\noutput_tuple = remove_duplicate(input_tuple)\nprint(output_tuple)  # Output: (1, 2, 3, 4, 5)"}
{"task_id": 194, "completion": "def octal_to_decimal(n):\n    decimal_number = 0\n    i = 0\n    while n!= 0:\n        decimal_number += (n % 10) * (8 ** i)\n        n //= 10\n        i += 1\n    return decimal_number\n\n# Example usage:\noctal_number = 123\ndecimal_number = octal_to_decimal(octal_number)\nprint(f\"The decimal equivalent of {octal_number} is {decimal_number}\")"}
{"task_id": 195, "completion": "def find_first_occurrence(arr, target):\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage:\narr = [1, 2, 4, 4, 4, 5, 6]\ntarget = 4\nprint(find_first_occurrence(arr, target))  # Output: 2"}
{"task_id": 196, "completion": "def remove_tuples(test_list, K):\n    res = [sub for sub in test_list if len(sub)!= K]\n    return (str(res))\n \n# Driver code\ntest_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]\nK = 1\n \n# printing the result\nprint(remove_tuples(test_list, K))\n\n# Output:\n# [(4, 5), (8, 6, 7), (3, 4, 6, 7)]"}
{"task_id": 197, "completion": "def exponentiation_tuple(test_tup1, test_tup2):\n    res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res)\n\n# Example:\n\ntest_tup1 = (2, 3, 4)\ntest_tup2 = (3, 2, 1)\nprint(exponentiation_tuple(test_tup1, test_tup2))\n\n# Output:\n\n(8, 9, 4)"}
{"task_id": 198, "completion": "import math\n\ndef largest_triangle_inscribed_in_ellipse(a, b):\n    # Calculate the area of the ellipse\n    area_ellipse = math.pi * a * b\n    \n    # The area of the largest inscribed triangle is 3/4 of the area of the ellipse\n    area_triangle = (3/4) * area_ellipse\n    \n    return area_triangle\n\n# Example usage:\na = 5\nb = 3\nprint(\"The area of the largest triangle that can be inscribed in the ellipse is:\", largest_triangle_inscribed_in_ellipse(a, b))\n```\n\nThis function calculates the area of the largest triangle that can be inscribed in an ellipse given the lengths of the semi-major axis \\(a\\) and the semi-minor axis \\(b\\). The area of the largest inscribed triangle is known to be 3/4 of the area of the ellipse."}
{"task_id": 199, "completion": "def highest_power_of_2(n):\n    if n < 1:\n        return 0\n    p = 1\n    while p <= n:\n        p *= 2\n    return p // 2\n\n# Explanation:\n\n# The function `highest_power_of_2` takes an integer `n` as input.\n# If `n` is less than 1, it returns 0 because there is no positive power of 2 less than or equal to 0.\n# It initializes a variable `p` to 1, which will hold the highest power of 2 less than or equal to `n`.\n# It then enters a while loop that multiplies `p` by 2 as long as `p` is less than or equal to `n`.\n# Once the loop exits, `p` will be greater than `n`, so the function returns `p // 2`, which is the highest power of 2 less than or equal to `n`.\n\n# Example usage:\n\nprint(highest_power_of_2(10))  # Output: 8\nprint(highest_power_of_2(16))  # Output: 16\nprint(highest_power_of_2(3))   # Output: 2\nprint(highest_power_of_2(0))   # Output: 0"}
{"task_id": 200, "completion": "def find_max_indices(numbers):\n    if not numbers:\n        return []\n    \n    max_value = max(numbers)\n    return [index for index, value in enumerate(numbers) if value == max_value]\n\n# Example usage:\nnumbers = [4, 2, 7, 7, 7, 3, 7]\nprint(find_max_indices(numbers))  # Output: [2, 3, 4, 6]"}
{"task_id": 201, "completion": "def check_elements(lst):\n    return all(element == lst[0] for element in lst)\n\n# Example usage:\n\nexample_list1 = [2, 2, 2, 2]\nexample_list2 = [1, 2, 3, 4]\n\nprint(check_elements(example_list1))  # Output: True\nprint(check_elements(example_list2))  # Output: False"}
{"task_id": 202, "completion": "def remove_even_characters(string):\n    result = \"\"\n    for i in range(1, len(string), 2):\n        result += string[i]\n    return result\n\n# Example usage:\ninput_string = \"hello world\"\noutput_string = remove_even_characters(input_string)\nprint(output_string)  # Output: \"hlwl\""}
{"task_id": 203, "completion": "def hamming_distance(x, y):\n    # Convert integers to binary and remove the '0b' prefix\n    binary_x = bin(x)[2:]\n    binary_y = bin(y)[2:]\n    \n    # Make sure both binary strings have the same length\n    max_length = max(len(binary_x), len(binary_y))\n    binary_x = binary_x.zfill(max_length)\n    binary_y = binary_y.zfill(max_length)\n    \n    # Calculate the Hamming distance\n    distance = sum(1 for bx, by in zip(binary_x, binary_y) if bx!= by)\n    \n    return distance\n\n# Example usage:\nx = 1\ny = 4\nprint(hamming_distance(x, y))  # Output: 2"}
{"task_id": 204, "completion": "def count_char(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count\n\n# Example usage:\nstring = \"hello world\"\nchar = \"o\"\nprint(count_char(string, char))  # Output: 2"}
{"task_id": 205, "completion": "def count_inversions(test_tup):\n    res = []\n    for idx in range(len(test_tup)):\n        for jdx in range(idx+1, len(test_tup)):\n            if test_tup[idx] > test_tup[jdx]:\n                res.append((test_tup[idx], test_tup[jdx]))\n    return (len(res), res)\n\n# Example usage:\n\ntest_tup = (1, 9, 6, 4, 5)\nprint(count_inversions(test_tup))\n\n# Output:\n\n# (5, [(9, 6), (9, 4), (9, 5), (6, 4), (6, 5)])\n\n# Explanation:\n\n# The function `count_inversions` takes a tuple `test_tup` as input and returns a tuple containing the count of inversions and the list of inversions. An inversion is a pair of elements where the first element is greater than the second element and they appear in the order in the tuple.\n\n# The function iterates through each element in the tuple and compares it with every other element that comes after it. If the current element is greater than the other element, it adds the pair to the result list `res`. Finally, it returns the count of inversions and the list of inversions."}
{"task_id": 206, "completion": "def concat_elements(test_tup):\n    res = ''\n    for ele in test_tup:\n        res += str(ele)\n    return res\n\n# Example usage:\n\ntest_tup = (1, 2, 3, 4)\nprint(concat_elements(test_tup))  # Output: \"1234\""}
{"task_id": 207, "completion": "def find_longest_repeating_subseq(s):\n    n = len(s)\n    # Create and initialize the dp array\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Fill dp array\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            # If characters match and indices are not the same\n            if s[i - 1] == s[j - 1] and i!= j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # The length of the longest repeating subsequence\n    return dp[n][n]\n\n# Example usage:\ns = \"aabb\"\nprint(find_longest_repeating_subseq(s))  # Output: 2"}
{"task_id": 208, "completion": "import re\n\ndef is_valid_decimal(value):\n    pattern = r'^[+-]?(\\d+)?(\\.\\d{1,2})$'\n    return bool(re.match(pattern, value))\n\n# Example usage:\nprint(is_valid_decimal(\"123.45\"))  # True\nprint(is_valid_decimal(\"123.4\"))   # True\nprint(is_valid_decimal(\"123.456\")) # False\nprint(is_valid_decimal(\"123\"))     # False\nprint(is_valid_decimal(\"123.45a\")) # False\nprint(is_valid_decimal(\"a123.45\")) # False\n\n# Explanation:\n# The regex pattern explained:\n# ^[+-]? - Optional sign at the start.\n# (\\d+)? - Optional digits (integer part).\n# (\\.\\d{1,2}) - A decimal point followed by 1 to 2 digits (fractional part).\n# $ - End of the string.\n\n# This pattern ensures that the string is a valid decimal number with a precision of up to 2 decimal places."}
{"task_id": 209, "completion": "def modify_heap(heap, item):\n    if not heap:\n        heap.append(item)\n        return heap\n    \n    # Remove the smallest element (first element in min-heap)\n    heap[0] = item\n    \n    # Perform heapify to maintain the heap property\n    heapify_down(heap, 0)\n    \n    return heap\n\ndef heapify_down(heap, index):\n    left_child = 2 * index + 1\n    right_child = 2 * index + 2\n    smallest = index\n    \n    if left_child < len(heap) and heap[left_child] < heap[smallest]:\n        smallest = left_child\n    \n    if right_child < len(heap) and heap[right_child] < heap[smallest]:\n        smallest = right_child\n    \n    if smallest!= index:\n        heap[index], heap[smallest] = heap[smallest], heap[index]\n        heapify_down(heap, smallest)\n\n# Example usage:\nheap = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nitem = 0\nmodified_heap = modify_heap(heap, item)\nprint(modified_heap)  # Output will depend on the implementation of heapify_down"}
{"task_id": 210, "completion": "import re\ndef is_allowed_specific_char(string):\n    charRe = re.compile(r'[^a-zA-Z0-9]')\n    string = charRe.search(string)\n    return not bool(string)\n\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450\"))\nprint(is_allowed_specific_char(\"ABCDEFabcdef123450!\"))\n\n# Python function to check for a digit at the end of a string:\nimport re\ndef end_num(string):\n    text = re.compile(r\".*[0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False\n\nprint(end_num(\"abcdef\"))\nprint(end_num(\"abcdef6\"))\n\n# Python function to match a string that contains only upper and lowercase letters, numbers, and underscores:\nimport re\ndef allowed_specific_str(string):\n    charRe = re.compile(r'^[a-zA-Z0-9_]+$')\n    string = charRe.search(string)\n    return bool(string)\n\nprint(allowed_specific_str(\"ABCDEFabcdef123450_\"))\nprint(allowed_specific_str(\"*&%@#!}{\"))\n\n# Python function to extract numbers from a string:\nimport re\ndef extract_num(string):\n    text = re.findall(r'[0-9]+', string)\n    return text\n\nprint(extract_num(\"hello 123 world\"))\nprint(extract_num(\"123abc\"))\nprint(extract_num(\"no numbers here\"))"}
{"task_id": 211, "completion": "def count_numbers(n):\n    count = 0\n    for i in range(n + 1):\n        if (i & (1 << 0)) and (i & (1 << 1)):\n            count += 1\n    return count\n\n# Example usage:\nn = 10\nprint(count_numbers(n))  # Output: 2 (numbers 2 and 3)"}
{"task_id": 212, "completion": "def sum_of_fourth_power_natural_numbers(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 4\n    return sum\n\n# Example usage:\nn = 5\nprint(sum_of_fourth_power_natural_numbers(n))  # Output: 355 (1^4 + 2^4 + 3^4 + 4^4 + 5^4)"}
{"task_id": 213, "completion": "def concatenate_strings(tuple1, tuple2):\n    return tuple1 + tuple2\n\n# Example usage:\ntuple1 = (\"Hello\", \"World\")\ntuple2 = (\"Python\", \"Programming\")\nresult = concatenate_strings(tuple1, tuple2)\nprint(result)  # Output: ('Hello', 'World', 'Python', 'Programming')"}
{"task_id": 214, "completion": "import math\n\ndef radians_to_degrees(radians):\n    degrees = radians * (180.0 / math.pi)\n    return degrees\n```\n\nThis function takes a value in radians as input and returns the corresponding value in degrees. The conversion is done using the formula: degrees = radians * (180.0 / \u03c0), where \u03c0 is the mathematical constant Pi (approximately 3.14159)."}
{"task_id": 215, "completion": "def decode_list(list1):\n    result = []\n    for i in range(0, len(list1), 2):\n        result.extend([list1[i+1]] * list1[i])\n    return result\n\n# Example usage:\nencoded_list = [4, 'a', 1, 'b', 3, 'c']\ndecoded_list = decode_list(encoded_list)\nprint(decoded_list)  # Output: ['a', 'a', 'a', 'a', 'b', 'c', 'c', 'c']"}
{"task_id": 216, "completion": "def is_subset(list1, list2):\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n\n# Example usage:\nlist1 = [[1, 2], [3, 4]]\nlist2 = [[1, 2], [3, 4], [5, 6]]\nprint(is_subset(list1, list2))  # Output: True\n\nlist1 = [[1, 2], [3, 4]]\nlist2 = [[1, 2], [3, 5]]\nprint(is_subset(list1, list2))  # Output: False"}
{"task_id": 217, "completion": "def first_repeated_char(str1):\n    temp = {}\n    for ch in str1:\n        if ch in temp:\n            return ch\n        else:\n            temp[ch] = 0\n    return None\n\n# Test the function:\n\nprint(first_repeated_char(\"hello world\"))  # Output: 'l'\nprint(first_repeated_char(\"abcde\"))        # Output: None"}
{"task_id": 218, "completion": "def min_operations(x, y):\n    if x == y:\n        return 0\n    if x > y:\n        x, y = y, x\n    operations = 0\n    while y > x:\n        if y % 2 == 0:\n            y //= 2\n        else:\n            y += 1\n        operations += 1\n    return operations\n\n# Example usage:\nx = 10\ny = 20\nprint(min_operations(x, y))  # Output: 1\n\nx = 15\ny = 20\nprint(min_operations(x, y))  # Output: 2"}
{"task_id": 219, "completion": "def extract_min_max(test_tup, K):\n    test_tup = sorted(test_tup)\n    result = (test_tup[:K], test_tup[-K:])\n    return (result)\n\n# Example usage:\ntest_tup = (7, 2, 3, 1, 5, 8, 9)\nK = 2\nprint(extract_min_max(test_tup, K))\n\n# Output:\n# ((1, 2), (7, 8))"}
{"task_id": 220, "completion": "def replace_special_characters(text, n):\n    # Replace spaces, commas, and dots with a colon\n    replaced_text = text.replace(' ', ':', n)\n    replaced_text = replaced_text.replace(',', ':', n)\n    replaced_text = replaced_text.replace('.', ':', n)\n    return replaced_text\n\n# Example usage:\ninput_text = \"Hello, world. This is a test.\"\nn = 2\nprint(replace_special_characters(input_text, n))  # Output: \"Hello:world:This:is:a:test.\""}
{"task_id": 221, "completion": "def first_even_number(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None  # Return None if no even number is found\n\n# Example usage:\nnumbers_list = [1, 3, 5, 7, 8, 10, 13]\nresult = first_even_number(numbers_list)\nprint(result)  # Output: 8"}
{"task_id": 222, "completion": "def check_type(test_tup):\n    return all(type(ele) == type(test_tup[0]) for ele in test_tup)\n\n# Example usage:\n\ntest_tup = (1, 2, 3)\nprint(check_type(test_tup))  # Output: True\n\ntest_tup = (1, 'a', 3)\nprint(check_type(test_tup))  # Output: False\n\ntest_tup = (1, (2, 3), [4, 5])\nprint(check_type(test_tup))  # Output: True\n\ntest_tup = (1, [2, 3], 'a')\nprint(check_type(test_tup))  # Output: False"}
{"task_id": 223, "completion": "def is_majority_element(arr, x):\n    n = len(arr)\n    # Find the index of the first occurrence of x\n    first_index = first(arr, 0, n - 1, x, n)\n    # Check if the element at the first occurrence index is a majority element\n    if first_index == -1:\n        return False\n    # If the element at the first occurrence index is a majority element\n    if ((first_index + n // 2) <= (n - 1)) and arr[first_index + n // 2] == x:\n        return True\n    else:\n        return False\n\ndef first(arr, low, high, x, n):\n    if high >= low:\n        mid = (low + high) // 2\n        if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n            return mid\n        elif x > arr[mid]:\n            return first(arr, mid + 1, high, x, n)\n        else:\n            return first(arr, low, mid - 1, x, n)\n    return -1\n\n# Example usage:\narr = [1, 2, 3, 3, 3, 3, 10]\nx = 3\nprint(is_majority_element(arr, x))  # Output: True\n\n# Explanation:\n# The function `is_majority_element` checks if the element `x` is a majority element in the sorted array `arr`.\n# It uses a helper function `first` to find the index of the first occurrence of `x` in the array.\n# If the first occurrence index is found and the element at the index plus `n // 2` is also `x`, then `x` is a majority element.\n# The `first` function uses binary search to find the first occurrence of `x`.\n\n# Time Complexity: O(log n) for the binary search in `first` function.\n# Space Complexity: O(1) for the iterative binary search."}
{"task_id": 224, "completion": "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Example usage:\nnumber = 29  # Binary representation: 11101\nprint(count_set_bits(number))  # Output: 4"}
{"task_id": 225, "completion": "def find_min(arr, low, high):\n    if low > high:\n        return arr[0]\n    if low == high:\n        return arr[low]\n    \n    mid = (low + high) // 2\n    \n    if mid < high and arr[mid] > arr[mid + 1]:\n        return arr[mid + 1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[low] <= arr[mid]:\n        return find_min(arr, mid + 1, high)\n    else:\n        return find_min(arr, low, mid - 1)\n\n# Example usage:\narr = [4, 5, 6, 7, 0, 1, 2]\nprint(find_min(arr, 0, len(arr) - 1))  # Output: 0"}
{"task_id": 226, "completion": "def odd_values_string(s):\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result\n\n# Example usage:\n\ninput_string = \"hello world\"\noutput_string = odd_values_string(input_string)\nprint(output_string)  # Output: \"hlowrd\""}
{"task_id": 227, "completion": "def min_of_three(x, y, z):\n    if (x < y) and (x < z):\n        return x\n    elif (y < x) and (y < z):\n        return y\n    else:\n        return z\n\n# Example usage:\nresult = min_of_three(10, 20, 30)\nprint(result)  # Output: 10\n\n# Explanation:\n# The function `min_of_three` takes three parameters `x`, `y`, and `z`.\n# It uses conditional statements to compare the values of `x`, `y`, and `z`.\n# The function returns the smallest of the three numbers."}
{"task_id": 228, "completion": "def all_bits_unset(n, l, r):\n    # Create a mask with all bits set from position l to r\n    mask = (1 << (r - l + 1)) - 1\n    mask = mask << (l - 1)\n    \n    # Check if the bits in the range are unset\n    if (n & mask) == 0:\n        return True\n    else:\n        return False\n\n# Example usage:\nn = 29  # Binary: 11101\nl = 2\nr = 4\nprint(all_bits_unset(n, l, r))  # Output: True\n\nn = 14  # Binary: 1110\nl = 1\nr = 3\nprint(all_bits_unset(n, l, r))  # Output: False"}
{"task_id": 229, "completion": "def re_arrange(arr):\n    # Initialize two pointers\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        # Move left pointer to the right until a positive element is found\n        while left <= right and arr[left] < 0:\n            left += 1\n        \n        # Move right pointer to the left until a negative element is found\n        while left <= right and arr[right] >= 0:\n            right -= 1\n        \n        # Swap the elements at left and right pointers\n        if left < right:\n            arr[left], arr[right] = arr[right], arr[left]\n    \n    return arr\n\n# Example usage:\narr = [1, -2, 3, -4, 5, -6]\nprint(re_arrange(arr))  # Output: [-2, -4, -6, 5, 3, 1]"}
{"task_id": 230, "completion": "def replace_blank(string, char):\n    return string.replace(\" \", char)\n\n# Example usage:\ninput_string = \"Hello World\"\nreplacement_char = \"*\"\nresult = replace_blank(input_string, replacement_char)\nprint(result)  # Output: Hello*World"}
{"task_id": 231, "completion": "def max_sum_triangle(triangle):\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]\n\n# Example usage:\ntriangle = [\n    [2],\n    [3, 4],\n    [6, 5, 7],\n    [4, 1, 8, 3]\n]\n\nprint(max_sum_triangle(triangle))  # Output: 23"}
{"task_id": 232, "completion": "def n_largest(dataset, n):\n    return sorted(dataset)[-n:]\n\n# Example usage:\n\ndataset = [1, 3, 2, 4, 5, 7, 6]\nn = 3\nprint(n_largest(dataset, n))  # Output: [5, 6, 7]"}
{"task_id": 233, "completion": "def lateral_surface_area_cylinder(r, h):\n    lateral_surface_area = 2 * 3.14 * r * h\n    return lateral_surface_area\n\n# Example usage:\n\nradius = 5\nheight = 10\nprint(lateral_surface_area_cylinder(radius, height))  # Output: 314.0"}
{"task_id": 234, "completion": "def volume_cube(a):\n    return a**3\n\n# Test cases:\n\nprint(volume_cube(3)) # Should return 27\nprint(volume_cube(4)) # Should return 64"}
{"task_id": 235, "completion": "def set_even_bits(n):\n    bit_position = 0\n    while (1 << bit_position) <= n:\n        if bit_position % 2 == 0:\n            n |= (1 << bit_position)\n        bit_position += 1\n    return n\n\n# Example usage:\nnumber = 10  # Binary: 1010\nresult = set_even_bits(number)\nprint(f\"Original number: {number} (Binary: {bin(number)})\")\nprint(f\"Number with even bits set: {result} (Binary: {bin(result)})\")"}
{"task_id": 236, "completion": "def count_equilateral_triangles(side_length, triangle_side):\n    if triangle_side > side_length:\n        return 0\n    count = 0\n    while side_length >= triangle_side:\n        count += (side_length // triangle_side) ** 2\n        side_length //= 2\n    return count\n```\n\n# Explanation:\n\n1. **Function Definition**: The function `count_equilateral_triangles` takes two parameters: `side_length` (the side length of the larger equilateral triangle) and `triangle_side` (the side length of the smaller equilateral triangles we want to count).\n\n2. **Initial Check**: The function first checks if `triangle_side` is greater than `side_length`. If it is, no smaller triangles can be formed, so it returns 0.\n\n3. **Count Initialization**: A variable `count` is initialized to 0 to keep track of the number of smaller triangles.\n\n4. **While Loop**: The function uses a while loop to repeatedly check if the side length of the larger triangle is greater than or equal to the side length of the smaller triangle.\n\n5. **Count Calculation**: Inside the loop, the number of smaller triangles that can fit along one side of the larger triangle is calculated by integer division (`//`). This is done twice, once for the horizontal and once for the vertical direction, and then squared to get the total number of smaller triangles in that layer.\n\n6. **Update Side Length**: The side length of the larger triangle is halved for the next iteration.\n\n7. **Return Count**: After the loop completes, the function returns the total count of smaller triangles.\n\nThis function efficiently counts the number of smaller equilateral triangles that can fit within a larger equilateral triangle by using a geometric approach and repeated division of the side length."}
{"task_id": 237, "completion": "def check_occurrences(test_tup):\n    res = {}\n    for ele in test_tup:\n        if ele in res:\n            res[ele] += 1\n        else:\n            res[ele] = 1\n    return res\n\n# Example usage:\ntest_tup = (1, 2, 2, 3, 3, 3, 4, 4, 4, 4)\nresult = check_occurrences(test_tup)\nprint(result)  # Output: {1: 1, 2: 2, 3: 3, 4: 4}\n\n# Explanation:\n# The function `check_occurrences` takes a tuple `test_tup` as input.\n# It initializes an empty dictionary `res` to store the occurrences of each element.\n# It then iterates over each element in the tuple.\n# For each element, it checks if the element is already in the dictionary `res`.\n# If it is, it increments the count of that element by 1.\n# If it is not, it adds the element to the dictionary with a count of 1.\n# Finally, it returns the dictionary `res` containing the occurrences of each element."}
{"task_id": 238, "completion": "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Example usage:\n\ns = \"abc\"\nprint(number_of_substrings(s))  # Output: 6\n\ns = \"aaa\"\nprint(number_of_substrings(s))  # Output: 6\n\ns = \"abcd\"\nprint(number_of_substrings(s))  # Output: 10"}
{"task_id": 239, "completion": "def count_sequences(n, m):\n    # Initialize a list to store the number of sequences for each length\n    dp = [0] * (m + 1)\n    \n    # Base case: there is one sequence of length 0 (the empty sequence)\n    dp[0] = 1\n    \n    # Fill the dp list\n    for length in range(1, n + 1):\n        for current in range(m, 0, -1):\n            # Calculate the number of sequences ending with current\n            dp[current] = sum(dp[current // 2:current])\n    \n    # The result is the sum of sequences of length n\n    return dp[m]\n\n# Example usage:\nn = 3\nm = 10\nprint(count_sequences(n, m))  # Output will depend on the values of n and m"}
{"task_id": 240, "completion": "def replace_last(list1, list2):\n    list1[-1:] = list2\n    return list1\n\n# Example usage:\nlist1 = [1, 3, 5, 7]\nlist2 = [2, 4, 6]\nresult = replace_last(list1, list2)\nprint(result)  # Output: [1, 3, 5, 2, 4, 6]"}
{"task_id": 241, "completion": "def generate_3d_array(x, y, z):\n    # Create a 3D array with each element as '*'\n    array_3d = [[['*' for _ in range(z)] for _ in range(y)] for _ in range(x)]\n    return array_3d\n\n# Example usage:\nx, y, z = 2, 3, 4\nresult = generate_3d_array(x, y, z)\nfor i in range(x):\n    print(f\"Layer {i+1}:\")\n    for j in range(y):\n        print(result[i][j])\n    print()"}
{"task_id": 242, "completion": "def count_characters(string):\n    return len(string)\n\n# Example usage:\n\nprint(count_characters(\"Hello, World!\"))  # Output: 13\nprint(count_characters(\"Python programming\"))  # Output: 21\nprint(count_characters(\"\"))  # Output: 0"}
{"task_id": 243, "completion": "def sort_tuples(test_list):\n    # using sorted() + lambda\n    res = sorted(test_list, key = lambda ele: ele[0])\n    return (res)\n \n# Driver code\ntest_list = [(4, 1), (3, 2), (2, 3), (1, 4)]\nprint(sort_tuples(test_list))\n\n# This will output:\n# [(1, 4), (2, 3), (3, 2), (4, 1)]"}
{"task_id": 244, "completion": "def next_Perfect_Square(N):\n    # Calculate the square root of the given number N\n    root = math.sqrt(N)\n    \n    # Check if the square root is an integer\n    if root.is_integer():\n        # If it is an integer, add 1 to the square root and square it to get the next perfect square\n        next_root = root + 1\n        next_perfect_square = next_root ** 2\n        return int(next_perfect_square)\n    else:\n        # If it is not an integer, find the ceiling of the square root and square it to get the next perfect square\n        next_root = math.ceil(root)\n        next_perfect_square = next_root ** 2\n        return int(next_perfect_square)\n\n# Example usage:\nimport math\n\n# Test the function with a given number\nN = 12\nprint(next_Perfect_Square(N))  # Output should be 16\n\n# Test the function with another given number\nN = 9\nprint(next_Perfect_Square(N))  # Output should be 16"}
{"task_id": 245, "completion": "def max_sum_bi_tonic_sub_seq(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Create two arrays to store the maximum sum of increasing and decreasing subsequences\n    inc = [arr[i] for i in range(n)]\n    dec = [arr[i] for i in range(n)]\n    \n    # Compute the maximum sum of increasing subsequence\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    \n    # Compute the maximum sum of decreasing subsequence\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    \n    # Find the maximum sum of bi-tonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    \n    return max_sum\n\n# Example usage:\narr = [1, 15, 51, 45, 33, 100, 12, 18, 9]\nprint(max_sum_bi_tonic_sub_seq(arr))  # Output: 204"}
{"task_id": 246, "completion": "def babylonian_sqrt(n, tolerance=1e-10):\n    if n < 0:\n        raise ValueError(\"Cannot compute the square root of a negative number.\")\n    if n == 0:\n        return 0\n    guess = n\n    while True:\n        next_guess = 0.5 * (guess + n / guess)\n        if abs(next_guess - guess) < tolerance:\n            return next_guess\n        guess = next_guess\n\n# Example usage:\nnumber = 25\nsqrt_result = babylonian_sqrt(number)\nprint(f\"The square root of {number} is approximately {sqrt_result}\")"}
{"task_id": 247, "completion": "def longest_palindromic_subseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    # Every single character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Build the dp table\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]\n\n# Example usage:\n# s = \"bbbab\"\n# print(longest_palindromic_subseq(s))  # Output: 4\n\n# Explanation:\n# The longest palindromic subsequence in \"bbbab\" is \"bbbb\".\n\n# This function uses dynamic programming to solve the problem. It constructs a 2D table `dp` where `dp[i][j]` represents the length of the longest palindromic subsequence in the substring `s[i:j+1]`. The table is filled by considering all possible substrings and using the properties of palindromes."}
{"task_id": 248, "completion": "def harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n# Example usage:\nprint(harmonic_sum(5))  # Output: 2.083333333333333"}
{"task_id": 249, "completion": "def intersection_array(array1, array2):\n    result = list(filter(lambda x: x in array1, array2))\n    return result\n\n# Example usage:\n\narray1 = [1, 2, 3, 4, 5]\narray2 = [3, 4, 5, 6, 7]\nprint(intersection_array(array1, array2))  # Output: [3, 4, 5]"}
{"task_id": 250, "completion": "def count_occurrences(tup, element):\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count\n\n# Example usage:\n\nmy_tuple = (1, 2, 3, 2, 4, 2, 5)\nelement_to_count = 2\nprint(count_occurrences(my_tuple, element_to_count))  # Output: 3"}
{"task_id": 251, "completion": "def insert_element_before_each_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Example usage:\n\noriginal_list = [1, 2, 3, 4]\nelement_to_insert = 0\n\nnew_list = insert_element_before_each_element(original_list, element_to_insert)\nprint(new_list)  # Output: [0, 1, 0, 2, 0, 3, 0, 4]"}
{"task_id": 252, "completion": "import cmath\n\ndef convert_to_polar(complex_num):\n    # Convert the complex number to polar coordinates\n    magnitude, phase = cmath.polar(complex_num)\n    return magnitude, phase\n\n# Example usage:\ncomplex_number = 1 + 1j\nmagnitude, phase = convert_to_polar(complex_number)\nprint(f\"The polar coordinates of {complex_number} are: Magnitude = {magnitude}, Phase = {phase}\")\n```\n\n# Explanation:\n1. **Import cmath**: The `cmath` module in Python provides support for complex numbers.\n2. **Function Definition**: Define a function `convert_to_polar` that takes a complex number as input.\n3. **Convert to Polar Coordinates**: Use `cmath.polar(complex_num)` to convert the complex number to polar coordinates. This function returns a tuple where the first element is the magnitude (distance from the origin) and the second element is the phase (angle in radians).\n4. **Return Values**: The function returns the magnitude and phase.\n5. **Example Usage**: Demonstrate how to use the function with an example complex number.\n\nThis function will convert any given complex number to its polar coordinates, providing both the magnitude and the phase angle."}
{"task_id": 253, "completion": "def count_integers(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Example usage:\nnumbers = [1, 'a', 2, 3.5, 'b', 4, 5]\nprint(count_integers(numbers))  # Output: 4"}
{"task_id": 254, "completion": "def find_words(text):\n    words = text.split()\n    result = [word for word in words if word.lower().startswith(('a', 'e'))]\n    return result\n\n# Example usage:\ninput_string = \"An apple a day keeps the doctor away. Enjoy every eatable.\"\nprint(find_words(input_string))"}
{"task_id": 255, "completion": "def generate_combinations(colors, n):\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[color] for color in colors]\n    combinations = []\n    for i in range(len(colors)):\n        for sub_combinations in generate_combinations(colors, n - 1):\n            if colors[i] not in sub_combinations:\n                combinations.append([colors[i]] + sub_combinations)\n    return combinations\n\ncolors = ['red', 'green', 'blue']\nn = 2\ncombinations = generate_combinations(colors, n)\nprint(combinations)\n```\n\nThis function uses recursion to generate all combinations with repetitions of the specified number of colors from a given list of colors. The function `generate_combinations` takes two arguments: `colors` (a list of color names) and `n` (the number of colors to choose). It returns a list of all possible combinations with repetitions of `n` colors from the given list.\n\nThe base case of the recursion is when `n` is 0, in which case it returns a list containing an empty list. When `n` is 1, it returns a list of lists, each containing a single color from the input list. For larger values of `n`, the function iterates over the list of colors, and for each color, it recursively generates all combinations with one less color (i.e., `n-1` colors) and prepends the current color to each of those combinations. It ensures that each combination is unique by checking if the current color is already in the sub-combination.\n\nYou can call this function with your desired colors and the number of colors you want to choose, and it will return all possible combinations with repetitions."}
{"task_id": 256, "completion": "def count_primes(n):\n    if n <= 2:\n        return 0\n    \n    # Initialize a list to track prime status of numbers\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False  # 0 and 1 are not prime numbers\n    \n    # Implement the Sieve of Eratosthenes algorithm\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    \n    # Count the number of True values in the is_prime list\n    return sum(is_prime)\n\n# Example usage:\nn = 10\nprint(count_primes(n))  # Output: 4 (primes less than 10: 2, 3, 5, 7)"}
{"task_id": 257, "completion": "def swap_numbers(a, b):\n    temp = a\n    a = b\n    b = temp\n    return a, b\n\nnum1 = 5\nnum2 = 10\nprint(\"Before swapping:\", num1, num2)\nnum1, num2 = swap_numbers(num1, num2)\nprint(\"After swapping:\", num1, num2)\n\n# Without using temporary variable:\n\ndef swap_numbers(a, b):\n    a = a + b\n    b = a - b\n    a = a - b\n    return a, b\n\nnum1 = 5\nnum2 = 10\nprint(\"Before swapping:\", num1, num2)\nnum1, num2 = swap_numbers(num1, num2)\nprint(\"After swapping:\", num1, num2)\n\n# Using Python's multiple assignment feature:\n\ndef swap_numbers(a, b):\n    a, b = b, a\n    return a, b\n\nnum1 = 5\nnum2 = 10\nprint(\"Before swapping:\", num1, num2)\nnum1, num2 = swap_numbers(num1, num2)\nprint(\"After swapping:\", num1, num2)"}
{"task_id": 258, "completion": "def count_odd(list1):\n    count_odd = len(list(filter(lambda x: (x%2!= 0), list1)))\n    return count_odd\n\n# Test the function:\nlist1 = [1,2,3,4,5,6,7,8,9]\nprint(count_odd(list1))\n\n# Expected output: 5"}
{"task_id": 259, "completion": "def maximize_tuples(test_tup1, test_tup2):\n    res = tuple(map(max, test_tup1, test_tup2))\n    return res\n\n# Example usage:\n\ntest_tup1 = (1, 4, 3)\ntest_tup2 = (2, 2, 5)\nprint(maximize_tuples(test_tup1, test_tup2))  # Output: (2, 4, 5)"}
{"task_id": 260, "completion": "def nsw_prime(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    memo[n] = 2 * nsw_prime(n - 1, memo) - nsw_prime(n - 2, memo)\n    return memo[n]\n\n# Example usage:\nprint(nsw_prime(5))  # Output: 19\nprint(nsw_prime(6))  # Output: 35"}
{"task_id": 261, "completion": "def tuple_division(test_tup1, test_tup2):\n    res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res)\n\n# Example usage:\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (2, 5, 3)\nprint(tuple_division(test_tup1, test_tup2))  # Output: (5, 4, 10)\n\n# Explanation:\n# The function `tuple_division` takes two tuples `test_tup1` and `test_tup2` as input.\n# It uses a generator expression within the `tuple` constructor to perform integer division on corresponding elements from the two tuples.\n# The `zip` function is used to pair up the elements from `test_tup1` and `test_tup2`.\n# The resulting tuple is stored in the variable `res` and returned as the output.\n# In the example usage, the function is called with `test_tup1 = (10, 20, 30)` and `test_tup2 = (2, 5, 3)`, and the output is `(5, 4, 10)`."}
{"task_id": 262, "completion": "def split_list(lst, n):\n    return lst[:n], lst[n:]\n\n# Example usage:\n\noriginal_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlength_to_split = 3\n\nfirst_part, second_part = split_list(original_list, length_to_split)\n\nprint(\"First part:\", first_part)\nprint(\"Second part:\", second_part)\n\n# Explanation:\n\n# The function `split_list` takes two parameters: `lst` (the list to be split) and `n` (the length of the first part).\n# The function returns a tuple containing two lists: the first list is the slice of `lst` from the start to the `n`-th element (not included), and the second list is the slice from the `n`-th element to the end.\n# In the example usage, the original list is split into two parts at the specified length (3 in this case), and the results are printed."}
{"task_id": 263, "completion": "def merge_dicts(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict\n\n# Example usage:\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'b': 3, 'c': 4}\n\nmerged_dict = merge_dicts(dict1, dict2)\nprint(merged_dict)  # Output: {'a': 1, 'b': 3, 'c': 4}"}
{"task_id": 264, "completion": "def dog_age(age_in_human_years):\n    if age_in_human_years <= 2:\n        dog_years = age_in_human_years * 10.5\n    else:\n        dog_years = 21 + (age_in_human_years - 2) * 4\n    return dog_years\n\n# Example usage:\nhuman_age = 10\ndog_age_in_human_years = dog_age(human_age)\nprint(f\"The dog's age in dog years is: {dog_age_in_human_years}\")"}
{"task_id": 265, "completion": "def split_nth(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n# Example usage:\n\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nn = 3\nprint(split_nth(my_list, n))\n\n# Output:\n\n[[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]]"}
{"task_id": 266, "completion": "def lateral_surface_area_cube(a):\n    return 4 * (a ** 2)\n\n# Test the function:\na = 5\nprint(lateral_surface_area_cube(a))  # Output: 100"}
{"task_id": 267, "completion": "def sum_of_squares_of_first_n_odd_numbers(n):\n    sum_of_squares = 0\n    for i in range(1, 2 * n, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n\n# Example usage:\nn = 5\nprint(sum_of_squares_of_first_n_odd_numbers(n))  # Output: 1225"}
{"task_id": 268, "completion": "def nth_star_number(n):\n    return 1 + (6 * n * (n - 1)) // 2\n\n# Explanation:\n\n# The nth star number can be calculated using the formula:\n# 1 + 6 * (n - 1) * n / 2\n\n# Where:\n# 1 is the first star number.\n# 6 is the constant multiplier.\n# n is the position in the sequence.\n# (n - 1) * n / 2 gives the sum of the first n-1 natural numbers, which is the number of points added in each layer of the star.\n\n# This formula gives the nth star number directly."}
{"task_id": 269, "completion": "def ascii_value(char):\n    return ord(char)\n\n# Example usage:\n\nprint(ascii_value('A'))  # Output: 65\nprint(ascii_value('a'))  # Output: 97\nprint(ascii_value('1'))  # Output: 49\nprint(ascii_value(' '))  # Output: 32"}
{"task_id": 270, "completion": "def sum_even_numbers_at_even_positions(arr):\n    total_sum = 0\n    for i in range(0, len(arr), 2):  # Iterate over even positions\n        if arr[i] % 2 == 0:  # Check if the number at the even position is even\n            total_sum += arr[i]\n    return total_sum\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6]\nresult = sum_even_numbers_at_even_positions(arr)\nprint(result)  # Output: 8 (2 + 4 + 6)"}
{"task_id": 271, "completion": "def even_power_sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n\n# Example usage:\nn = 5\nprint(even_power_sum(n))  # Output: 21735"}
{"task_id": 272, "completion": "def extract_rear_element(records):\n    return [record[-1] for record in records]\n\n# Example usage:\n\nrecords = [('a', 1), ('b', 2), ('c', 3)]\nprint(extract_rear_element(records))  # Output: [1, 2, 3]"}
{"task_id": 273, "completion": "def substract_tuple(test_tup1, test_tup2):\n    res = tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n\n# Example usage:\n\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (5, 10, 15)\nprint(substract_tuple(test_tup1, test_tup2))  # Output: (5, 10, 15)"}
{"task_id": 274, "completion": "def sum_even_index_binomial_coefficients(n):\n    result = 1\n    for i in range(0, n // 2):\n        result += binomial_coefficient(n, 2 * i + 1)\n    return result\n\ndef binomial_coefficient(n, k):\n    if k > n - k:\n        k = n - k\n    res = 1\n    for i in range(k):\n        res *= (n - i)\n        res //= (i + 1)\n    return res\n\n# Example usage:\nn = 5\nprint(sum_even_index_binomial_coefficients(n))  # Output: 8\n```\n\nThis function calculates the sum of binomial coefficients at even indices for a given `n`. The `binomial_coefficient` function is used to compute the binomial coefficients. The main function iterates over the even indices and sums up the corresponding binomial coefficients."}
{"task_id": 275, "completion": "def last_removed_position(arr):\n    stack = []\n    for i in range(len(arr)):\n        if stack and stack[-1] == arr[i]:\n            stack.pop()\n            last_removed = i\n        else:\n            stack.append(arr[i])\n    return last_removed\n\n# Example usage:\narr = [1, 2, 3, 3, 2, 1]\nprint(last_removed_position(arr))  # Output: 4"}
{"task_id": 276, "completion": "def volume_of_cylinder(radius, height):\n    volume = 3.14 * radius * radius * height\n    return volume\n\n# Example usage:\nresult = volume_of_cylinder(5, 10)\nprint(result)  # Output will be the volume of the cylinder"}
{"task_id": 277, "completion": "def filter_dict(dict1, m):\n    result = {key: value for (key, value) in dict1.items() if value > m}\n    return result\n\n# Example usage:\n\ndict1 = {'a': 10, 'b': 20, 'c': 30, 'd': 40}\nm = 25\nprint(filter_dict(dict1, m))\n\n# Output:\n# {'c': 30, 'd': 40}"}
{"task_id": 278, "completion": "def count_occurrences(test_tup):\n    # Initialize a dictionary to store the counts of each element\n    element_count = {}\n    \n    # Iterate through the tuple\n    for element in test_tup:\n        # Update the count of the element in the dictionary\n        element_count[element] = element_count.get(element, 0) + 1\n    \n    # Find the element count that occurs before the record\n    before_record = element_count.get(test_tup[-1], 0)\n    \n    # Return the result\n    return before_record\n\n# Example usage:\ntest_tup = (1, 2, 2, 3, 4, 4, 4, 5)\nprint(count_occurrences(test_tup))  # Output: 1"}
{"task_id": 279, "completion": "def nth_decagonal_number(n):\n    return (8 * n * n) - (6 * n)\n\n# Example usage:\nn = 5\nprint(nth_decagonal_number(n))  # Output: 170"}
{"task_id": 280, "completion": "def sequential_search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\n# Example usage:\n\narray = [1, 2, 3, 4, 5]\nx = 3\nresult = sequential_search(array, x)\n\nif result!= -1:\n    print(f\"Element {x} found at index {result}.\")\nelse:\n    print(f\"Element {x} not found in the array.\")"}
{"task_id": 281, "completion": "def unique_elements(list1):\n    if len(list1) == len(set(list1)):\n        return \"All elements are unique\"\n    else:\n        return \"All elements are not unique\"\n\n# Example usage:\n\nlist1 = [1, 2, 3, 4, 5]\nprint(unique_elements(list1))  # Output: All elements are unique\n\nlist2 = [1, 2, 2, 3, 4, 5]\nprint(unique_elements(list2))  # Output: All elements are not unique"}
{"task_id": 282, "completion": "def subtract_list(list1, list2):\n    result = list(map(lambda x, y: x - y, list1, list2))\n    return result\n\n# Example usage:\nlist1 = [10, 20, 30]\nlist2 = [5, 10, 15]\nprint(subtract_list(list1, list2))  # Output: [5, 10, 15]"}
{"task_id": 283, "completion": "def check_frequency(nums):\n    for num in nums:\n        digit_count = {}\n        for digit in str(num):\n            if digit in digit_count:\n                digit_count[digit] += 1\n            else:\n                digit_count[digit] = 1\n        for digit, count in digit_count.items():\n            if int(digit) < count:\n                return False\n    return True\n\n# Example usage:\nnums = [123, 455, 677]\nprint(check_frequency(nums))  # Output: True\n\nnums = [123, 455, 678]\nprint(check_frequency(nums))  # Output: False"}
{"task_id": 284, "completion": "def check_equal(lst, str):\n    return all(item == str for item in lst)\n\n# Example usage:\n\nmy_list = ['apple', 'apple', 'apple']\nresult = check_equal(my_list, 'apple')\nprint(result)  # Output: True\n\nmy_list = ['apple', 'banana', 'apple']\nresult = check_equal(my_list, 'apple')\nprint(result)  # Output: False"}
{"task_id": 285, "completion": "import re\n\ndef text_match_three(text):\n    patterns = 'ab{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nprint(text_match_three(\"ab\"))\nprint(text_match_three(\"abb\"))\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"abbb\"))\nprint(text_match_three(\"abb\"))\n\n# Output:\n# Not matched!\n# Found a match!\n# Found a match!\n# Found a match!\n# Found a match!"}
{"task_id": 286, "completion": "def max_sub_array_sum(arr, n, k):\n    max_so_far = -2147483648\n    max_ending_here = 0\n    arr_sum = 0\n    \n    # To avoid the case when k is 1\n    for i in range(n * k):\n        # Calculating the sum of all elements in the array\n        arr_sum += arr[i % n]\n        \n        # Reset max_ending_here if it becomes negative\n        if max_ending_here < 0:\n            max_ending_here = 0\n        \n        # Update max_so_far\n        max_ending_here += arr[i % n]\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n\n# Example usage:\narr = [1, -2, 1]\nn = len(arr)\nk = 3\nprint(max_sub_array_sum(arr, n, k))  # Output: 2"}
{"task_id": 287, "completion": "def sum_even_squares(n):\n    sum_of_squares = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n\n# Example usage:\nn = 5\nprint(sum_even_squares(n))  # Output: 1220"}
{"task_id": 288, "completion": "def count_mod_inv(arr, p):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % p == 0:\n            count += 1\n    return count\n\n# Example usage:\n\narr = [3, 7, 9, 11, 13]\np = 13\nprint(count_mod_inv(arr, p))  # Output: 1"}
{"task_id": 289, "completion": "def odd_days(year):\n    # A non-leap year has 365 days, and a leap year has 366 days.\n    # 365 days = 52 weeks + 1 odd day\n    # 366 days = 52 weeks + 2 odd days\n    \n    # Calculate the number of odd days in the given year\n    odd_days = year % 7\n    \n    return odd_days\n\n# Example usage:\nyear = 2024\nprint(odd_days(year))  # Output: 2 (since 2024 is a leap year)"}
{"task_id": 290, "completion": "def max_length_list(list1):\n    max_length = 0\n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return [sublist for sublist in list1 if len(sublist) == max_length]\n\n# Example usage:\n\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11, 12], [13, 14]]\nprint(max_length_list(list_of_lists))  # Output: [[6, 7, 8, 9], [10, 11, 12]]"}
{"task_id": 291, "completion": "def num_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    # Initialize variables to store the number of ways\n    same_color = 0\n    diff_color = k\n    total = same_color + diff_color\n    \n    # Iterate through the fence posts\n    for i in range(2, n):\n        same_color = diff_color\n        diff_color = total * (k - 1)\n        total = same_color + diff_color\n    \n    return total\n\n# Example usage:\nn = 3\nk = 2\nprint(num_ways(n, k))  # Output: 6"}
{"task_id": 292, "completion": "def find_quotient(num1, num2):\n    if num2 == 0:\n        return \"Error: Division by zero is not allowed.\"\n    else:\n        return num1 / num2\n\n# Example usage:\nnum1 = 10\nnum2 = 2\nprint(\"Quotient:\", find_quotient(num1, num2))\n\n# Output:\n# Quotient: 5.0"}
{"task_id": 293, "completion": "import math\n\ndef find_third_side(side1, side2):\n    third_side = math.sqrt(side1**2 + side2**2)\n    return third_side\n\n# Example usage:\nside1 = 3\nside2 = 4\nthird_side = find_third_side(side1, side2)\nprint(f\"The third side of the right angled triangle is: {third_side}\")"}
{"task_id": 294, "completion": "def max_value(lst):\n    if not lst:\n        return None\n    max_val = lst[0]\n    for item in lst:\n        if isinstance(item, (int, float)) and item > max_val:\n            max_val = item\n    return max_val\n\n# Example usage:\nexample_list = [3, 'a', 7.5, 10, 'b', 2, 8.2]\nprint(max_value(example_list))  # Output: 10"}
{"task_id": 295, "completion": "def sum_of_divisors(n):\n    sum_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\n# Example usage:\nprint(sum_of_divisors(12))  # Output: 28 (1, 2, 3, 4, 6, 12)\nprint(sum_of_divisors(15))  # Output: 24 (1, 3, 5, 15)"}
{"task_id": 296, "completion": "def count_inversions(arr):\n    def merge_and_count(left, right):\n        merged = []\n        i = j = inversions = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inversions += len(left) - i\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return merged, inversions\n\n    def merge_sort_and_count(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        mid = len(arr) // 2\n        left, left_inv = merge_sort_and_count(arr[:mid])\n        right, right_inv = merge_sort_and_count(arr[mid:])\n        merged, merge_inv = merge_and_count(left, right)\n        return merged, left_inv + right_inv + merge_inv\n\n    _, inversions = merge_sort_and_count(arr)\n    return inversions\n\n# Example usage:\narr = [2, 4, 1, 3, 5]\nprint(count_inversions(arr))  # Output: 3"}
{"task_id": 297, "completion": "def flatten_list(input_list):\n    flat_list = []\n    for item in input_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n# Example usage:\n\nnested_list = [1, [2, [3, 4], 5], 6, [7]]\nflattened_list = flatten_list(nested_list)\nprint(flattened_list)  # Output: [1, 2, 3, 4, 5, 6, 7]"}
{"task_id": 298, "completion": "def find_nested_list_elements(main_list, nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(find_nested_list_elements(main_list, item))\n        elif item in main_list:\n            result.append(item)\n    return result\n\n# Example usage:\nmain_list = [1, 2, 3, 4, 5]\nnested_list = [1, [2, 3], 4, [5, [6, 7]]]\nprint(find_nested_list_elements(main_list, nested_list))  # Output: [1, 2, 3, 4, 5]\n\n# Explanation:\n# The function `find_nested_list_elements` takes two arguments: `main_list` and `nested_list`.\n# It initializes an empty list `result` to store the elements that are found in both lists.\n# It then iterates over each item in `nested_list`.\n# If the item is a list, it recursively calls the function `find_nested_list_elements` with the `main_list` and the nested list.\n# If the item is not a list, it checks if the item is in `main_list`. If it is, it appends the item to the `result` list.\n# Finally, it returns the `result` list containing all elements from the nested list that are also in the main list."}
{"task_id": 299, "completion": "def max_aggregate(list1):\n    # Create a dictionary to store the sum of scores for each name\n    score_dict = {}\n    \n    # Iterate through the list of tuples\n    for name, score in list1:\n        # If the name is already in the dictionary, add the score to the existing sum\n        if name in score_dict:\n            score_dict[name] += score\n        # Otherwise, add the name and the score to the dictionary\n        else:\n            score_dict[name] = score\n    \n    # Find the name with the maximum aggregate score\n    max_name = max(score_dict, key=score_dict.get)\n    max_score = score_dict[max_name]\n    \n    # Return the name and the maximum aggregate score\n    return (max_name, max_score)\n\n# Example usage:\nlist1 = [('Alice', 5), ('Bob', 10), ('Alice', 7), ('Bob', 3), ('Alice', 2)]\nprint(max_aggregate(list1))  # Output should be ('Alice', 14)"}
{"task_id": 300, "completion": "def count_binary_sequences(n):\n    # Calculate the total number of binary sequences of length 2n\n    total_sequences = 2 ** (2 * n)\n    \n    # Initialize the count of valid sequences\n    valid_sequences = 0\n    \n    # Iterate through all possible sequences\n    for i in range(total_sequences):\n        # Convert the current sequence to a binary string of length 2n\n        binary_str = bin(i)[2:].zfill(2 * n)\n        \n        # Split the sequence into two halves\n        first_half = binary_str[:n]\n        second_half = binary_str[n:]\n        \n        # Calculate the sum of bits in each half\n        sum_first_half = sum(int(bit) for bit in first_half)\n        sum_second_half = sum(int(bit) for bit in second_half)\n        \n        # Check if the sums are equal\n        if sum_first_half == sum_second_half:\n            valid_sequences += 1\n    \n    return valid_sequences\n\n# Example usage:\nn = 3\nprint(count_binary_sequences(n))  # Output will be the count of valid sequences"}
{"task_id": 301, "completion": "def find_depth(d):\n    if isinstance(d, dict):\n        max_depth = 0\n        for key in d:\n            depth = find_depth(d[key])\n            if depth > max_depth:\n                max_depth = depth\n        return 1 + max_depth\n    else:\n        return 0\n\n# Example usage:\n\nnested_dict = {\n    'a': {\n        'b': {\n            'c': {\n                'd': 4\n            }\n        }\n    }\n}\n\nprint(find_depth(nested_dict))  # Output: 4"}
{"task_id": 302, "completion": "def most_significant_bit(n):\n    if n <= 0:\n        return 0\n    \n    msb = 1\n    while msb <= n:\n        msb <<= 1\n    \n    return msb >> 1\n\n# Example usage:\nn = 28\nprint(most_significant_bit(n))  # Output: 16"}
{"task_id": 303, "completion": "def count_inversions(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Split the array into two halves\n    mid = n // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n    \n    # Count inversions in the left and right halves\n    left_inv = count_inversions(left_half)\n    right_inv = count_inversions(right_half)\n    \n    # Merge and count split inversions\n    merge_inv = merge_and_count(left_half, right_half)\n    \n    return left_inv + right_inv + merge_inv\n\ndef merge_and_count(left, right):\n    i, j = 0, 0\n    count = 0\n    merged = []\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            count += len(left) - i\n    \n    # Add remaining elements from left or right\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    \n    return count\n\ndef are_inversions_equal(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    # Count inversions of the first type\n    inv_count_first_type = count_inversions(arr)\n    \n    # Count inversions of the second type\n    arr_flipped = arr[::-1]\n    inv_count_second_type = count_inversions(arr_flipped)\n    \n    return inv_count_first_type == inv_count_second_type\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(are_inversions_equal(arr))  # Output: True\n\narr = [5, 4, 3, 2, 1]\nprint(are_inversions_equal(arr))  # Output:"}
{"task_id": 304, "completion": "def find_element(arr, rotations, index):\n    # Calculate the effective index after rotations\n    effective_index = (index - rotations) % len(arr)\n    # Return the element at the effective index\n    return arr[effective_index]\n\n# Example usage:\n\narr = [1, 2, 3, 4, 5]\nrotations = 2\nindex = 3\nprint(find_element(arr, rotations, index))  # Output: 3"}
{"task_id": 305, "completion": "def match_words(words):\n    return [word for word in words if word.startswith('p')]\n\n# Example usage:\n\nwords = [\"apple\", \"banana\", \"pear\", \"plum\", \"grape\"]\nmatching_words = match_words(words)\nprint(matching_words)  # Output: ['apple', 'pear', 'plum']"}
{"task_id": 306, "completion": "def max_sum_increasing_subsequence(arr, k, i):\n    # Create a list to store the maximum sum of increasing subsequence\n    dp = [0] * len(arr)\n    \n    # Initialize the maximum sum with the element at index i\n    dp[i] = arr[i]\n    \n    # Calculate the maximum sum of increasing subsequence for each prefix\n    for j in range(i):\n        if arr[j] < arr[i]:\n            dp[j] = max(dp[j], dp[i] + arr[j])\n    \n    # Find the maximum sum from the prefix till i and including the kth element\n    max_sum = 0\n    for j in range(k + 1):\n        if j > i:\n            max_sum = max(max_sum, dp[j])\n    \n    return max_sum\n\n# Example usage:\narr = [1, 101, 2, 3, 100, 4, 5]\nk = 5\ni = 3\nprint(max_sum_increasing_subsequence(arr, k, i))  # Output: 106\n\n# Explanation:\n# The function `max_sum_increasing_subsequence` takes an array `arr`, an index `k`, and an index `i` as input.\n# It calculates the maximum sum of increasing subsequence for each prefix till `i` and includes the `kth` element.\n# The function uses dynamic programming to store the maximum sum of increasing subsequence for each prefix.\n# Finally, it returns the maximum sum found.\n# In the example usage, the function is called with the array `[1, 101, 2, 3, 100, 4, 5]`, `k = 5`, and `i = 3`.\n# The output is `106`, which is the maximum sum of increasing subsequence from prefix till index 3 and including the 5th element."}
{"task_id": 307, "completion": "def get_colon(test_tuple):\n    \"\"\"\n    This function takes a tuple as input and returns a colon of the tuple.\n    \"\"\"\n    return test_tuple[1]\n\n# Example usage:\ntest_tuple = (1, 2, 3)\nprint(get_colon(test_tuple))  # Output: 2"}
{"task_id": 308, "completion": "def largest_products(nums1, nums2, n):\n    # Create a list to store the products\n    products = []\n    \n    # Iterate through each element in nums1\n    for num1 in nums1:\n        # Iterate through each element in nums2\n        for num2 in nums2:\n            # Calculate the product and append it to the list\n            products.append(num1 * num2)\n    \n    # Sort the products in descending order\n    products.sort(reverse=True)\n    \n    # Return the first n elements from the sorted list\n    return products[:n]\n\n# Example usage:\nnums1 = [2, 3, 4, 5]\nnums2 = [1, 2, 3, 4]\nn = 3\nprint(largest_products(nums1, nums2, n))  # Output: [20, 18, 16]"}
{"task_id": 309, "completion": "def max_of_two( x, y ):\n    if x > y:\n        return x\n    return y\n\n# Example usage:\nprint(max_of_two(3, 4))  # Output: 4\nprint(max_of_two(10, 5)) # Output: 10"}
{"task_id": 310, "completion": "def string_to_tuple(str1):\n    tuple1 = tuple(str1)\n    return tuple1\n\n# Example usage:\n\ninput_string = \"hello\"\nresult_tuple = string_to_tuple(input_string)\nprint(result_tuple)  # Output: ('h', 'e', 'l', 'l', 'o')"}
{"task_id": 311, "completion": "def set_left_most_unset_bit(n):\n    if n == 0:\n        return 1\n    bit_index = 0\n    temp = n\n    while temp > 0:\n        if (temp & 1) == 0:\n            bit_index += 1\n        temp >>= 1\n    return n | (1 << bit_index)\n\n# Example usage:\nn = 18  # Binary: 10010\nprint(set_left_most_unset_bit(n))  # Output: 23 (Binary: 10111)"}
{"task_id": 312, "completion": "def cone_volume(radius, height):\n    volume = (1.0/3) * 3.141592653589793 * radius**2 * height\n    return volume\n\n# Example usage:\n\nprint(cone_volume(3, 7))  # Replace with the radius and height of your cone"}
{"task_id": 313, "completion": "def print_positive_numbers(list1):\n    for num in list1:\n        if num > 0:\n            print(num, end=\" \")\n\n# Example usage:\n\nlist1 = [3, -1, -2, 4, -3, 5, 0, -4]\nprint(\"Positive numbers in the list are:\")\nprint_positive_numbers(list1)\n\n# Output:\n# Positive numbers in the list are:\n# 3 4 5"}
{"task_id": 314, "completion": "def max_sum_no_two_elements_adjacent(grid):\n    n = len(grid[0])\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(grid[0][0], grid[1][0])\n    \n    # Initialize the dp array\n    dp = [[0] * n for _ in range(2)]\n    \n    # Base cases\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    \n    # Fill the dp array\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1], grid[0][i] + (dp[0][i-2] if i >= 2 else 0))\n        dp[1][i] = max(dp[1][i-1], grid[1][i] + (dp[1][i-2] if i >= 2 else 0))\n    \n    # The result is the maximum of the last elements in both rows\n    return max(dp[0][n-1], dp[1][n-1])\n\n# Example usage:\ngrid = [\n    [1, 2, 9, 4],\n    [5, 6, 7, 8]\n]\nprint(max_sum_no_two_elements_adjacent(grid))  # Output: 18"}
{"task_id": 315, "completion": "def find_max_len_even(text):\n    words = text.split()\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word\n```\n\n# Explanation:\n\n1. **Splitting the Text**: The input text is split into words using the `split()` method, which splits the text at whitespace.\n2. **Initialization**: Two variables, `max_len` and `max_word`, are initialized to keep track of the maximum length of an even word and the word itself.\n3. **Iteration**: The function iterates over each word in the list of words.\n4. **Condition Check**: For each word, it checks if the length of the word is even (`len(word) % 2 == 0`) and if it is greater than the current `max_len`.\n5. **Update**: If both conditions are met, it updates `max_len` with the length of the current word and `max_word` with the current word.\n6. **Return**: Finally, the function returns the word with the maximum length that is even.\n\n# Example Usage:\n\n```python\ntext = \"This is a test string with some even length words\"\nprint(find_max_len_even(text))  # Output: \"string\"\n```\n\nIn this example, the function will find the word \"string\" as it is the first even length word with the maximum length in the given text."}
{"task_id": 316, "completion": "def last_occurrence(arr, x):\n    left, right = 0, len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# Example usage:\narr = [1, 2, 2, 2, 3, 4, 4, 4, 5]\nx = 4\nprint(last_occurrence(arr, x))  # Output: 6"}
{"task_id": 317, "completion": "def reflect_modified_run_length_encoding(lst):\n    if not lst:\n        return []\n    \n    result = []\n    i = 0\n    while i < len(lst):\n        count = 1\n        while i + 1 < len(lst) and lst[i] == lst[i + 1]:\n            i += 1\n            count += 1\n        result.append([lst[i], count])\n        i += 1\n    \n    # Reflect the modified run-length encoding\n    for i in range(len(result)):\n        result[i][1] = -result[i][1] if result[i][1] > 0 else abs(result[i][1])\n    \n    return result\n\n# Example usage:\nexample_list = [1, 1, 2, 2, 2, 3, 3, 3, 3]\nprint(reflect_modified_run_length_encoding(example_list))"}
{"task_id": 318, "completion": "def max_volume(s):\n    # Sort the sides in non-decreasing order\n    s.sort()\n    # The maximum volume is the product of the three largest sides\n    return s[0] * s[1] * s[2]\n\n# Example usage:\n\ns = [1, 2, 3]\nprint(max_volume(s))  # Output: 6\n\ns = [3, 3, 3]\nprint(max_volume(s))  # Output: 27\n\ns = [1, 2, 2]\nprint(max_volume(s))  # Output: 4\n\ns = [4, 3, 2]\nprint(max_volume(s))  # Output: 24\n\ns = [1, 1, 1]\nprint(max_volume(s))  # Output: 1"}
{"task_id": 319, "completion": "import re\n\ndef find_five_char_word(text):\n    pattern = r'\\b\\w{5}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"Here is a sample text with five characters long words like code and test.\"\nresult = find_five_char_word(text)\nprint(result)  # Output: ['Here', 'with', 'five', 'long', 'words', 'like', 'code', 'and', 'test']"}
{"task_id": 320, "completion": "def sum_square_difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = n * (n + 1) // 2\n    # Calculate the square of the sum of the first n natural numbers\n    sum_of_squares = n * (n + 1) * (2 * n + 1) // 6\n    # Calculate the difference\n    difference = sum_of_numbers ** 2 - sum_of_squares\n    return difference\n\n# Example usage:\nn = 10\nprint(sum_square_difference(n))  # Output will be 2640"}
{"task_id": 321, "completion": "def is_demlo_number(n):\n    str_n = str(n)\n    mid = len(str_n) // 2\n    left = str_n[:mid]\n    right = str_n[len(str_n) - mid:]\n    \n    if left == right[::-1]:\n        return True\n    else:\n        return False\n\n# Example usage:\nnumber = 12321\nprint(is_demlo_number(number))  # Output: True\n\nnumber = 12345\nprint(is_demlo_number(number))  # Output: False"}
{"task_id": 322, "completion": "def find_min_index(numbers):\n    if not numbers:\n        return []\n\n    min_value = min(numbers)\n    min_indices = [index for index, value in enumerate(numbers) if value == min_value]\n    return min_indices\n\n# Example usage:\nnumbers = [4, 2, 1, 3, 1, 5, 1]\nprint(find_min_index(numbers))  # Output: [2, 4, 6]"}
{"task_id": 323, "completion": "def rearrange_array(arr):\n    n = len(arr)\n    out_arr = [0] * n\n    pos_index, neg_index = 0, 1\n\n    for i in range(n):\n        if arr[i] >= 0:\n            out_arr[pos_index] = arr[i]\n            pos_index += 2\n        else:\n            out_arr[neg_index] = arr[i]\n            neg_index += 2\n    return out_arr\n\n# Example usage:\narr = [1, 2, -3, -4, 5, -6]\nprint(rearrange_array(arr))  # Output: [1, -3, 2, -4, 5, -6]\n\n# Explanation:\n\n# 1. We first determine the length of the input array `arr` and create an output array `out_arr` of the same length, initialized with zeros.\n# 2. We also initialize two indices, `pos_index` for positive numbers and `neg_index` for negative numbers, starting from 0 and 1 respectively.\n# 3. We then iterate through each element in the input array `arr`.\n# 4. If the current element is non-negative (i.e., positive), we place it in the `out_arr` at the position indicated by `pos_index` and increment `pos_index` by 2.\n# 5. If the current element is negative, we place it in the `out_arr` at the position indicated by `neg_index` and increment `neg_index` by 2.\n# 6. Finally, we return the `out_arr` which contains the rearranged elements.\n\n# This approach ensures that the positive and negative numbers are placed alternately in the output array."}
{"task_id": 324, "completion": "def sum_alternate_chain(test_list):\n    res = 0\n    for idx in range(len(test_list)):\n        if idx % 2 == 0:\n            res += sum(test_list[idx])\n    return res\n\n# Example usage:\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(sum_alternate_chain(test_list))  # Output: 22\n\n# Explanation:\n# The function `sum_alternate_chain` takes a list of tuples as input.\n# It initializes a variable `res` to 0 to keep track of the sum of alternate chains.\n# It then iterates over the indices of the list.\n# For each index, if the index is even, it adds the sum of the corresponding tuple to `res`.\n# Finally, it returns the value of `res`.\n# In the example usage, the function is called with `test_list` containing three tuples.\n# The function calculates the sum of the first and third tuples, which are (1, 2, 3) and (7, 8, 9), respectively.\n# The sum of these tuples is 1 + 2 + 3 + 7 + 8 + 9 = 22, which is the output."}
{"task_id": 325, "completion": "def min_squares(n):\n    # Create a list to store the minimum number of squares for each number up to n\n    dp = [float('inf')] * (n + 1)\n    \n    # Base case: 0 squares needed for 0\n    dp[0] = 0\n    \n    # Fill the dp list\n    for i in range(1, n + 1):\n        # Check all squares less than or equal to i\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    \n    return dp[n]\n\n# Example usage:\nn = 12\nprint(min_squares(n))  # Output: 3 (4 + 4 + 4 or 9 + 4 + 4)"}
{"task_id": 326, "completion": "def most_frequent_word(strings):\n    word_count = {}\n    for word in strings:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    max_count = max(word_count.values())\n    most_frequent_words = [word for word, count in word_count.items() if count == max_count]\n    return most_frequent_words[0] if most_frequent_words else None\n\n# Example usage:\n\nstrings_list = [\"apple\", \"banana\", \"apple\", \"banana\", \"banana\", \"cherry\", \"apple\", \"apple\", \"banana\", \"banana\", \"banana\", \"banana\"]\nmost_frequent = most_frequent_word(strings_list)\nprint(most_frequent)  # Output: \"banana\""}
{"task_id": 327, "completion": "def check_isosceles_triangle(a, b, c):\n    if a == b or b == c or a == c:\n        return \"Isosceles Triangle\"\n    else:\n        return \"Not an Isosceles Triangle\"\n\n# Example usage:\nside1 = 5\nside2 = 5\nside3 = 7\nresult = check_isosceles_triangle(side1, side2, side3)\nprint(result)  # Output: Isosceles Triangle\n\n# Explanation:\n# The function `check_isosceles_triangle` takes three arguments `a`, `b`, and `c` which represent the lengths of the sides of a triangle.\n# It checks if any two sides are equal. If so, it returns \"Isosceles Triangle\". Otherwise, it returns \"Not an Isosceles Triangle\"."}
{"task_id": 328, "completion": "def rotate_left(nums, n):\n    if not nums:\n        return nums\n    n = n % len(nums)\n    return nums[n:] + nums[:n]\n\n# Example usage:\nnums = [1, 2, 3, 4, 5]\nn = 2\nrotated_nums = rotate_left(nums, n)\nprint(rotated_nums)  # Output: [3, 4, 5, 1, 2]\n\n# Explanation:\n# 1. The function `rotate_left` takes two parameters: `nums` (the list to be rotated) and `n` (the number of positions to rotate to the left).\n# 2. It first checks if the list `nums` is empty. If it is, it returns the empty list.\n# 3. It calculates the effective number of positions to rotate by using `n = n % len(nums)`. This ensures that if `n` is greater than the length of the list, it wraps around correctly.\n# 4. It then creates a new list by concatenating the sublist from index `n` to the end with the sublist from the start to index `n`.\n# 5. Finally, it returns the new rotated list.\n# 6. The example usage demonstrates how to call the function and print the rotated list."}
{"task_id": 329, "completion": "def count_negativenumbers(lst):\n    count = 0\n    for num in lst:\n        if num < 0:\n            count += 1\n    return count\n\n# Example usage:\nnumbers = [1, -2, -3, 4, -5, -6]\nprint(count_negativenumbers(numbers))  # Output: 3"}
{"task_id": 330, "completion": "import re\n\ndef find_long_words(text):\n    # Define a regex pattern to match words of length 3, 4, or 5\n    pattern = r'\\b\\w{3,5}\\b'\n    \n    # Find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    return matches\n\n# Example usage:\ntext = \"Here are some words of different lengths: cat, dog, elephant, bird, ant, mouse.\"\nlong_words = find_long_words(text)\nprint(long_words)  # Output: ['Here','some', 'words', 'ant']\n\n# Explanation:\n# - `\\b` is a word boundary anchor.\n# - `\\w{3,5}` matches any word character (alphanumeric and underscore) between 3 and 5 times.\n# - `\\b` ensures that the match is a whole word."}
{"task_id": 331, "completion": "def count_unset_bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n\n# Example usage:\nnumber = 29  # Binary representation: 11101 (4 unset bits: 00010, 00010, 00000, 00000)\nprint(count_unset_bits(number))  # Output: 4"}
{"task_id": 332, "completion": "def count_char_freq(str1):\n    frequency_dict = {}\n    for char in str1:\n        if char in frequency_dict:\n            frequency_dict[char] += 1\n        else:\n            frequency_dict[char] = 1\n    return frequency_dict\n\n# Example usage:\ninput_string = \"hello world\"\nprint(count_char_freq(input_string))"}
{"task_id": 333, "completion": "def Sort(sub_li):\n    # Sort the list according to the second element in sublist\n    sub_li.sort(key=lambda x: x[1])\n    return sub_li\n\n# Example usage:\nsub_li = [[1, 3], [4, 1], [2, 2]]\nsorted_list = Sort(sub_li)\nprint(sorted_list)\n\n# Explanation:\n\n# The function `Sort` takes a list of sublists as input.\n# The `sort` method is called on the list, with the `key` parameter set to a lambda function.\n# The lambda function takes an element `x` and returns its second element `x[1]`.\n# This tells the `sort` method to sort the list based on the second element of each sublist.\n# The sorted list is then returned.\n# In the example usage, the original list `sub_li` is sorted according to the second element of each sublist, and the sorted list is printed."}
{"task_id": 334, "completion": "def check_validity(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Example usage:\na = 7\nb = 10\nc = 5\nresult = check_validity(a, b, c)\nprint(result)  # Output: Valid\n\n# Explanation:\n# The function `check_validity` takes three arguments, `a`, `b`, and `c`, which represent the lengths of the sides of a triangle.\n# It checks whether the sum of any two sides is greater than the third side using the triangle inequality theorem.\n# If the condition is satisfied for all three combinations, the function returns \"Valid\".\n# Otherwise, it returns \"Invalid\"."}
{"task_id": 335, "completion": "def sum_of_AP(a, d, n):\n    sum = (n / 2) * (2 * a + (n - 1) * d)\n    return sum\n\n# Example usage:\na = 2\nd = 1\nn = 5\nprint(sum_of_AP(a, d, n))  # Output: 18\n\n# Explanation:\n# The function sum_of_AP takes three parameters: a (the first term of the arithmetic progression), d (the common difference), and n (the number of terms in the progression).\n# The formula for the sum of the first n terms of an arithmetic progression is:\n# sum = (n / 2) * (2 * a + (n - 1) * d)\n# The function calculates the sum using this formula and returns the result."}
{"task_id": 336, "completion": "def check_month_days(month_name):\n    # Dictionary to map month names to the number of days in each month\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    \n    # Check if the given month name is in the dictionary\n    if month_name in month_days:\n        # Check if the number of days is 28\n        if month_days[month_name] == 28:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Example usage:\nmonth_name = \"February\"\nresult = check_month_days(month_name)\nprint(f\"The month of {month_name} has 28 days: {result}\")"}
{"task_id": 337, "completion": "import re\n\ndef text_match_word(text):\n    patterns = r'\\w+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\n\nprint(text_match_word(\"The quick brown fox jumps over the lazy dog.\"))  # Not matched!\nprint(text_match_word(\"Hello world!\"))  # Found a match!\nprint(text_match_word(\"Python!\"))  # Found a match!\nprint(text_match_word(\"Python\"))  # Found a match!"}
{"task_id": 338, "completion": "def count_Substring_With_Equal_Ends(s):\n    result = 0\n    n = len(s)\n    \n    # Check all possible centers of substrings\n    for i in range(n):\n        # For odd length substrings\n        left = i\n        right = i\n        while left >= 0 and right < n and s[left] == s[right]:\n            result += 1\n            left -= 1\n            right += 1\n        \n        # For even length substrings\n        left = i\n        right = i + 1\n        while left >= 0 and right < n and s[left] == s[right]:\n            result += 1\n            left -= 1\n            right += 1\n    \n    return result\n\n# Example usage:\ns = \"abcab\"\nprint(count_Substring_With_Equal_Ends(s))  # Output: 7"}
{"task_id": 339, "completion": "def max_occur_divisor(a, b, n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    max_divisor = max(divisors)\n    return max_divisor\n\n# Example usage:\nresult = max_occur_divisor(1, 10, 2)\nprint(result)  # Output should be 2"}
{"task_id": 340, "completion": "def sum_of_lowest(numbers):\n    # Filter out negative numbers and sort the remaining numbers\n    positive_numbers = sorted([num for num in numbers if num > 0])\n    \n    # Check if there are at least three positive numbers\n    if len(positive_numbers) < 3:\n        return \"There are not enough positive numbers.\"\n    \n    # Sum the three lowest positive numbers\n    return sum(positive_numbers[:3])\n\n# Example usage:\nnumbers = [3, -1, 2, 4, -5, 10, 0]\nprint(sum_of_lowest(numbers))  # Output: 5 (1 + 2 + 3)"}
{"task_id": 341, "completion": "def convert_set_to_ordered_tuples(input_set):\n    # Convert the set to a list\n    temp_list = list(input_set)\n    # Sort the list\n    temp_list.sort()\n    # Convert the sorted list to a tuple\n    result_tuple = tuple(temp_list)\n    return result_tuple\n\n# Example usage:\ninput_set = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5}\noutput_tuple = convert_set_to_ordered_tuples(input_set)\nprint(output_tuple)  # Output: (1, 2, 3, 4, 5, 6, 9)"}
{"task_id": 342, "completion": "def find_smallest_range(arrays, k):\n    import heapq\n    \n    # Create a min-heap to keep track of the smallest elements from each array\n    min_heap = []\n    \n    # Initialize the heap with the first element of each array and their indices\n    for i in range(k):\n        heapq.heappush(min_heap, (arrays[i][0], i, 0))\n    \n    # Initialize the maximum value seen so far\n    max_val = max(array[0] for array in arrays)\n    \n    # Initialize the smallest range\n    smallest_range = [-float('inf'), float('inf')]\n    \n    while True:\n        # Get the smallest element from the heap\n        min_val, arr_idx, elem_idx = heapq.heappop(min_heap)\n        \n        # Update the range if the current range is smaller\n        if max_val - min_val < smallest_range[1] - smallest_range[0]:\n            smallest_range = [min_val, max_val]\n        \n        # If the current array has no more elements, break the loop\n        if elem_idx == len(arrays[arr_idx]) - 1:\n            break\n        \n        # Push the next element from the current array into the heap\n        next_elem = arrays[arr_idx][elem_idx + 1]\n        heapq.heappush(min_heap, (next_elem, arr_idx, elem_idx + 1))\n        \n        # Update the maximum value seen so far\n        max_val = max(max_val, next_elem)\n    \n    return smallest_range\n\n# Example usage:\narrays = [[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]\nk = len(arrays)\nprint(find_smallest_range(arrays, k))  # Output: [20, 24]"}
{"task_id": 343, "completion": "def count_digits_and_letters(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n    return digits, letters\n\n# Example usage:\ninput_string = \"Hello123World456\"\ndigits, letters = count_digits_and_letters(input_string)\nprint(\"Digits:\", digits)\nprint(\"Letters:\", letters)"}
{"task_id": 344, "completion": "def count_Odd_Factors(L, R):\n    # Function to count number of elements with odd factors in a given range\n    def count_factors(n):\n        # Function to count the number of factors of a number\n        count = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                count += 1\n                if i!= n // i:\n                    count += 1\n        return count\n\n    odd_count = 0\n    for i in range(L, R + 1):\n        if count_factors(i) % 2!= 0:\n            odd_count += 1\n\n    return odd_count\n\n# Example usage:\nL = 1\nR = 10\nprint(count_Odd_Factors(L, R))  # Output: 4\n\n# Explanation:\n# The numbers with odd factors are those whose square roots are integers, because only perfect squares have an odd number of factors.\n# For example, 1, 4, 9, and 16 have 1, 3, 5, and 7 factors respectively, all of which are odd.\n# The range from 1 to 10 contains 4 such numbers: 1, 4, 9, and 16."}
{"task_id": 345, "completion": "def difference_consecutivenumbers(nums):\n    differences = []\n    for i in range(len(nums) - 1):\n        differences.append(nums[i + 1] - nums[i])\n    return differences\n\n# Example usage:\nnumbers = [1, 3, 6, 10, 15]\nprint(difference_consecutivenumbers(numbers))  # Output: [2, 3, 4, 5]"}
{"task_id": 346, "completion": "def entringer_number(n, k):\n    if k == 0 or k == n:\n        return 1\n    elif k > n:\n        return 0\n    else:\n        return entringer_number(n - 1, k - 1) - entringer_number(n - 1, k)\n\n# Example usage:\nn = 5\nk = 2\nprint(entringer_number(n, k))  # Output: 6"}
{"task_id": 347, "completion": "def count_Squares(m, n):\n    if m < n:\n        m, n = n, m\n    # Find the maximum square with side len = min(m, n)\n    max_square_side = min(m, n)\n    count = 0\n    for i in range(max_square_side, 0, -1):\n        count += (m - i + 1) * (n - i + 1)\n    return count\n\n# Example usage:\nm = 3\nn = 2\nprint(count_Squares(m, n))  # Output: 8\n\nm = 4\nn = 4\nprint(count_Squares(m, n))  # Output: 30"}
{"task_id": 348, "completion": "def count_sequences(n, values):\n    # Initialize a list to store the counts of sequences\n    dp = [0] * (n + 1)\n    dp[0] = 1  # There's one way to have a sequence of length 0\n\n    # Iterate over each value in the given values\n    for value in values:\n        # Update the dp array for each possible length\n        for i in range(value, n + 1):\n            dp[i] += dp[i - value]\n\n    # The result is the count of sequences of length n\n    return dp[n]\n\n# Example usage:\nn = 5\nvalues = [1, 2]\nprint(count_sequences(n, values))  # Output: 8"}
{"task_id": 349, "completion": "def check(string):\n    p = set(string)\n    s = {'0', '1'}\n    if p & s == s or p & s == {'0'} or p & s == {'1'}:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n# Example usage:\nstring = \"10101010\"\ncheck(string)  # Output: Yes\n\nstring = \"10201010\"\ncheck(string)  # Output: No\n\nstring = \"000\"\ncheck(string)  # Output: Yes\n\nstring = \"111\"\ncheck(string)  # Output: Yes\n\nstring = \"abc\"\ncheck(string)  # Output: No"}
{"task_id": 350, "completion": "def minimize_length(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    min_length = len(s)\n    for char, count in char_count.items():\n        new_length = len(s) - count\n        if new_length < min_length:\n            min_length = new_length\n    \n    return min_length\n\n# Example usage:\ns = \"abacabad\"\nprint(minimize_length(s))  # Output: 4\n\ns = \"abcabc\"\nprint(minimize_length(s))  # Output: 3\n\ns = \"a\"\nprint(minimize_length(s))  # Output: 0"}
{"task_id": 351, "completion": "def first_element(arr, n, k):\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n        if count[arr[i]] == k:\n            return arr[i]\n    return -1\n\n# Example usage:\narr = [1, 7, 4, 3, 4, 8, 7]\nn = len(arr)\nk = 2\nprint(first_element(arr, n, k))  # Output: 7\n\n# Explanation:\n# The function first_element takes an array arr, its length n, and an integer k as input.\n# It uses a dictionary count to keep track of the frequency of each element in the array.\n# It iterates through the array and updates the count of each element.\n# If the frequency of any element becomes equal to k, it returns that element.\n# If no such element is found, it returns -1."}
{"task_id": 352, "completion": "def unique_char(str):\n    char_set = set()\n    for char in str:\n        if char in char_set:\n            return False\n        char_set.add(char)\n    return True\n\n# Example usage:\n\nprint(unique_char(\"hello\"))  # Output: False\nprint(unique_char(\"world\"))  # Output: True"}
{"task_id": 353, "completion": "def remove_column(nested_list, col):\n    for row in nested_list:\n        if col < len(row):\n            del row[col]\n    return nested_list\n\n# Example usage:\n\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ncol = 1\nresult = remove_column(nested_list, col)\nprint(result)  # Output: [[1, 3], [4, 6], [7, 9]]"}
{"task_id": 354, "completion": "def nth_term(a, d, n):\n    return a + (n - 1) * d\n\n# Explanation:\n\n# The function `nth_term` takes three parameters:\n# - `a`: the first term of the arithmetic progression\n# - `d`: the common difference between consecutive terms\n# - `n`: the position of the term to find\n\n# The formula to find the nth term of an arithmetic progression is:\n# t(n) = a + (n - 1) * d\n# where:\n# - `t(n)` is the nth term\n# - `a` is the first term\n# - `d` is the common difference\n# - `n` is the position of the term\n\n# The function uses this formula to calculate and return the nth term.\n\n# Example usage:\n\nprint(nth_term(2, 3, 5))  # Output: 14\nprint(nth_term(1, 2, 10)) # Output: 19"}
{"task_id": 355, "completion": "import math\n\ndef count_rectangles(r):\n    count = 0\n    for a in range(1, int(math.sqrt(2 * r**2)) + 1):\n        for b in range(a, int(math.sqrt(2 * r**2)) + 1):\n            if a**2 + b**2 <= 2 * r**2:\n                count += 1\n    return count\n\n# Example usage:\nr = 5\nprint(count_rectangles(r))  # Output will depend on the value of r\n```\n\nThis function iterates over all possible rectangle sides `a` and `b` such that `a <= b`. It checks if the rectangle can fit within the circle by ensuring that the sum of the squares of the sides is less than or equal to twice the square of the circle's radius (`2 * r**2`). The function returns the count of such rectangles."}
{"task_id": 356, "completion": "def third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)\n\n# Example usage:\nangle1 = 60\nangle2 = 70\nthird_angle_value = third_angle(angle1, angle2)\nprint(\"The third angle is:\", third_angle_value)"}
{"task_id": 357, "completion": "def max_element(test_tup):\n    res = max(int(ele) for ele in test_tup)\n    return (res)\n\n# Example usage:\n\ntest_tup = ('1', '2', '3')\nprint(max_element(test_tup))  # Output: 3"}
{"task_id": 358, "completion": "def modulo_division(nums1, nums2):\n    result = list(map(lambda x, y: x % y if y!= 0 else 'undefined', nums1, nums2))\n    return result\n\n# Example usage:\n\nnums1 = [10, 20, 30]\nnums2 = [2, 3, 0]\nprint(modulo_division(nums1, nums2))  # Output: [0, 2, 'undefined']"}
{"task_id": 359, "completion": "def check_roots(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        if root1 == 2 * root2 or root2 == 2 * root1:\n            return True\n    return False\n\n# Example usage:\n\nprint(check_roots(1, -3, 2))  # Output: True\nprint(check_roots(1, 2, 1))   # Output: True\nprint(check_roots(1, 1, 1))   # Output: False\n\n# Explanation:\n\n# The function `check_roots` takes three parameters `a`, `b`, and `c` which are the coefficients of the quadratic equation `ax^2 + bx + c = 0`.\n\n# 1. It calculates the discriminant using the formula `b**2 - 4*a*c`.\n# 2. It checks if the discriminant is non-negative (i.e., the roots are real).\n# 3. If the discriminant is non-negative, it calculates the two roots using the quadratic formula.\n# 4. It then checks if one root is twice the other by comparing `root1` and `root2`.\n# 5. If the condition is satisfied, it returns `True`; otherwise, it returns `False`."}
{"task_id": 360, "completion": "def nth_carol_number(n):\n    return (1 << n) - 1\n\n# Example usage:\nn = 5\nprint(nth_carol_number(n))  # Output: 31"}
{"task_id": 361, "completion": "def remove_empty(lists):\n    return [sublist for sublist in lists if sublist]\n\n# Example usage:\nlist_of_lists = [[1, 2], [], [3, 4, 5], [], [6], [7, 8, 9]]\nfiltered_list = remove_empty(list_of_lists)\nprint(filtered_list)  # Output: [[1, 2], [3, 4, 5], [6], [7, 8, 9]]"}
{"task_id": 362, "completion": "def max_occurrences(nums):\n    # Create a dictionary to store the count of each number\n    count_dict = {}\n    \n    # Iterate through the list and count occurrences of each number\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Find the number with the maximum occurrences\n    max_occurrences = max(count_dict.values())\n    \n    # Find the number with the maximum occurrences\n    for num, count in count_dict.items():\n        if count == max_occurrences:\n            return num\n\n# Example usage:\nnums = [1, 3, 2, 1, 4, 1, 3, 2, 3, 3]\nprint(max_occurrences(nums))  # Output: 3"}
{"task_id": 363, "completion": "def add_k_elements(test_tup, K):\n    res = tuple(ele + K for ele in test_tup)\n    return res\n\n# Example usage:\n\ntest_tup = (1, 2, 3, 4)\nK = 5\nprint(add_k_elements(test_tup, K))  # Output: (6, 7, 8, 9)"}
{"task_id": 364, "completion": "def min_flips(s):\n    n = len(s)\n    # Count the number of flips to make the string alternate with 01 pattern\n    flips_01 = 0\n    # Count the number of flips to make the string alternate with 10 pattern\n    flips_10 = 0\n    \n    # Check the pattern starting with 0\n    for i in range(n):\n        expected_01 = '0' if i % 2 == 0 else '1'\n        if s[i]!= expected_01:\n            flips_01 += 1\n    \n    # Check the pattern starting with 1\n    for i in range(n):\n        expected_10 = '1' if i % 2 == 0 else '0'\n        if s[i]!= expected_10:\n            flips_10 += 1\n    \n    # Return the minimum of the two counts\n    return min(flips_01, flips_10)\n\n# Example usage:\ns = \"010010\"\nprint(min_flips(s))  # Output: 2"}
{"task_id": 365, "completion": "def count_digits(n):\n    count = 0\n    if n == 0:\n        return 1\n    while n!= 0:\n        n //= 10\n        count += 1\n    return count\n\n# Test cases:\n\nprint(count_digits(0))  # Output: 1\nprint(count_digits(123))  # Output: 3\nprint(count_digits(-123))  # Output: 3\nprint(count_digits(1230))  # Output: 4\nprint(count_digits(-1230))  # Output: 4"}
{"task_id": 366, "completion": "def largest_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = nums[0] * nums[1]\n    for i in range(1, len(nums) - 1):\n        product = nums[i] * nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Example usage:\nnumbers = [3, 6, -2, -5, 7, 3]\nresult = largest_product(numbers)\nprint(\"The largest product of adjacent elements is:\", result)"}
{"task_id": 367, "completion": "class TreeNode:\n    def __init__(self, value=0, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_balanced(root):\n    def check_height(node):\n        if node is None:\n            return 0\n        \n        left_height = check_height(node.left)\n        if left_height == -1:\n            return -1\n        \n        right_height = check_height(node.right)\n        if right_height == -1:\n            return -1\n        \n        if abs(left_height - right_height) > 1:\n            return -1\n        \n        return max(left_height, right_height) + 1\n    \n    return check_height(root)!= -1\n\n# Example usage:\n# Construct a balanced binary tree:\n#       1\n#      / \\\n#     2   3\n#    / \\ / \\\n#   4  5 6  7\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\nroot.right.left = TreeNode(6)\nroot.right.right = TreeNode(7)\n\nprint(is_balanced(root))  # Output: True\n\n# Construct an unbalanced binary tree:\n#       1\n#      /\n#     2\n#    /\n#   3\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.left.left = TreeNode(3)\n\nprint(is_balanced(root))  # Output: False"}
{"task_id": 368, "completion": "def repeat_tuple(test_tup, N):\n    res = test_tup * N\n    return (res)\n\n# Example usage:\n\ntest_tup = (1, 2, 3)\nN = 3\nprint(repeat_tuple(test_tup, N))  # Output: (1, 2, 3, 1, 2, 3, 1, 2, 3)"}
{"task_id": 369, "completion": "def lateral_surface_area(l, b, h):\n    return 2 * h * (l + b)\n\n# Example usage:\n\nlength = 5\nbreadth = 4\nheight = 3\n\nprint(\"Lateral Surface Area of Cuboid:\", lateral_surface_area(length, breadth, height))"}
{"task_id": 370, "completion": "def sort_tuple(tup):\n    return sorted(tup, key = lambda x: float(x[1]))\n\n# Test the function:\n\ntup = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\nsorted_tup = sort_tuple(tup)\nprint(sorted_tup)\n\n# Output:\n# [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]"}
{"task_id": 371, "completion": "def smallest_missing(arr, low, high):\n    if low > high:\n        return low\n    \n    mid = (low + high) // 2\n    \n    if arr[mid] == mid:\n        return smallest_missing(arr, mid + 1, high)\n    else:\n        return smallest_missing(arr, low, mid - 1)\n\n# Example usage:\narr = [0, 1, 2, 6, 9, 11, 15]\nmissing_element = smallest_missing(arr, 0, len(arr) - 1)\nprint(f\"The smallest missing element is: {missing_element}\")"}
{"task_id": 372, "completion": "import heapq\n\ndef heap_sort(nums):\n    heapq.heapify(nums)\n    sorted_list = [heapq.heappop(nums) for i in range(len(nums))]\n    return sorted_list\n\n# Example usage:\n\nnums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nsorted_nums = heap_sort(nums)\nprint(sorted_nums)  # Output: [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]"}
{"task_id": 373, "completion": "def volume_of_cuboid(length, width, height):\n    volume = length * width * height\n    return volume\n\n# Example usage:\nlength = 5\nwidth = 3\nheight = 2\n\nprint(\"The volume of the cuboid is:\", volume_of_cuboid(length, width, height))"}
{"task_id": 374, "completion": "def permute_string(s):\n    def permute(prefix, remaining):\n        if len(remaining) == 0:\n            result.append(prefix)\n        else:\n            for i in range(len(remaining)):\n                if i > 0 and remaining[i] == remaining[i-1]:\n                    continue  # Skip duplicates\n                permute(prefix + remaining[i], remaining[:i] + remaining[i+1:])\n\n    s = ''.join(sorted(s))  # Sort the string to handle duplicates\n    result = []\n    permute('', s)\n    return result\n\n# Example usage:\ninput_string = \"abc\"\npermutations = permute_string(input_string)\nfor perm in permutations:\n    print(perm)"}
{"task_id": 375, "completion": "def round_number(number, multiple):\n    return round(number / multiple) * multiple\n\n# Example usage:\n\nprint(round_number(12, 5))  # Output: 10\nprint(round_number(13, 5))  # Output: 15\nprint(round_number(17, 3))  # Output: 18\nprint(round_number(20, 4))  # Output: 20"}
{"task_id": 376, "completion": "def remove_duplicates(test_list, replace_value):\n    res = []\n    for sub in test_list:\n        if test_list.count(sub) > 1:\n            res.append(replace_value)\n        else:\n            res.append(sub)\n    return res\n\n# Example usage:\ntest_list = [(1, 2), (2, 3), (1, 2), (4, 5)]\nreplace_value = -1\nresult = remove_duplicates(test_list, replace_value)\nprint(result)  # Output: [(-1, -1), (2, 3), (-1, -1), (4, 5)]\n\n# Explanation:\n# The function `remove_duplicates` takes two arguments: `test_list` (a list of tuples) and `replace_value` (the value to replace duplicates with).\n# It initializes an empty list `res` to store the result.\n# It then iterates over each tuple `sub` in `test_list`.\n# For each tuple, it checks if the count of that tuple in `test_list` is greater than 1 (i.e., if it is a duplicate).\n# If it is a duplicate, it appends `replace_value` to `res`; otherwise, it appends the original tuple.\n# Finally, it returns the modified list `res`.\n# The example usage demonstrates how to call the function with a sample list of tuples and a custom replace value, and it prints the result."}
{"task_id": 377, "completion": "def remove_char(str, char):\n    result = \"\"\n    for i in range(len(str)):\n        if str[i]!= char:\n            result += str[i]\n    return result\n\n# Example usage:\n\nstring = \"hello world\"\nchar_to_remove = \"o\"\nnew_string = remove_char(string, char_to_remove)\nprint(new_string)  # Output: \"hell wrld\""}
{"task_id": 378, "completion": "def shift_list(list1):\n    if len(list1) == 0:\n        return list1\n    last_element = list1[-1]\n    list1.pop()\n    list1.insert(0, last_element)\n    return list1\n\n# Example usage:\n\nlist1 = [1, 2, 3, 4, 5]\nshifted_list = shift_list(list1)\nprint(shifted_list)  # Output: [5, 1, 2, 3, 4]"}
{"task_id": 379, "completion": "def surfacearea_cuboid(l, w, h):\n    return 2 * (l * w + w * h + h * l)\n\n# Example usage:\nlength = 3\nwidth = 4\nheight = 5\nprint(surfacearea_cuboid(length, width, height))  # Output: 94"}
{"task_id": 380, "completion": "def generate_2d_array(rows, cols, value=None):\n    return [[value for _ in range(cols)] for _ in range(rows)]\n\n# Example usage:\narray = generate_2d_array(3, 4, 0)\nprint(array)\n\n# Output:\n# [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n\n# Explanation:\n# The function `generate_2d_array` takes three parameters:\n# - `rows`: the number of rows in the 2D array.\n# - `cols`: the number of columns in the 2D array.\n# - `value`: the value to fill the 2D array with (default is `None`).\n\n# The function uses list comprehension to create a list of lists, where each sublist represents a row in the 2D array. The inner list comprehension creates a list of `cols` elements, all initialized to `value`. The outer list comprehension creates a list of these inner lists, where the number of these inner lists is determined by `rows`."}
{"task_id": 381, "completion": "def sort_list_of_lists(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])\n\n# Example usage:\n\nlist_of_lists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nindex = 1\nsorted_list_of_lists = sort_list_of_lists(list_of_lists, index)\nprint(sorted_list_of_lists)  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n# Explanation:\n\n# The function `sort_list_of_lists` takes two arguments: `list_of_lists` (a list of lists) and `index` (the index of the inner list to sort by).\n# The function uses the `sorted` function, which returns a new sorted list from the elements of `list_of_lists`.\n# The `key` argument of the `sorted` function is a lambda function that returns the element at the specified `index` of each inner list.\n# The `sorted` function uses this key to sort the list of lists by the specified index.\n# The example usage demonstrates how to call the function and print the sorted list of lists."}
{"task_id": 382, "completion": "def find_rotation_count(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            return left\n        \n        mid = (left + right) // 2\n        next_mid = (mid + 1) % len(arr)\n        prev_mid = (mid - 1 + len(arr)) % len(arr)\n        \n        if arr[mid] <= arr[next_mid] and arr[mid] <= arr[prev_mid]:\n            return mid\n        elif arr[mid] <= arr[right]:\n            right = mid - 1\n        elif arr[mid] >= arr[left]:\n            left = mid + 1\n    \n    return -1\n\n# Example usage:\narr = [4, 5, 6, 7, 0, 1, 2]\nprint(find_rotation_count(arr))  # Output: 4"}
{"task_id": 383, "completion": "def toggle_odd_bits(n):\n    # Initialize a mask with all odd bits set to 1\n    mask = 0xAAAAAAAA\n    # XOR the number with the mask to toggle the odd bits\n    return n ^ mask\n\n# Example usage:\nnumber = 29  # Binary: 11101\nresult = toggle_odd_bits(number)\nprint(result)  # Output: 41 (Binary: 101001)\n\n# Explanation:\n# The binary representation of 29 is 11101.\n# The mask 0xAAAAAAAA (in binary: 10101010101010101010101010101010) has all odd bits set to 1.\n# XORing the number with this mask will toggle all odd bits of the number.\n# For example, the odd bits in 11101 are the second and fourth bits (1 based index).\n# Toggling these bits gives us 101001, which is 41 in decimal."}
{"task_id": 384, "completion": "def frequency_of_smallest(numbers):\n    # Find the smallest value in the array\n    smallest = min(numbers)\n    \n    # Count the frequency of the smallest value\n    frequency = numbers.count(smallest)\n    \n    return frequency\n\n# Example usage:\nnumbers = [4, 2, 1, 3, 1, 2, 4, 1]\nprint(frequency_of_smallest(numbers))  # Output: 3"}
{"task_id": 385, "completion": "def perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n - 2) + perrin_number(n - 3)\n\n# Example usage:\nn = 10\nprint(f\"The {n}th Perrin number is: {perrin_number(n)}\")"}
{"task_id": 386, "completion": "def min_swaps(s):\n    # Initialize a counter for unbalanced brackets\n    unbalanced = 0\n    \n    # Iterate through the string\n    for bracket in s:\n        if bracket == '[':\n            unbalanced += 1\n        elif bracket == ']':\n            if unbalanced > 0:\n                unbalanced -= 1\n    \n    # The minimum number of swaps required will be half of the unbalanced brackets\n    return (unbalanced + 1) // 2\n\n# Example usage:\ns = \"]]][[[\"\nprint(min_swaps(s))  # Output: 2"}
{"task_id": 387, "completion": "def check_hexadecimal_even_odd(hex_num):\n    # Convert the hexadecimal number to an integer\n    num = int(hex_num, 16)\n    \n    # Check if the number is even or odd\n    if num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage:\nhex_number = \"1A3F\"\nresult = check_hexadecimal_even_odd(hex_number)\nprint(f\"The hexadecimal number {hex_number} is {result}.\")"}
{"task_id": 388, "completion": "def highest_power_of_2(n):\n    if n < 1:\n        return 0\n    p = 1\n    while p <= n:\n        p *= 2\n    return p // 2\n\n# Example usage:\nn = 10\nprint(highest_power_of_2(n))  # Output: 8"}
{"task_id": 389, "completion": "def lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return lucas(n - 1) + lucas(n - 2)\n\n# Example usage:\nprint(lucas(0))  # Output: 2\nprint(lucas(1))  # Output: 1\nprint(lucas(2))  # Output: 3\nprint(lucas(3))  # Output: 4\nprint(lucas(4))  # Output: 7\nprint(lucas(5))  # Output: 11"}
{"task_id": 390, "completion": "def add_string(list1, string1):\n    result = [string1 + x for x in list1]\n    return result\n\n# Example usage:\n\nlist1 = [\"apple\", \"banana\", \"cherry\"]\nstring1 = \"fruit:\"\n\nprint(add_string(list1, string1))\n\n# Output:\n# ['fruit:apple', 'fruit:banana', 'fruit:cherry']"}
{"task_id": 391, "completion": "def convert_list_to_nested_dict(keys, values):\n    if len(keys)!= len(values):\n        return \"Key-value mismatch\"\n    result = {}\n    for i in range(len(keys)):\n        result[keys[i]] = values[i]\n    return result\n\n# Example usage:\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3]\nnested_dict = convert_list_to_nested_dict(keys, values)\nprint(nested_dict)  # Output: {'a': 1, 'b': 2, 'c': 3}\n\n# If you want to handle the case where the number of keys and values do not match, you can return a message indicating the mismatch.\n\n# Example with mismatch:\nkeys = ['a', 'b']\nvalues = [1, 2, 3]\nnested_dict = convert_list_to_nested_dict(keys, values)\nprint(nested_dict)  # Output: \"Key-value mismatch\"\n\n# This function will create a nested dictionary where each key from the keys list is associated with the corresponding value from the values list. If the lengths of the keys and values lists do not match, it will return a message indicating the mismatch."}
{"task_id": 392, "completion": "def max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5), n)\n\n# Example usage:\n# print(max_sum(12))  # Output should be 13\n# print(max_sum(24))  # Output should be 27\n\n# Explanation:\n# The function `max_sum` is a recursive function that calculates the maximum sum possible for a given number `n` using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n# The base cases are:\n# - If `n` is 0, return 0 because the sum is 0.\n# - If `n` is 1, return 1 because the sum is 1.\n# For any other value of `n`, the function calculates the maximum of the sum of `max_sum` values of `n/2`, `n/3`, `n/4`, and `n/5` plus `n`, and `n` itself.\n# The function then returns this maximum value."}
{"task_id": 393, "completion": "def max_length_list(list1, list2, list3):\n    max_length = max(list1, list2, list3, key=lambda x: len(x))\n    return max_length\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [6, 7, 8]\nlist3 = [9, 10]\n\nresult = max_length_list(list1, list2, list3)\nprint(result)  # Output: [1, 2, 3, 4, 5]"}
{"task_id": 394, "completion": "def check_distinct(test_tup):\n    return len(test_tup) == len(set(test_tup))\n\n# Test cases:\n\nprint(check_distinct((1, 2, 3, 4)))  # Output: True\nprint(check_distinct((1, 2, 2, 3)))  # Output: False\nprint(check_distinct((1, 1, 1, 1)))  # Output: False\nprint(check_distinct((10, 20, 30, 40)))  # Output: True"}
{"task_id": 395, "completion": "def first_non_repeated_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None\n\n# Example usage:\nprint(first_non_repeated_char(\"leetcode\"))  # Output: 'l'\nprint(first_non_repeated_char(\"loveleetcode\"))  # Output: 'v'\nprint(first_non_repeated_char(\"aabb\"))  # Output: None"}
{"task_id": 396, "completion": "import re\n\ndef check_string(string):\n    if re.match(r\"^[a-zA-Z0-9].*[a-zA-Z0-9]$\", string):\n        return True\n    else:\n        return False\n\n# Example usage:\n\nprint(check_string(\"hello\"))  # False\nprint(check_string(\"level\"))  # True\nprint(check_string(\"python\")) # True\nprint(check_string(\"123\"))    # False\n\nExplanation:\n\n- The function `check_string` takes a string as input.\n- It uses a regular expression to check if the string starts and ends with the same character.\n- The regular expression `^[a-zA-Z0-9].*[a-zA-Z0-9]$` is used:\n  - `^` asserts the position at the start of the string.\n  - `[a-zA-Z0-9]` matches any alphanumeric character (letters and numbers).\n  - `.*` matches any character (except newline) zero or more times.\n  - `[a-zA-Z0-9]` matches any alphanumeric character (letters and numbers).\n  - `$` asserts the position at the end of the string.\n- If the string matches the regular expression, the function returns `True`, indicating that the string starts and ends with the same character. Otherwise, it returns `False`."}
{"task_id": 397, "completion": "def median_of_three(a, b, c):\n    if (a > b and a < c) or (a > c and a < b):\n        return a\n    elif (b > a and b < c) or (b > c and b < a):\n        return b\n    else:\n        return c\n\n# Example usage:\nprint(median_of_three(5, 1, 3))  # Output: 3\nprint(median_of_three(1, 2, 3))  # Output: 2\nprint(median_of_three(3, 2, 1))  # Output: 2"}
{"task_id": 398, "completion": "def sum_of_digits(numbers):\n    return [sum(int(digit) for digit in str(number)) for number in numbers]\n\n# Example usage:\nnumbers = [123, 456, 789]\nprint(sum_of_digits(numbers))  # Output: [6, 15, 24]"}
{"task_id": 399, "completion": "def bitwise_xor(test_tup1, test_tup2):\n    res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res)\n\n# Example usage:\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(bitwise_xor(test_tup1, test_tup2))  # Output: (5, 7, 5)"}
{"task_id": 400, "completion": "def extract_unique_tuples(test_list):\n    res = {}\n    for sub in test_list:\n        sub.sort()\n        if tuple(sub) not in res:\n            res[tuple(sub)] = 1\n        else:\n            res[tuple(sub)] += 1\n    return res\n\n# Example usage:\ntest_list = [[1, 2], [2, 3], [1, 2], [4, 5], [2, 3]]\nprint(extract_unique_tuples(test_list))\n\n# Output:\n# {(1, 2): 2, (2, 3): 2, (4, 5): 1}"}
{"task_id": 401, "completion": "def add_nested_tuples(test_tup1, test_tup2):\n    res = tuple(\n        tuple(a + b for a, b in zip(tup1, tup2))\n        for tup1, tup2 in zip(test_tup1, test_tup2)\n    )\n    return (res)\n\n# Example usage:\n\ntest_tup1 = ((1, 2), (3, 4))\ntest_tup2 = ((5, 6), (7, 8))\n\nprint(add_nested_tuples(test_tup1, test_tup2))\n\n# Output:\n\n((6, 8), (10, 12))"}
{"task_id": 402, "completion": "def nCr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    num = 1\n    den = 1\n    for i in range(r):\n        num = (num * (n - i)) % p\n        den = (den * (i + 1)) % p\n    return (num * pow(den, p - 2, p)) % p\n\n# Example usage:\nn = 5\nr = 2\np = 13\nprint(nCr_mod_p(n, r, p))  # Output: 10"}
{"task_id": 403, "completion": "import re\n\ndef is_valid_url(url):\n    # Regex pattern to match a valid URL\n    pattern = r'^https?://(www\\.)?[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    \n    # Use re.match to check if the URL matches the pattern\n    if re.match(pattern, url):\n        return True\n    else:\n        return False\n\n# Test the function\nurl1 = \"http://www.example.com\"\nurl2 = \"https://www.example.com\"\nurl3 = \"http://example.com\"\nurl4 = \"https://example.co.uk\"\nurl5 = \"ftp://example.com\"\n\nprint(is_valid_url(url1))  # True\nprint(is_valid_url(url2))  # True\nprint(is_valid_url(url3))  # True\nprint(is_valid_url(url4))  # True\nprint(is_valid_url(url5))  # False"}
{"task_id": 404, "completion": "def min_of_two(x, y):\n    if x < y:\n        return x\n    else:\n        return y\n\n# Example usage:\n\nnum1 = 5\nnum2 = 10\nprint(\"The minimum of\", num1, \"and\", num2, \"is\", min_of_two(num1, num2))"}
{"task_id": 405, "completion": "def check_element(test_tup, element_to_check):\n    result = element_to_check in test_tup\n    return result\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)\nelement_to_check = 3\nprint(check_element(test_tup, element_to_check))  # Output: True\n\nelement_to_check = 6\nprint(check_element(test_tup, element_to_check))  # Output: False"}
{"task_id": 406, "completion": "def find_parity(n):\n    parity = 0\n    while n:\n        parity = ~parity\n        n = n & (n - 1)\n    return bool(parity)\n\n# Explanation:\n# 1. Initialize `parity` to 0.\n# 2. Use a while loop to iterate while `n` is not zero.\n# 3. In each iteration, toggle the parity bit using the bitwise NOT operator `~`.\n# 4. Use the expression `n = n & (n - 1)` to clear the lowest set bit of `n`.\n# 5. After the loop, return the boolean value of `parity`.\n\n# Example usage:\n\nprint(find_parity(13))  # Output: True\nprint(find_parity(14))  # Output: False"}
{"task_id": 407, "completion": "def next_bigger_number(n):\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    \n    # Find the first digit that is smaller than the digit next to it\n    i = len(digits) - 2\n    while i >= 0 and digits[i] >= digits[i + 1]:\n        i -= 1\n    \n    # If no such digit is found, the number cannot be made bigger\n    if i == -1:\n        return -1\n    \n    # Find the smallest digit on right side of (i-1)'th digit that is greater than digits[i]\n    j = len(digits) - 1\n    while digits[j] <= digits[i]:\n        j -= 1\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits after the position i\n    digits[i+1:] = reversed(digits[i+1:])\n    \n    # Convert the list of digits back to a number\n    next_bigger = int(''.join(digits))\n    \n    return next_bigger\n\n# Example usage:\nprint(next_bigger_number(1234))  # Output: 1243\nprint(next_bigger_number(4321))  # Output: -1\nprint(next_bigger_number(1243))  # Output: 1324"}
{"task_id": 408, "completion": "def find_pairs(arr1, arr2, k):\n    # Sort both arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # Initialize pointers for both arrays\n    i, j = 0, len(arr2) - 1\n    \n    # List to store the pairs\n    pairs = []\n    \n    # Use two pointers to find the pairs\n    while i < len(arr1) and j >= 0:\n        if arr1[i] + arr2[j] == k:\n            pairs.append((arr1[i], arr2[j]))\n            i += 1\n            j -= 1\n        elif arr1[i] + arr2[j] < k:\n            i += 1\n        else:\n            j -= 1\n    \n    return pairs\n\n# Example usage:\narr1 = [1, 3, 5, 7]\narr2 = [2, 3, 5, 8]\nk = 10\nprint(find_pairs(arr1, arr2, k))  # Output: [(3, 7), (5, 5), (7, 3)]"}
{"task_id": 409, "completion": "def min_product(test_list):\n    res = min(tup[0] * tup[1] for tup in test_list)\n    return res\n\n# Example usage:\n\ntest_list = [(1, 2), (3, 4), (5, 6)]\nprint(min_product(test_list))  # Output: 2"}
{"task_id": 410, "completion": "def find_min_value(lst):\n    # Initialize the minimum value to a very large number\n    min_value = float('inf')\n    \n    # Iterate through the list to find the minimum value\n    for element in lst:\n        if isinstance(element, (int, float)) and element < min_value:\n            min_value = element\n    \n    return min_value\n\n# Example usage:\nexample_list = [3, 'apple', 5.5, 1, 'banana', -2, 3.14, 'cherry']\nprint(find_min_value(example_list))  # Output: -2"}
{"task_id": 411, "completion": "import re\n\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() for x in word.split('_'))\n\n# Example usage:\nprint(snake_to_camel('this_is_a_test'))  # Output: ThisIsATest\n```\n\nThis function uses the `split` method to divide the snake case string into words and then uses a generator expression to capitalize each word and join them together."}
{"task_id": 412, "completion": "def remove_odd_numbers(numbers):\n    return [num for num in numbers if num % 2 == 0]\n\n# Example usage:\n\nnumbers_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_list = remove_odd_numbers(numbers_list)\nprint(filtered_list)  # Output: [2, 4, 6, 8, 10]"}
{"task_id": 413, "completion": "def extract_element(test_list, N):\n    res = [sub[N] for sub in test_list]\n    return (str(res))\n\n# Example usage:\n\ntest_list = [('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]\nN = 1\nprint(extract_element(test_list, N))\n\n# Output:\n\n# ['b', 'e', 'h']"}
{"task_id": 414, "completion": "def check_value(sequence, value):\n    return value in sequence\n\n# Example usage:\n\nsequence = [1, 2, 3, 4, 5]\nvalue = 3\n\nif check_value(sequence, value):\n    print(f\"The value {value} exists in the sequence.\")\nelse:\n    print(f\"The value {value} does not exist in the sequence.\")"}
{"task_id": 415, "completion": "def max_product(arr):\n    if len(arr) < 2:\n        return None\n    \n    # Initialize the maximum and second maximum elements\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    # Compare the products of the maximum and second maximum with the minimum and second minimum\n    product1 = max1 * max2\n    product2 = min1 * min2\n    \n    if product1 > product2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n\n# Example usage:\narr = [1, 4, 3, 6, 7, 0]\nresult = max_product(arr)\nprint(\"Pair with the highest product:\", result)"}
{"task_id": 416, "completion": "def max_sum_recursive(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(n, max_sum_recursive(n // 2) + max_sum_recursive(n // 3) + max_sum_recursive(n // 4))\n\n# Example usage:\nnumber = 12\nprint(max_sum_recursive(number))  # Output will depend on the value of 'number'"}
{"task_id": 417, "completion": "def common_first_element(list_of_tuples):\n    if not list_of_tuples:\n        return None\n    \n    first_element = list_of_tuples[0][0]\n    for tuple in list_of_tuples:\n        if tuple[0]!= first_element:\n            return None\n    return first_element\n\n# Example usage:\nlist_of_tuples = [('apple', 'banana'), ('apple', 'cherry'), ('apple', 'date')]\nprint(common_first_element(list_of_tuples))  # Output: apple\n\nlist_of_tuples = [('apple', 'banana'), ('orange', 'cherry'), ('apple', 'date')]\nprint(common_first_element(list_of_tuples))  # Output: None"}
{"task_id": 418, "completion": "def max_length_sublist(lst):\n    if not lst:\n        return None\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) > len(max_sublist):\n            max_sublist = sublist\n    return max_sublist\n\n# Example usage:\n\nexample_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nresult = max_length_sublist(example_list)\nprint(\"The sublist with maximum length is:\", result)"}
{"task_id": 419, "completion": "def round_sum_multiply_length(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    length = len(numbers)\n    result = total_sum * length\n    return result\n\n# Example usage:\nnumbers = [1.2, 2.6, 3.8, 4.3]\nprint(round_sum_multiply_length(numbers))  # Output will be (1+2+3+4) * 4 = 40"}
{"task_id": 420, "completion": "def even_cube_sum(n):\n    sum = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum += i ** 3\n    return sum\n\n# Example usage:\nn = 5\nprint(even_cube_sum(n))  # Output: 330"}
{"task_id": 421, "completion": "def concatenate_elements(test_tup):\n    res = ''\n    for ele in test_tup:\n        res += str(ele) + str(' ')\n    return res.strip()\n\n# Example usage:\ntest_tup = (1, 2, 3, 4)\nprint(concatenate_elements(test_tup))  # Output: \"1 2 3 4\"\n\n# Explanation:\n# 1. Define a function named `concatenate_elements` that takes a single argument `test_tup`, which is expected to be a tuple.\n# 2. Initialize an empty string `res` to store the concatenated result.\n# 3. Loop through each element `ele` in the tuple `test_tup`.\n# 4. Convert each element to a string and concatenate it to `res` followed by a space.\n# 5. After the loop, use `strip()` to remove any trailing spaces from the final result.\n# 6. Return the concatenated string `res`.\n\n# Example usage:\n# The example usage demonstrates calling the function with a tuple `(1, 2, 3, 4)` and printing the result."}
{"task_id": 422, "completion": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n\n# Example usage:\nn = 5\nprint(find_Average_Of_Cube(n))  # Output will be the average of cubes of first 5 natural numbers"}
{"task_id": 423, "completion": "def gold_mine_problem(gold_table):\n    # Your code here\n```\n\nThis function should take a 2D list `gold_table` as input, where each element represents the amount of gold in that cell. The function should return the maximum amount of gold that can be collected starting from the first column and moving to the last column, moving right or diagonally up or down.\n\nExample usage:\n\n```python\ngold_table = [\n    [1, 3, 1, 5],\n    [2, 2, 4, 1],\n    [5, 0, 2, 3],\n    [0, 6, 1, 2]\n]\n\nprint(gold_mine_problem(gold_table))  # Output should be 16\n```\n\nThis example represents a 4x4 grid with the following amounts of gold:\n\n```\n1   3   1   5\n\n2   2   4   1\n\n5   0   2   3\n\n0   6   1   2\n```\n\nThe function should return 16, which is the maximum gold collected from the first column to the last column.\n\nHere's the Python function to solve the gold mine problem:\n\n```python\ndef gold_mine_problem(gold_table):\n    rows = len(gold_table)\n    cols = len(gold_table[0])\n    \n    # Create a table for storing intermediate results\n    dp = [[0] * cols for _ in range(rows)]\n    \n    # Fill the table from right to left\n    for col in range(cols - 1, -1, -1):\n        for row in range(rows):\n            # Gold collected on going to the cell to the right (right column)\n            if col == cols - 1:\n                right = 0\n            else:\n                right = dp[row][col + 1]\n            \n            # Gold collected on going to the cell to the right and diagonally up\n            if row == 0 or col == cols - 1:\n                right_up = 0\n            else:\n                right_up = dp[row - 1][col + 1]\n            \n            # Gold collected on going to"}
{"task_id": 424, "completion": "def extract_rear_index(test_tup):\n    res = list(ele[-1] for ele in test_tup)\n    return (str(res))\n\n# Test the function:\n\ntest_tup = (\"hello\", \"world\", \"python\", \"code\")\nprint(extract_rear_index(test_tup))"}
{"task_id": 425, "completion": "def count_sublist_element(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Example usage:\n\nexample_list = [[1, 2, 3], [4, 5, 6], [1, 2], [7, 8, 9, 1]]\nelement_to_count = 2\n\nresult = count_sublist_element(example_list, element_to_count)\nprint(result)  # Output: 3"}
{"task_id": 426, "completion": "def filter_odd_numbers(numbers):\n    result = list(filter(lambda x: x % 2!= 0, numbers))\n    return result\n\n# Example usage:\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = filter_odd_numbers(numbers)\nprint(odd_numbers)  # Output: [1, 3, 5, 7, 9]"}
{"task_id": 427, "completion": "import re\n\ndef convert_date_format(date):\n    # Define the regex pattern for yyyy-mm-dd\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use re.sub to replace the pattern with dd-mm-yyyy\n    new_date = re.sub(pattern, r'\\3-\\2-\\1', date)\n    \n    return new_date\n\n# Example usage:\ndate = '2023-04-15'\nconverted_date = convert_date_format(date)\nprint(converted_date)  # Output: 15-04-2023"}
{"task_id": 428, "completion": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\n# Example usage:\narr = [12, 34, 54, 2, 3]\nsorted_arr = shell_sort(arr)\nprint(sorted_arr)\n```\n\nThis function implements the Shell Sort algorithm. Shell Sort is an in-place comparison sort. It generalizes insertion sort to allow the exchange of items that are far apart. The method starts by sorting pairs of elements far apart from each other, then progressively reducing the gap between elements to be compared.\n\n### Steps:\n1. Calculate the gap value. The gap value starts with `n // 2` and is reduced by half each iteration.\n2. For each gap value, iterate through the array and compare the elements that are `gap` distance apart.\n3. If the element at the `gap` distance is greater than the current element, swap them.\n4. Continue this process until the gap value becomes `0`.\n\n### Example Usage:\n- The example provided sorts the array `[12, 34, 54, 2, 3]` and prints the sorted array `[2, 3, 12, 34, 54]`."}
{"task_id": 429, "completion": "def extract_elements(test_tup1, test_tup2):\n    res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res)\n\n# Example usage:\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(extract_elements(test_tup1, test_tup2))  # Output: (5, 7, 9)"}
{"task_id": 430, "completion": "def directrix(a, b, c):\n    # Calculate the directrix of a parabola given by the equation ax^2 + bx + c = 0\n    if a == 0:\n        raise ValueError(\"The coefficient 'a' must not be zero for a parabola.\")\n    directrix_value = (c - b**2) / (4 * a)\n    return directrix_value\n\n# Example usage:\na = 1\nb = -2\nc = 1\nprint(\"Directrix:\", directrix(a, b, c))"}
{"task_id": 431, "completion": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\n# Example usage:\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 3]\nprint(common_element(list1, list2))  # Output: True\n\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7, 8]\nprint(common_element(list1, list2))  # Output: False"}
{"task_id": 432, "completion": "def find_median(a, b, c, d):\n    # Sort the numbers\n    numbers = [a, b, c, d]\n    numbers.sort()\n    \n    # Find the median\n    median = (numbers[1] + numbers[2]) / 2\n    return median\n\n# Example usage:\nresult = find_median(10, 20, 30, 40)\nprint(\"Median of the trapezium is:\", result)"}
{"task_id": 433, "completion": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Example usage:\n\narray = [1, 2, 3, 4, 5]\nnumber = 3\nresult = check_greater(array, number)\nprint(result)  # Output: False\n\nnumber = 6\nresult = check_greater(array, number)\nprint(result)  # Output: True"}
{"task_id": 434, "completion": "import re\n\ndef text_match(text):\n    patterns = 'ab+?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function:\n\nprint(text_match(\"abc\"))  # Should return 'Found a match!'\nprint(text_match(\"ab\"))   # Should return 'Found a match!'\nprint(text_match(\"a\"))    # Should return 'Not matched!'\nprint(text_match(\"ac\"))   # Should return 'Not matched!'"}
{"task_id": 435, "completion": "def last_Digit(n):\n    return abs(n) % 10\n\n# Explanation:\n# 1. The function `last_Digit` takes an integer `n` as input.\n# 2. It returns the last digit of `n` using the modulo operator `%`.\n# 3. The `abs` function is used to ensure that the result is non-negative, even if `n` is negative.\n\n# Example usage:\nprint(last_Digit(123))  # Output: 3\nprint(last_Digit(-123)) # Output: 3\nprint(last_Digit(0))    # Output: 0"}
{"task_id": 436, "completion": "def negative_num(nums):\n    for num in nums:\n        if num < 0:\n            print(num)\n\n# Example usage:\nnumbers = [1, -2, 3, -4, 5, -6]\nnegative_num(numbers)\n\n# Output:\n# -2\n# -4\n# -6"}
{"task_id": 437, "completion": "def remove_odd_characters(s, n):\n    result = \"\"\n    for i in range(n):\n        if i % 2 == 0:\n            result += s[i]\n    return result\n\n# Example usage:\ns = \"abcdef\"\nn = len(s)\nprint(remove_odd_characters(s, n))  # Output: \"ace\"\n\n# Explanation:\n# The function `remove_odd_characters` takes two arguments: `s` (the input string) and `n` (the length of the string).\n# It initializes an empty string `result` to store the characters that will be kept.\n# It then iterates over the range of the string length `n`.\n# For each index `i`, it checks if `i` is even (using `i % 2 == 0`). If it is, it adds the character at index `i` from the string `s` to the `result` string.\n# Finally, it returns the `result` string, which contains only the characters at even indices.\n\n# In the example usage, the input string is \"abcdef\" and the length of the string is 6. The function will return \"ace\" because it keeps the characters at indices 0, 2, and 4 (which are even indices)."}
{"task_id": 438, "completion": "def count_bidirectional_pairs(pairs):\n    # Create a dictionary to store the count of each pair\n    pair_count = {}\n    \n    # Iterate over each pair in the list\n    for a, b in pairs:\n        # Ensure the pair is stored in a consistent order\n        if (a, b) < (b, a):\n            pair = (a, b)\n        else:\n            pair = (b, a)\n        \n        # Increment the count for this pair\n        if pair in pair_count:\n            pair_count[pair] += 1\n        else:\n            pair_count[pair] = 1\n    \n    # Count the number of pairs that appear at least once\n    bidirectional_count = 0\n    for count in pair_count.values():\n        if count > 1:\n            bidirectional_count += 1\n    \n    return bidirectional_count\n\n# Example usage:\npairs = [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]\nprint(count_bidirectional_pairs(pairs))  # Output should be 2"}
{"task_id": 439, "completion": "def convert_list_to_int(lst):\n    # Initialize an empty string to hold the concatenated integers\n    result = \"\"\n    # Loop through each integer in the list\n    for num in lst:\n        # Convert each integer to a string and concatenate it to the result string\n        result += str(num)\n    # Convert the result string back to an integer\n    return int(result)\n\n# Example usage:\n\nexample_list = [1, 2, 3, 4, 5]\nprint(convert_list_to_int(example_list))  # Output: 12345\n\n# Explanation:\n\n# 1. The function `convert_list_to_int` takes a list of integers as input.\n# 2. It initializes an empty string `result` to hold the concatenated integers.\n# 3. It loops through each integer in the list, converts it to a string, and concatenates it to the `result` string.\n# 4. After concatenating all integers, it converts the `result` string back to an integer and returns it.\n# 5. The example usage demonstrates how to call the function with a list of integers and print the output."}
{"task_id": 440, "completion": "def find_adverbs(sentence):\n    import re\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, sentence)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end(), match.group()))\n    return positions\n\n# Example usage:\n\nsentence = \"He sings beautifully and dances lyrically.\"\nadverbs = find_adverbs(sentence)\nfor adverb, start, end in adverbs:\n    print(f\"Adverb: '{adverb}', Position: ({start}, {end})\")"}
{"task_id": 441, "completion": "def surface_area_cube(side):\n    surface_area = 6 * side * side\n    return surface_area\n\n# Example usage:\nside_length = 5\nprint(\"Surface area of the cube:\", surface_area_cube(side_length))"}
{"task_id": 442, "completion": "def positive_ratio(arr):\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    \n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n    \n    positive_ratio = positive_count / len(arr) if len(arr) > 0 else 0\n    return positive_ratio\n\n# Example usage:\narr = [1, -2, 3, 0, -1, 2, 0, -3]\nprint(positive_ratio(arr))  # Output will be the ratio of positive numbers"}
{"task_id": 443, "completion": "def largest_negative(list1):\n    # Initialize the largest negative number to None\n    largest_neg = None\n    \n    # Iterate through each number in the list\n    for num in list1:\n        # Check if the number is negative and greater than the current largest negative number\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n            \n    return largest_neg\n\n# Example usage:\nlist1 = [-1, -2, -3, 4, 5, -6]\nprint(largest_negative(list1))  # Output: -1"}
{"task_id": 444, "completion": "def trim_tuple(test_list, K):\n    res = list(map(lambda ele: tuple(ele[i] for i in range(len(ele)) if i!= K - 1), test_list))\n    return str(res)\n\n# Driver code:\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nK = 1\nprint(trim_tuple(test_list, K))\n\n# Output:\n\n# [(2, 3), (5, 6), (8, 9)]"}
{"task_id": 445, "completion": "def multiply_elements(test_tup1, test_tup2):\n    res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return (res)\n\n# Example usage:\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\nprint(multiply_elements(test_tup1, test_tup2))  # Output: (4, 10, 18)\n\n# Explanation:\n\n# 1. The function `multiply_elements` takes two tuples `test_tup1` and `test_tup2` as input.\n# 2. It uses the `zip` function to pair up elements from `test_tup1` and `test_tup2` based on their indices.\n# 3. It then uses a generator expression within the `tuple` constructor to multiply each pair of elements.\n# 4. The result is a new tuple containing the products of the corresponding elements from the input tuples.\n# 5. The function returns this new tuple.\n# 6. In the example usage, the function is called with two tuples `(1, 2, 3)` and `(4, 5, 6)`, and it prints the result `(4, 10, 18)`."}
{"task_id": 446, "completion": "def count_occurrences(lst, tup):\n    result = {}\n    for item in lst:\n        count = tup.count(item)\n        result[item] = count\n    return result\n\n# Example usage:\nmy_list = [1, 2, 3, 4]\nmy_tuple = (1, 2, 2, 3, 4, 4, 4, 5)\n\noccurrences = count_occurrences(my_list, my_tuple)\nprint(occurrences)"}
{"task_id": 447, "completion": "def cube_nums(nums):\n    cube_nums = list(map(lambda x: x**3, nums))\n    return cube_nums\n\n# Test the function:\nnums = [1, 2, 3, 4, 5]\nprint(cube_nums(nums))"}
{"task_id": 448, "completion": "def perrin_sum(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c = 3, 0, 2\n        for i in range(3, n + 1):\n            next_value = a + b\n            a, b, c = b, c, next_value\n        return c\n\n# Example usage:\nprint(perrin_sum(5))  # Output: 5\nprint(perrin_sum(10)) # Output: 12"}
{"task_id": 449, "completion": "def is_valid_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n# Explanation:\n# The function is_valid_triangle takes three arguments: a, b, and c, which represent the lengths of the sides of a triangle.\n# The function checks if the sum of any two sides is greater than the third side.\n# If this condition is satisfied for all three combinations of sides, the function returns True, indicating that the triangle is valid.\n# Otherwise, it returns False.\n\n# Example usage:\n\na = 3\nb = 4\nc = 5\n\nif is_valid_triangle(a, b, c):\n    print(\"The triangle is valid.\")\nelse:\n    print(\"The triangle is not valid.\")"}
{"task_id": 450, "completion": "def extract_strings(strings, size):\n    result = [s for s in strings if len(s) == size]\n    return result\n\n# Example usage:\n\nstrings = [\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\"]\nsize = 5\nextracted_strings = extract_strings(strings, size)\nprint(extracted_strings)  # Output: ['apple', 'grape']"}
{"task_id": 451, "completion": "import re\n\ndef remove_whitespaces(input_string):\n    # Use regex to replace all whitespaces with an empty string\n    cleaned_string = re.sub(r'\\s+', '', input_string)\n    return cleaned_string\n\n# Example usage:\ninput_string = \"Hello,   World!   This is a test.\"\ncleaned_string = remove_whitespaces(input_string)\nprint(cleaned_string)  # Output: \"Hello,World!Thisisatest.\""}
{"task_id": 452, "completion": "def check_loss(amount):\n    if amount < 0:\n        return abs(amount)\n    else:\n        return None\n\n# Example usage:\nprint(check_loss(100))  # Output: None\nprint(check_loss(-50))  # Output: 50"}
{"task_id": 453, "completion": "def sum_of_even_factors(n):\n    sum_even = 0\n    for i in range(2, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            sum_even += i\n            n //= i\n    if n > 2 and n % 2 == 0:\n        sum_even += n\n    return sum_even\n\n# Example usage:\nnumber = 12\nprint(sum_of_even_factors(number))  # Output: 18 (2 + 4 + 6)"}
{"task_id": 454, "completion": "import re\n\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns, text):\n            return 'Found a match!'\n        else:\n            return 'Not matched!'\n\n# Test the function:\nprint(text_match_wordz(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match_wordz(\"Python Exercises.\"))\n\n# Output:\n# Found a match!\n# Not matched!\n\n# Explanation:\n# The regular expression pattern '\\w*z.\\w*' is used to match a word containing 'z'. \n# The pattern '\\w*' matches zero or more word characters (letters, digits, and underscores), \n# 'z' matches the character 'z', \n# '.' matches any single character (except newline), \n# and '\\w*' matches zero or more word characters again.\n# The function re.search() is used to search the text for the pattern. \n# If the pattern is found, it returns 'Found a match!', otherwise it returns 'Not matched!'."}
{"task_id": 455, "completion": "def check_month(month):\n    if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        return True\n    else:\n        return False\n\n# Example usage:\nmonth_number = 7\nif check_month(month_number):\n    print(f\"The month number {month_number} has 31 days.\")\nelse:\n    print(f\"The month number {month_number} does not have 31 days.\")"}
{"task_id": 456, "completion": "def reverse_strings(lst):\n    return [s[::-1] for s in lst]\n\n# Example usage:\n\nstring_list = [\"hello\", \"world\", \"python\"]\nreversed_list = reverse_strings(string_list)\nprint(reversed_list)  # Output: ['olleh', 'dlrow', 'nohtyp']"}
{"task_id": 457, "completion": "def sublist_min_length(lst):\n    if not lst:\n        return []\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10], [11, 12]]\nprint(sublist_min_length(example_list))  # Output: [6]"}
{"task_id": 458, "completion": "def area_rectangle(length, width):\n    return length * width\n\n# Example usage:\n\nlength = 5\nwidth = 3\nprint(\"Area of the rectangle:\", area_rectangle(length, width))"}
{"task_id": 459, "completion": "import re\n\ndef remove_uppercase(string):\n    result = re.sub(r'[A-Z]', '', string)\n    return result\n\n# Example usage:\ninput_string = \"Hello World! This is a Test.\"\noutput_string = remove_uppercase(input_string)\nprint(output_string)  # Output: \"ello orld! his is a est.\""}
{"task_id": 460, "completion": "def first_elements(list1):\n    result = [sublist[0] for sublist in list1]\n    return result\n\n# Example usage:\n\nlist1 = [[1, 2], [3, 4], [5, 6]]\nprint(first_elements(list1))  # Output: [1, 3, 5]"}
{"task_id": 461, "completion": "def count_upper_case_characters(input_string):\n    count = 0\n    for char in input_string:\n        if char.isupper():\n            count += 1\n    return count\n\n# Example usage:\ninput_string = \"Hello World\"\nprint(count_upper_case_characters(input_string))  # Output: 2"}
{"task_id": 462, "completion": "def combinations(lst):\n    if len(lst) == 0:\n        return [[]]\n    result = []\n    for i in range(len(lst)):\n        m = lst[i]\n        remLst = lst[i+1:]\n        for p in combinations(remLst):\n            result.append([m]+p)\n    return result\n\n# Example usage:\nprint(combinations([1, 2, 3]))\n\n# This function works by recursively generating combinations of the list, starting with the first element and then adding the rest of the list one by one. It's a classic example of a recursive approach to generate all possible combinations."}
{"task_id": 463, "completion": "def max_subarray_product(arr):\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        temp = max_ending_here\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], temp * arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n# Example usage:\narr = [2, 3, -2, 4, -1]\nprint(max_subarray_product(arr))  # Output: 48"}
{"task_id": 464, "completion": "def check_all_values_same(dict1):\n    # Get the first value from the dictionary\n    first_value = list(dict1.values())[0]\n    \n    # Check if all values in the dictionary are the same as the first value\n    return all(value == first_value for value in dict1.values())\n\n# Example usage:\nexample_dict = {'a': 1, 'b': 1, 'c': 1}\nprint(check_all_values_same(example_dict))  # Output: True\n\nexample_dict = {'a': 1, 'b': 2, 'c': 1}\nprint(check_all_values_same(example_dict))  # Output: False\n\n# Explanation:\n# The function `check_all_values_same` takes a dictionary `dict1` as input.\n# It first retrieves the first value from the dictionary using `list(dict1.values())[0]`.\n# Then, it uses the `all` function to check if all values in the dictionary are equal to this first value.\n# The `all` function returns `True` if all values are the same, otherwise it returns `False`."}
{"task_id": 465, "completion": "def drop_empty_items(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Example usage:\n\nexample_dict = {'a': 1, 'b': None, 'c': 2, 'd': None}\nresult = drop_empty_items(example_dict)\nprint(result)  # Output: {'a': 1, 'c': 2}"}
{"task_id": 466, "completion": "def find_peak_element(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n\n    return left\n\n# Example usage:\narr = [1, 2, 3, 1]\npeak_element_index = find_peak_element(arr)\nprint(\"Peak element index:\", peak_element_index)\n\n# Explanation:\n# 1. Initialize two pointers, `left` and `right`, to the start and end of the array, respectively.\n# 2. Use a while loop to perform the binary search. The loop continues until `left` is no longer less than `right`.\n# 3. Calculate the middle index `mid`.\n# 4. Compare the element at `mid` with the element at `mid + 1`.\n# 5. If `arr[mid]` is greater than `arr[mid + 1]`, it means the peak element is on the left side of `mid`, so update `right` to `mid`.\n# 6. Otherwise, the peak element is on the right side of `mid`, so update `left` to `mid + 1`.\n# 7. When `left` equals `right`, the loop exits, and `left` (or `right`) will be the index of the peak element.\n# 8. Return the index of the peak element.\n\n# Note: This function assumes that the input array has at least one peak element. If the array can be empty or have no peak element, additional checks would be needed."}
{"task_id": 467, "completion": "def decimal_to_octal(decimal_number):\n    if decimal_number == 0:\n        return '0'\n    octal_number = ''\n    while decimal_number > 0:\n        remainder = decimal_number % 8\n        octal_number = str(remainder) + octal_number\n        decimal_number = decimal_number // 8\n    return octal_number\n\n# Example usage:\ndecimal_number = 10\nprint(decimal_to_octal(decimal_number))  # Output: '12'"}
{"task_id": 468, "completion": "def max_product(nums):\n    n = len(nums)\n    if n == 0:\n        return 0\n    \n    # Initialize max_product array\n    max_product = [0] * n\n    \n    # The minimum product for any single element is the element itself\n    for i in range(n):\n        max_product[i] = nums[i]\n    \n    # Fill max_product array using the increasing subsequence logic\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                max_product[i] = max(max_product[i], max_product[j] * nums[i])\n    \n    # Return the maximum value in max_product array\n    return max(max_product)\n\n# Example usage:\nnums = [3, 100, 4, 5, 150, 6]\nprint(max_product(nums))  # Output: 45000\n\n# Explanation:\n# The increasing subsequence with the maximum product is [3, 4, 5, 150]. The product is 3 * 4 * 5 * 150 = 45000.\n\n# The function works by first initializing an array `max_product` where each element represents the maximum product ending at that index. It then iterates through the array, updating the `max_product` array based on whether the current element can extend an increasing subsequence. Finally, it returns the maximum value in the `max_product` array, which represents the maximum product of an increasing subsequence in the input array."}
{"task_id": 469, "completion": "def max_profit(price, k):\n    n = len(price)\n    # Create a table to store results of subproblems\n    profit = [[0 for _ in range(n)] for _ in range(k+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, k+1):\n        for j in range(1, n):\n            max_so_far = 0\n            for l in range(j):\n                max_so_far = max(max_so_far, price[j] - price[l] + profit[i-1][l])\n            profit[i][j] = max(profit[i][j-1], max_so_far)\n\n    return profit[k][n-1]\n\n# Example usage:\nprice = [10, 22, 5, 75, 65, 80]\nk = 2\nprint(max_profit(price, k))  # Output: 87\n```\n\nThis function uses dynamic programming to solve the problem. It creates a table `profit` where `profit[i][j]` represents the maximum profit that can be achieved with at most `i` transactions up to day `j`. The table is filled in a bottom-up manner, where each cell is filled based on the maximum profit that can be achieved by either not doing any transaction on day `j` or by selling the stock on day `j` and adding the maximum profit from the previous transactions up to day `l` (where `l` ranges from `0` to `j-1`)."}
{"task_id": 470, "completion": "def sum_pairwise(test_tup):\n    res = 0\n    for idx in range(0, len(test_tup), 2):\n        res += test_tup[idx] + test_tup[idx + 1]\n    return res\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(sum_pairwise(test_tup))  # Output: 12 (1+2 + 3+4 + 5+6)"}
{"task_id": 471, "completion": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):\n        mul = (mul * (arr[i] % n)) % n\n    return mul % n\n\n# Example usage:\n\narr = [100, 10, 5, 25, 35, 14]\nn = 11\nlens = len(arr)\nprint(find_remainder(arr, lens, n))  # Output: 9\n\n# Explanation:\n\n# 1. Initialize `mul` to 1, which will hold the product of the elements of the array modulo `n`.\n# 2. Iterate through each element in the array.\n# 3. For each element, calculate `arr[i] % n` to get the remainder when the element is divided by `n`.\n# 4. Multiply `mul` by this remainder and take modulo `n` to ensure that the intermediate result does not grow too large.\n# 5. After processing all elements, take the final result modulo `n` to get the remainder of the product of the array elements divided by `n`.\n# 6. Return the final result.\n\n# This function efficiently calculates the remainder of the product of array elements divided by `n` without directly computing the potentially very large product."}
{"task_id": 472, "completion": "def is_consecutive(nums, diff=1):\n    return all(nums[i] - nums[i - 1] == diff for i in range(1, len(nums)))\n\n# Example usage:\n\nnums = [2, 3, 4, 5, 6, 7]\nprint(is_consecutive(nums))  # Output: True\n\nnums = [1, 3, 4, 5, 6, 7]\nprint(is_consecutive(nums))  # Output: False"}
{"task_id": 473, "completion": "def tuple_intersection(test_list):\n    res = set(test_list[0]).intersection(*test_list)\n    return (sorted(list(res)))\n\n# Example usage:\n\ntest_list = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\nprint(tuple_intersection(test_list))  # Output: [3]"}
{"task_id": 474, "completion": "def replace_char(str1, old_char, new_char):\n    result = \"\"\n    for char in str1:\n        if char == old_char:\n            result += new_char\n        else:\n            result += char\n    return result\n\n# Example usage:\ninput_string = \"hello world\"\nold_character = \"o\"\nnew_character = \"a\"\noutput_string = replace_char(input_string, old_character, new_character)\nprint(output_string)  # Output: \"hella warld\""}
{"task_id": 475, "completion": "def sort_counter_by_value(counter):\n    # Your code here\n```\n\n# Example usage:\n\n```python\nfrom collections import Counter\n\n# Example counter\ncounter = Counter({'a': 3, 'b': 1, 'c': 2})\n\n# Sort the counter by value\nsorted_counter = sort_counter_by_value(counter)\n\n# Print the sorted counter\nprint(sorted_counter)\n```\n\n# Expected output:\n\n```\nCounter({'a': 3, 'c': 2, 'b': 1})\n```\n\nHere's the implementation of the function:\n\n```python\nfrom collections import Counter\n\ndef sort_counter_by_value(counter):\n    return Counter({k: v for k, v in sorted(counter.items(), key=lambda item: item[1], reverse=True)})\n\n# Example usage:\ncounter = Counter({'a': 3, 'b': 1, 'c': 2})\nsorted_counter = sort_counter_by_value(counter)\nprint(sorted_counter)\n```\n\nThis code defines the `sort_counter_by_value` function, which takes a `Counter` object as input and returns a new `Counter` object sorted by the values in descending order. The sorted items are created using a list comprehension and the `sorted` function with a lambda function as the key to sort by the values."}
{"task_id": 476, "completion": "def sum_largest_smallest(arr):\n    if not arr:\n        return 0\n    return max(arr) + min(arr)\n\n# Example usage:\n\narr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nresult = sum_largest_smallest(arr)\nprint(result)  # Output: 10 (9 + 1)"}
{"task_id": 477, "completion": "def to_lower(string):\n    return string.lower()\n\n# Example usage:\ninput_string = \"Hello, World!\"\noutput_string = to_lower(input_string)\nprint(output_string)  # Output: \"hello, world!\""}
{"task_id": 478, "completion": "def remove_lowercase(s):\n    result = \"\"\n    for char in s:\n        if not char.islower():\n            result += char\n    return result\n\n# Example usage:\ninput_string = \"Hello World!\"\noutput_string = remove_lowercase(input_string)\nprint(output_string)  # Output: \"H W!\""}
{"task_id": 479, "completion": "def first_Digit(n):\n    while n >= 10:\n        n = n / 10\n    return int(n)\n\n# Example usage:\nnumber = 12345\nprint(first_Digit(number))  # Output: 1"}
{"task_id": 480, "completion": "def get_max_occuring_char(str1):\n    ASCII_SIZE = 256\n    ctr = [0] * ASCII_SIZE\n    max_count = -1\n    max_char = ''\n    for char in str1:\n        ctr[ord(char)] += 1\n\n    for char in str1:\n        if max_count < ctr[ord(char)]:\n            max_count = ctr[ord(char)]\n            max_char = char\n\n    return max_char\n\n# Example usage:\n\ninput_string = \"sample string\"\nmax_occurring_char = get_max_occuring_char(input_string)\nprint(\"The maximum occurring character in the string is:\", max_occurring_char)"}
{"task_id": 481, "completion": "def is_subset_sum(set, n, sum):\n    # Base cases\n    if sum == 0:\n        return True\n    if n == 0 and sum!= 0:\n        return False\n    \n    # If last element is greater than sum, then ignore it\n    if set[n - 1] > sum:\n        return is_subset_sum(set, n - 1, sum)\n    \n    # Check if sum can be obtained by any of the following:\n    # (a) including the last element\n    # (b) excluding the last element\n    return is_subset_sum(set, n - 1, sum) or is_subset_sum(set, n - 1, sum - set[n - 1])\n\n# Example usage:\nset = [3, 34, 4, 12, 5, 2]\nsum = 9\nn = len(set)\nif is_subset_sum(set, n, sum) == True:\n    print(\"Found a subset with given sum\")\nelse:\n    print(\"No subset with given sum\")\n\n# Explanation:\n\n# The function `is_subset_sum` is a recursive function that checks if there is a subset of the given set with the specified sum.\n\n# - **Base Cases**:\n#   - If the sum is 0, it means we have found a subset whose sum is equal to the given sum, so we return `True`.\n#   - If there are no elements left (`n == 0`) and the sum is not 0, it means we have exhausted all elements without finding a subset with the given sum, so we return `False`.\n\n# - **Recursive Cases**:\n#   - If the last element of the set is greater than the sum, we ignore it and move to the next element by calling the function recursively with `n - 1`.\n#   - Otherwise, we check if the sum can be obtained by either including the last element or excluding it. We do this by calling the function recursively with `n - 1` and `n - 1` with the updated sum (`sum - set[n - 1]`).\n\n# The example usage demonstrates how to call the function with a given set and sum, and it prints whether a"}
{"task_id": 482, "completion": "import re\n\ndef find_sequences(text):\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = \"Hello world, this is a Test string with OneUpperAndLowerCaseSequences.\"\nprint(find_sequences(text))\n\n# This code will output:\n# ['Hello', 'world', 'this', 'is', 'a', 'Test','string', 'with', 'OneUpperAndLowerCaseSequences']"}
{"task_id": 483, "completion": "def first_Factorial_Divisible_Number(x):\n    i = 1\n    fact = 1\n    while True:\n        fact *= i\n        if fact % x == 0:\n            return i\n        i += 1\n\n# Example usage:\nx = 24\nprint(first_Factorial_Divisible_Number(x))  # Output: 4"}
{"task_id": 484, "completion": "def remove_matching_tuple(l1, l2):\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                c = l1[i]\n                l1.remove(c)\n                l2.remove(c)\n                return remove_matching_tuple(l1, l2)\n    return l1, l2\n\n# Example usage:\n\ntuple1 = (1, 2, 3, 4)\ntuple2 = (3, 4, 5, 6)\nresult = remove_matching_tuple(list(tuple1), list(tuple2))\nprint(tuple(result))"}
{"task_id": 485, "completion": "def largest_palindrome(arr):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    max_palindrome = None\n    for num in arr:\n        if is_palindrome(num) and (max_palindrome is None or num > max_palindrome):\n            max_palindrome = num\n    return max_palindrome\n\n# Example usage:\narray = [123, 121, 131, 456, 789, 989]\nprint(largest_palindrome(array))  # Output: 989"}
{"task_id": 486, "completion": "def binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability for the given number of trials, successes, and probability of success.\n    \n    Parameters:\n    n (int): The number of trials.\n    k (int): The number of successes.\n    p (float): The probability of success on each trial.\n    \n    Returns:\n    float: The binomial probability.\n    \"\"\"\n    import math\n    \n    # Calculate binomial coefficient\n    binomial_coefficient = math.comb(n, k)\n    \n    # Calculate the probability\n    probability = binomial_coefficient * (p ** k) * ((1 - p) ** (n - k))\n    \n    return probability\n\n# Example usage:\nn = 10\nk = 3\np = 0.5\nprint(binomial_probability(n, k, p))  # Output: 0.1171875"}
{"task_id": 487, "completion": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n# Example usage:\n\ntuples = [(1, 3), (3, 2), (2, 1), (4, 4)]\nsorted_tuples = sort_tuples(tuples)\nprint(sorted_tuples)\n\n# Output:\n\n# [(2, 1), (3, 2), (1, 3), (4, 4)]"}
{"task_id": 488, "completion": "def pentagon_area(s):\n    area = (5 * (s**2)) / (4 * math.tan(math.pi / 5))\n    return area\n\n# Example usage:\nimport math\n\n# Define the function\ndef pentagon_area(s):\n    area = (5 * (s**2)) / (4 * math.tan(math.pi / 5))\n    return area\n\n# Example usage:\nimport math\n\n# Define the side length of the pentagon\nside_length = 5\n\n# Calculate the area of the pentagon\narea = pentagon_area(side_length)\n\n# Print the area\nprint(\"The area of the pentagon is:\", area)"}
{"task_id": 489, "completion": "def largest_freq(arr):\n    if not arr:\n        return 0\n    max_val = max(arr)\n    return arr.count(max_val)\n\n# Example usage:\n\narr = [3, 1, 4, 4, 5, 2, 6, 1]\nprint(largest_freq(arr))  # Output: 1"}
{"task_id": 490, "completion": "def extract_symmetric_pairs(test_list):\n    res = []\n    for sub in test_list:\n        if sub[::-1] in test_list:\n            res.append(sub)\n    return res\n\n# Example usage:\n\ntest_list = [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]\nprint(extract_symmetric_pairs(test_list))  # Output: [(1, 2), (2, 1), (4, 3), (3, 4)]"}
{"task_id": 491, "completion": "def sum_gp(a, r, n):\n    if r == 1:\n        return a * n\n    else:\n        return a * (1 - r**n) / (1 - r)\n\n# Example usage:\na = 2\nr = 3\nn = 4\nprint(sum_gp(a, r, n))  # Output: 84\n\n# Explanation:\n# The function sum_gp takes three arguments: the first term 'a', the common ratio 'r', and the number of terms 'n'.\n# If the common ratio 'r' is 1, the series is a simple arithmetic progression, and the sum is simply 'a' multiplied by 'n'.\n# Otherwise, the sum of the geometric progression series is calculated using the formula for the sum of a geometric series, which is 'a' times (1 - r^n) divided by (1 - r).\n# The example usage calculates the sum of the geometric progression series with the first term 2, common ratio 3, and 4 terms, which is 84."}
{"task_id": 492, "completion": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    mid = 0\n\n    while low <= high:\n        mid = (high + low) // 2\n\n        if arr[mid] < x:\n            low = mid + 1\n\n        elif arr[mid] > x:\n            high = mid - 1\n\n        else:\n            return mid\n\n    return -1\n\n# Example usage:\n\narr = [2, 3, 4, 10, 40]\nx = 10\n\nresult = binary_search(arr, x)\n\nif result!= -1:\n    print(f\"Element is present at index {result}\")\nelse:\n    print(\"Element is not present in array\")"}
{"task_id": 493, "completion": "def hex_grid(size):\n    grid = []\n    for q in range(-size, size + 1):\n        for r in range(-size, size + 1):\n            if (q + r >= -size) and (q + r <= size) and (r <= -q + size) and (r >= -q - size):\n                grid.append(hex_coordinates(q, r))\n    return grid\n\ndef hex_coordinates(q, r):\n    x = (3/2) * q\n    y = (math.sqrt(3)/2) * r + (math.sqrt(3)/2) * (q / 2)\n    return (x, y)\n```\n\nThis function creates a hexagon grid. The `hex_grid` function generates a grid of hexagon coordinates, and the `hex_coordinates` function calculates the coordinates of a single hexagon based on its axial coordinates `(q, r)`."}
{"task_id": 494, "completion": "def binary_to_integer(binary_tuple):\n    binary_string = ''.join(map(str, binary_tuple))\n    integer_value = int(binary_string, 2)\n    return integer_value\n\n# Example usage:\nbinary_tuple = (1, 0, 1, 1)\nprint(binary_to_integer(binary_tuple))  # Output: 11"}
{"task_id": 495, "completion": "import re\n\ndef remove_lowercase(string):\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', string)\n    return result\n\n# Example usage:\n\ninput_string = \"Hello World! This is a Test String.\"\noutput_string = remove_lowercase(input_string)\nprint(output_string)  # Output: \"H W! T s  T   S tr.\""}
{"task_id": 496, "completion": "import heapq\n\ndef find_smallest(numbers):\n    return heapq.nsmallest(1, numbers)[0]\n```\n\nThis function uses the `heapq.nsmallest` function to find the smallest element(s) in the list. The `nsmallest` function returns a list of the `n` smallest elements sorted in ascending order. In this case, we pass `1` as the second argument to get the smallest element. The function then returns the first element of this list, which is the smallest."}
{"task_id": 497, "completion": "def surfacearea_cone(r, h):\n    \"\"\"\n    Calculate the surface area of a cone given its radius and height.\n    \n    Parameters:\n    r (float): The radius of the base of the cone.\n    h (float): The height of the cone.\n    \n    Returns:\n    float: The surface area of the cone.\n    \"\"\"\n    import math\n    slant_height = math.sqrt(r**2 + h**2)\n    surface_area = math.pi * r * (r + slant_height)\n    return surface_area\n\n# Example usage:\n# radius = 3\n# height = 4\n# print(surfacearea_cone(radius, height))  # Output: 83.22976312832782"}
{"task_id": 498, "completion": "def gcd(x, y):\n    while y!= 0:\n        x, y = y, x % y\n    return x\n\n# Example usage:\nresult = gcd(48, 18)\nprint(result)  # Output: 6"}
{"task_id": 499, "completion": "def diameter_circle(radius):\n    diameter = 2 * radius\n    return diameter\n\n# Example usage:\nradius = 5\nprint(\"The diameter of the circle is:\", diameter_circle(radius))"}
{"task_id": 500, "completion": "def concatenate_elements(lst):\n    result = ''\n    for element in lst:\n        result += element\n    return result\n\n# Example usage:\nmy_list = ['Hello','', 'world', '!']\nresult_string = concatenate_elements(my_list)\nprint(result_string)  # Output: \"Hello world!\""}
{"task_id": 501, "completion": "def common_divisor(x, y):\n    # Find the minimum of the two numbers\n    min_num = min(x, y)\n    # Initialize the list to store common divisors\n    common_divisors = []\n    # Loop through the range from 1 to the minimum number\n    for i in range(1, min_num + 1):\n        # Check if both numbers are divisible by i\n        if x % i == 0 and y % i == 0:\n            # Add i to the list of common divisors\n            common_divisors.append(i)\n    # Return the list of common divisors\n    return common_divisors\n\n# Example usage:\nx = 12\ny = 18\nprint(common_divisor(x, y))  # Output: [1, 2, 3, 6]"}
{"task_id": 502, "completion": "def find_remainder(num1, num2):\n    return num1 % num2\n\n# Example usage:\nnum1 = 10\nnum2 = 3\nprint(find_remainder(num1, num2))  # Output: 1\n\nnum1 = 15\nnum2 = 4\nprint(find_remainder(num1, num2))  # Output: 3"}
{"task_id": 503, "completion": "def add_consecutive_numbers(numbers):\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i] + numbers[i + 1])\n    return result\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(add_consecutive_numbers(numbers))  # Output: [3, 5, 7, 9]"}
{"task_id": 504, "completion": "def sum_of_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n# Example usage:\nn = 5\nprint(sum_of_cubes(n))  # Output: 225"}
{"task_id": 505, "completion": "def move_zero(nums):\n    j = 0\n    for i in range(len(nums)):\n        if nums[i]!= 0:\n            nums[j], nums[i] = nums[i], nums[j]\n            j += 1\n    return nums\n\n# Example usage:\nnums = [0, 1, 0, 3, 12]\nprint(move_zero(nums))  # Output: [1, 3, 12, 0, 0]"}
{"task_id": 506, "completion": "def permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    \n    # Initialize the result\n    res = 1\n    \n    # Calculate the permutation coefficient\n    for i in range(k):\n        res *= (n - i)\n    \n    return res\n\n# Example usage:\nn = 5\nk = 2\nprint(permutation_coefficient(n, k))  # Output: 20"}
{"task_id": 507, "completion": "def remove_words(words, remove_list):\n    return [word for word in words if word not in remove_list]\n\n# Example usage:\n\nwords = [\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]\nremove_list = [\"banana\", \"date\"]\nresult = remove_words(words, remove_list)\nprint(result)  # Output: [\"apple\", \"cherry\", \"elderberry\"]"}
{"task_id": 508, "completion": "def check_order(list1, list2):\n    it = iter(list2)\n    return all(element in it for element in list1)\n\n# Example usage:\nlist1 = [1, 3, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(check_order(list1, list2))  # Output: True\n\nlist1 = [1, 4, 3]\nlist2 = [1, 2, 3, 4, 5]\nprint(check_order(list1, list2))  # Output: False"}
{"task_id": 509, "completion": "def odd_average(n):\n    if n % 2 == 0:\n        print(\"Please enter an odd number.\")\n        return\n    \n    odd_sum = 0\n    count = 0\n    \n    for i in range(1, n+1, 2):\n        odd_sum += i\n        count += 1\n    \n    average = odd_sum / count\n    return average\n\n# Example usage:\nresult = odd_average(9)\nprint(\"Average of odd numbers till 9 is:\", result)"}
{"task_id": 510, "completion": "def count_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(n + 1):\n        dp[i][0] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j // arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    \n    return dp[n][k - 1]\n\n# Example usage:\narr = [1, 2, 3, 4]\nk = 10\nprint(count_subsequences(arr, k))  # Output: 11"}
{"task_id": 511, "completion": "def min_sum_factors(n):\n    sum_factors = 0\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            sum_factors += i\n            n //= i\n        i += 1\n    if n > 1:\n        sum_factors += n\n    return sum_factors\n\n# Example usage:\nn = 12\nprint(min_sum_factors(n))  # Output: 7 (2+2+3)\n```\n\nExplanation:\n1. Initialize `sum_factors` to 0.\n2. Start with the smallest prime number, `i = 2`.\n3. Use a while loop to iterate as long as `i * i <= n`. This is because if `n` has a factor larger than its square root, it must have a corresponding factor smaller than the square root.\n4. Within the outer while loop, use another while loop to divide `n` by `i` as long as `n` is divisible by `i`. Each time `n` is divided by `i`, add `i` to `sum_factors`.\n5. After the inner while loop, increment `i` to check the next potential factor.\n6. If `n` is greater than 1 after the loops, it means `n` itself is a prime number and should be added to `sum_factors`.\n7. Return the `sum_factors`.\n\nThis function efficiently calculates the minimum sum of the factors of a given number `n`."}
{"task_id": 512, "completion": "def count_element_frequency(test_list):\n    res = {}\n    for ele in test_list:\n        if ele in res:\n            res[ele] += 1\n        else:\n            res[ele] = 1\n    return res\n\n# Example usage:\n\ntest_list = (1, 2, 2, 3, 4, 4, 4, (1, 2), (1, 2), (1, 2, 3))\nprint(count_element_frequency(test_list))\n\n# Output:\n\n# {1: 3, 2: 3, 3: 1, 4: 3, (1, 2): 3, (1, 2, 3): 1}\n\n# Explanation:\n\n# The function `count_element_frequency` takes a mixed nested tuple `test_list` as input.\n# It initializes an empty dictionary `res` to store the frequency of each element.\n# It then iterates over each element in `test_list`.\n# For each element, it checks if the element is already in the dictionary `res`.\n# If the element is already in `res`, it increments its count by 1.\n# If the element is not in `res`, it adds the element to `res` with a count of 1.\n# Finally, it returns the dictionary `res` containing the frequency of each element in the tuple.\n# The example usage demonstrates how to call the function with a specific tuple and print the resulting frequency dictionary."}
{"task_id": 513, "completion": "def convert_tuple_to_list(test_tup, K):\n    res = [ele for sub in test_tup for ele in (str(sub), K)]\n    return res\n\n# Example usage:\ntest_tup = (1, 2, 3)\nK = \"a\"\nprint(convert_tuple_to_list(test_tup, K))  # Output: [1, 'a', 2, 'a', 3, 'a']"}
{"task_id": 514, "completion": "def sum_tuple(test_list):\n    res = sum(ele for sub in test_list for ele in sub)\n    return (res)\n\n# Example usage:\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(sum_tuple(test_list))  # Output: 45"}
{"task_id": 515, "completion": "def modular_sum(arr, n, m):\n    if n > m:\n        return True\n    # This is going to store (sum % m) for all the subsets\n    DP = [False] * m\n    for i in range(n):\n        # Handling the case when there is no element\n        if DP[0]:\n            return True\n        # Create a temp array for this iteration\n        temp = [False] * m\n        # The empty subset\n        temp[0] = True\n        # Process all previous sums obtained by including the i'th element\n        for j in range(m):\n            if DP[j] == True:\n                if DP[(j + arr[i]) % m] == False:\n                    temp[(j + arr[i]) % m] = True\n        # Copy temp to DP as DP will be used to compute result of i+1th element\n        for j in range(m):\n            if temp[j]:\n                DP[j] = True\n        DP[arr[i] % m] = True\n    return DP[0]\n\n# Example usage:\narr = [3, 1, 7, 5]\nn = len(arr)\nm = 6\nprint(modular_sum(arr, n, m))  # Output: True"}
{"task_id": 516, "completion": "def radix_sort(nums):\n    RADIX = 10\n    placement = 1\n    max_digit = max(nums)\n\n    while placement <= max_digit:\n        # Create empty buckets for each digit\n        buckets = [list() for _ in range(RADIX)]\n        # Distribute the numbers into buckets\n        for i in nums:\n            tmp = (i // placement) % RADIX\n            buckets[tmp].append(i)\n        # Collect the numbers from the buckets back into the list\n        a = 0\n        for b in range(RADIX):\n            for i in buckets[b]:\n                nums[a] = i\n                a += 1\n        # Move to the next digit\n        placement *= RADIX\n    return nums\n\n# Example usage:\nnumbers = [170, 45, 75, 90, 802, 24, 2, 66]\nsorted_numbers = radix_sort(numbers)\nprint(sorted_numbers)"}
{"task_id": 517, "completion": "def largest_number(list1):\n    max_num = list1[0]\n    for num in list1:\n        if num > max_num:\n            max_num = num\n    return max_num\n\n# Example usage:\nnumbers = [34, 1, 0, -23, 12, -88]\nprint(largest_number(numbers))  # Output: 34"}
{"task_id": 518, "completion": "def find_sqrt(num):\n    if num < 0:\n        return \"Invalid input\"\n    if num == 0 or num == 1:\n        return num\n    low = 1\n    high = num // 2\n    while low <= high:\n        mid = (low + high) // 2\n        mid_squared = mid * mid\n        if mid_squared == num:\n            return mid\n        elif mid_squared < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high\n\n# Example usage:\nprint(find_sqrt(16))  # Output: 4\nprint(find_sqrt(25))  # Output: 5\nprint(find_sqrt(9))   # Output: 3\n```\n\nThis function uses a binary search approach to find the square root of a perfect number. It handles edge cases such as negative numbers and numbers 0 and 1 directly. The binary search helps in efficiently narrowing down the possible values for the square root."}
{"task_id": 519, "completion": "import math\n\ndef tetrahedron_volume(side_length):\n    return (side_length**3) / (6 * math.sqrt(2))\n\n# Example usage:\nside_length = 3\nvolume = tetrahedron_volume(side_length)\nprint(\"Volume of the tetrahedron:\", volume)\n```\n\nThis function calculates the volume of a regular tetrahedron given the length of its side. The formula for the volume \\( V \\) of a regular tetrahedron with side length \\( a \\) is:\n\n\\[ V = \\frac{a^3}{6 \\sqrt{2}} \\]\n\nThis formula is derived from the general formula for the volume of a pyramid, which is \\( \\frac{1}{3} \\times \\text{base area} \\times \\text{height} \\). For a regular tetrahedron, the base is an equilateral triangle, and the height can be derived from the geometry of the tetrahedron."}
{"task_id": 520, "completion": "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef find_lcm(nums):\n    lcm_result = nums[0]\n    for num in nums[1:]:\n        lcm_result = lcm(lcm_result, num)\n    return lcm_result\n\n# Example usage:\nnums = [4, 5, 6]\nprint(find_lcm(nums))  # Output: 60"}
{"task_id": 521, "completion": "def check_scalene(a, b, c):\n    if a!= b and b!= c and a!= c:\n        return \"Scalene triangle\"\n    else:\n        return \"Not a Scalene triangle\"\n\n# Example usage:\na = 5\nb = 7\nc = 9\nprint(check_scalene(a, b, c))  # Output: Scalene triangle\n\n# Explanation:\n# The function `check_scalene` takes three parameters `a`, `b`, and `c` which represent the lengths of the sides of a triangle.\n# It checks if all three sides are different. If they are, it returns \"Scalene triangle\". Otherwise, it returns \"Not a Scalene triangle\"."}
{"task_id": 522, "completion": "def find_longest_bitonic_subseq(arr):\n    n = len(arr)\n    \n    # Step 1: Compute the increasing subsequence array\n    inc = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + 1:\n                inc[i] = inc[j] + 1\n    \n    # Step 2: Compute the decreasing subsequence array\n    dec = [1] * n\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + 1:\n                dec[i] = dec[j] + 1\n    \n    # Step 3: Find the maximum value of (inc[i] + dec[i] - 1)\n    max_len = 0\n    for i in range(n):\n        max_len = max(max_len, inc[i] + dec[i] - 1)\n    \n    return max_len\n\n# Example usage:\narr = [1, 11, 2, 10, 4, 5, 2, 1]\nprint(find_longest_bitonic_subseq(arr))  # Output: 6 (subsequence: 1, 2, 10, 4, 2, 1)"}
{"task_id": 523, "completion": "def check_string(str1):\n    messg = \"Valid\"\n    # using lambda function check string\n    check_list = [lambda str1: any(x.isupper() for x in str1),\n                  lambda str1: any(x.islower() for x in str1),\n                  lambda str1: any(x.isdigit() for x in str1),\n                  lambda str1: len(str1) >= 8]\n    # iterate through function list\n    for check in check_list:\n        if not check(str1):\n            messg = \"Invalid\"\n    return messg\n\n# Test the function\nprint(check_string(\"HelloWorld123\"))  # Should return \"Valid\"\nprint(check_string(\"helloworld\"))     # Should return \"Invalid\"\nprint(check_string(\"HELLOWORLD\"))     # Should return \"Invalid\"\nprint(check_string(\"HelloWorld12\"))   # Should return \"Invalid\"\nprint(check_string(\"HelloWorld12345678\"))  # Should return \"Valid\""}
{"task_id": 524, "completion": "def max_increasing_subsequence_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize dp array where dp[i] represents the maximum sum of increasing subsequence ending at index i\n    dp = [arr[i] for i in range(n)]\n    \n    # Compute the maximum sum of increasing subsequence for each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    \n    # Return the maximum value in the dp array\n    return max(dp)\n\n# Example usage:\narr = [1, 101, 2, 3, 100, 4, 5]\nprint(max_increasing_subsequence_sum(arr))  # Output: 106 (1 + 2 + 3 + 100)"}
{"task_id": 525, "completion": "def are_parallel(line1, line2):\n    # Extract coefficients from the lines\n    a1, b1, c1 = line1\n    a2, b2, c2 = line2\n    \n    # Check if the lines are parallel by comparing their slopes\n    # Two lines are parallel if the product of their slopes is -1\n    return a1 * b2 == a2 * b1\n\n# Example usage:\nline1 = (1, -2, 3)\nline2 = (2, -4, 6)\nprint(are_parallel(line1, line2))  # Output: True\n\nline3 = (1, -2, 4)\nprint(are_parallel(line1, line3))  # Output: False\n```\n\nThis function works by comparing the slopes of the two lines. Two lines are parallel if the product of their slopes is -1. The slopes of the lines are represented by the coefficients \\(a\\) and \\(b\\) in the line equation \\(ax + by + c = 0\\). If \\(a1 * b2 == a2 * b1\\), the lines are parallel."}
{"task_id": 526, "completion": "def capitalize_first_last_letters(str1):\n    words = str1.split()\n    result = []\n    for word in words:\n        if len(word) > 1:\n            result.append(word[0].upper() + word[1:-1] + word[-1].upper())\n        else:\n            result.append(word.upper())\n    return''.join(result)\n\n# Example usage:\ninput_string = \"hello world\"\noutput_string = capitalize_first_last_letters(input_string)\nprint(output_string)  # Output: \"HellO WorlD\""}
{"task_id": 527, "completion": "def find_pairs_with_sum(arr, target_sum):\n    pairs = []\n    seen = set()\n\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen.add(num)\n\n    return pairs\n\n# Example usage:\narr = [2, 4, 3, 5, 7, 8, 9]\ntarget_sum = 10\nprint(find_pairs_with_sum(arr, target_sum))  # Output: [(7, 3), (8, 2)]"}
{"task_id": 528, "completion": "def find_min_length_list(list_of_lists):\n    min_length = float('inf')\n    min_list = []\n    for lst in list_of_lists:\n        if len(lst) < min_length:\n            min_length = len(lst)\n            min_list = [lst]\n        elif len(lst) == min_length:\n            min_list.append(lst)\n    return min_list\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(find_min_length_list(list_of_lists))  # Output: [[10]]"}
{"task_id": 529, "completion": "def jacobsthal_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + 2 * b\n        return b\n\n# Example usage:\nn = 5\nprint(f\"The {n}th Jacobsthal-Lucas number is: {jacobsthal_lucas(n)}\")"}
{"task_id": 530, "completion": "def negative_ratio(arr):\n    negative_count = 0\n    total_count = len(arr)\n    \n    for num in arr:\n        if num < 0:\n            negative_count += 1\n    \n    if total_count == 0:\n        return 0\n    \n    return negative_count / total_count\n\n# Example usage:\narr = [1, -2, 3, -4, 5, -6]\nprint(negative_ratio(arr))  # Output: 0.5"}
{"task_id": 531, "completion": "def min_coins(coins, value):\n    # Initialize a list to store the minimum number of coins for each value\n    dp = [float('inf')] * (value + 1)\n    # Base case: 0 coins needed to make value 0\n    dp[0] = 0\n    \n    # Iterate over each coin\n    for coin in coins:\n        # Update the dp array for each value from coin to value\n        for i in range(coin, value + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    # If dp[value] is still inf, it means it's not possible to make the value with the given coins\n    return dp[value] if dp[value]!= float('inf') else -1\n\n# Example usage:\ncoins = [1, 2, 5]\nvalue = 11\nprint(min_coins(coins, value))  # Output: 3 (5+5+1)"}
{"task_id": 532, "completion": "def check_permutation(str1, str2):\n    # Check if the lengths of the strings are different\n    if len(str1)!= len(str2):\n        return False\n    \n    # Sort both strings and compare them\n    sorted_str1 = sorted(str1)\n    sorted_str2 = sorted(str2)\n    \n    return sorted_str1 == sorted_str2\n\n# Example usage:\nresult = check_permutation(\"listen\", \"silent\")\nprint(result)  # Output: True\n\nresult = check_permutation(\"hello\", \"world\")\nprint(result)  # Output: False"}
{"task_id": 533, "completion": "def remove_datatype(test_tup):\n    res = []\n    for ele in test_tup:\n        if not isinstance(ele, int):\n            res.append(ele)\n    return tuple(res)\n\n# Example usage:\n\ntest_tup = (1, 2, 'a', 3.5, 'b', 4, 'c', 5.5)\nresult = remove_datatype(test_tup)\nprint(result)  # Output: (1, 2, 'a', 'b', 4, 'c', 5.5)"}
{"task_id": 534, "completion": "def search_literal(pattern, text):\n    start_loc = text.find(pattern)\n    if start_loc == -1:\n        return \"Not Found\"\n    return f\"Found '{pattern}' in '{text}' at index {start_loc}\"\n\n# Example usage:\nresult = search_literal(\"apple\", \"I have an apple and a banana.\")\nprint(result)  # Output: Found 'apple' in 'I have an apple and a banana.' at index 10"}
{"task_id": 535, "completion": "import math\n\ndef surface_area_cylinder(r, h):\n    top_surface_area = math.pi * r ** 2\n    bottom_surface_area = math.pi * r ** 2\n    total_surface_area = 2 * top_surface_area + 2 * bottom_surface_area\n    return total_surface_area\n\n# Example usage:\nr = 3\nh = 5\nprint(surface_area_cylinder(r, h))  # Output should be the total surface area of the cylinder"}
{"task_id": 536, "completion": "def every_nth(items, nth):\n    return [item for i, item in enumerate(items) if i % nth == 0]\n\n# Example usage:\nprint(every_nth([1, 2, 3, 4, 5, 6], 2))  # Output: [1, 3, 5]\nprint(every_nth([1, 2, 3, 4, 5, 6], 3))  # Output: [1, 4]"}
{"task_id": 537, "completion": "def first_repeated_word(str1):\n    temp = {}\n    for word in str1.split():\n        if word in temp:\n            return word\n        else:\n            temp[word] = 0\n    return 'None'\n\n# Example usage:\n\nprint(first_repeated_word(\"Ravi had been saying that he had been there\"))  # Output: \"had\"\nprint(first_repeated_word(\"Ravi had been saying that he had been there too\"))  # Output: \"had\"\nprint(first_repeated_word(\"he had had he he\"))  # Output: \"he\"\nprint(first_repeated_word(\"a a b b\"))  # Output: \"a\""}
{"task_id": 538, "completion": "def string_list_to_tuple(str_list):\n    # Convert the list to a tuple\n    result_tuple = tuple(str_list)\n    # Return the tuple\n    return result_tuple\n\n# Example usage:\nstring_list = [\"apple\", \"banana\", \"cherry\"]\nresult_tuple = string_list_to_tuple(string_list)\nprint(result_tuple)  # Output: ('apple', 'banana', 'cherry')"}
{"task_id": 539, "completion": "def power_base_index(bases, index):\n    return list(map(pow, bases, index))\n\n# Example usage:\n\nbases = [2, 3, 4]\nindex = [3, 2, 1]\nprint(power_base_index(bases, index))  # Output: [8, 9, 4]"}
{"task_id": 540, "completion": "def find_Diff(arr, n):\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    values = list(freq.values())\n    max_freq = max(values)\n    min_freq = min(values)\n    \n    return max_freq - min_freq\n```\n\nThis function first creates a frequency dictionary to count the occurrences of each element in the array. Then, it extracts the frequencies and finds the maximum and minimum frequencies. Finally, it returns the difference between the maximum and minimum frequencies.\n\nHere's how you can use this function:\n\n```python\narr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nn = len(arr)\nprint(find_Diff(arr, n))  # Output will be 3\n```\n\nIn this example, the array `[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]` has the following frequencies: 1 appears once, 2 appears twice, 3 appears three times, and 4 appears four times. The maximum frequency is 4 and the minimum frequency is 1. The difference between the maximum and minimum frequencies is `4 - 1 = 3`."}
{"task_id": 541, "completion": "def is_abundant(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors > n\n\n# Explanation:\n\n# 1. Initialize `sum_of_divisors` to 0. This variable will hold the sum of all divisors of the given number `n`.\n\n# 2. Use a for loop to iterate through all numbers from 1 to `n-1`.\n\n# 3. Inside the loop, check if `i` is a divisor of `n` (i.e., `n % i == 0`). If it is, add `i` to `sum_of_divisors`.\n\n# 4. After the loop, check if `sum_of_divisors` is greater than `n`. If it is, return `True`, indicating that `n` is an abundant number. Otherwise, return `False`.\n\n# Example usage:\n\nprint(is_abundant(12))  # True, because the sum of divisors (1, 2, 3, 4, 6) is 16, which is greater than 12\nprint(is_abundant(15))  # False, because the sum of divisors (1, 3, 5) is 9, which is not greater than 15"}
{"task_id": 542, "completion": "import re\n\ndef replace_special_chars(text):\n    # Use regex to replace spaces, commas, and dots with a colon\n    replaced_text = re.sub(r'[,.]', ':', text)\n    return replaced_text\n\n# Example usage:\ninput_string = \"Hello, world. This is a test.\"\noutput_string = replace_special_chars(input_string)\nprint(output_string)  # Output: Hello:world:This:is:a:test:"}
{"task_id": 543, "completion": "def add_and_count_digits(num1, num2):\n    # Add the two numbers\n    sum_num = num1 + num2\n    \n    # Convert the sum to a string to count the digits\n    sum_str = str(sum_num)\n    \n    # Count the number of digits\n    num_digits = len(sum_str)\n    \n    # Return the number of digits\n    return num_digits\n\n# Example usage:\nnum1 = 123\nnum2 = 456\nresult = add_and_count_digits(num1, num2)\nprint(\"Number of digits in the sum:\", result)"}
{"task_id": 544, "completion": "def flatten_tuple(test_list):\n    res = ''.join(str(ele) for tup in test_list for ele in tup)\n    return res\n\n# Example usage:\n\ntest_list = [(1, 2), (3, 4), (5, 6)]\nprint(flatten_tuple(test_list))  # Output: \"123456\""}
{"task_id": 545, "completion": "def toggle_first_last_bits(n):\n    if n == 0:\n        return 0\n    \n    # Set all bits except first and last to zero\n    all_bits_set = (1 << (len(bin(n)) - 2)) - 1\n    # Toggle first and last bits\n    toggled_bits = n ^ all_bits_set\n    return toggled_bits\n\n# Example usage:\nnumber = 29  # Binary: 11101\nresult = toggle_first_last_bits(number)\nprint(f\"Original number: {number} (Binary: {bin(number)})\")\nprint(f\"Toggled number: {result} (Binary: {bin(result)})\")"}
{"task_id": 546, "completion": "def last_occurrence(str1, x):\n    index = -1\n    for i in range(len(str1)):\n        if str1[i] == x:\n            index = i\n    if index == -1:\n        return \"Not Found\"\n    else:\n        return index\n\n# Example usage:\n\nprint(last_occurrence(\"hello world\", \"o\"))  # Output: 7\nprint(last_occurrence(\"hello world\", \"x\"))  # Output: Not Found"}
{"task_id": 547, "completion": "def sum_of_hamming_distances(n):\n    def hamming_distance(x, y):\n        return bin(x ^ y).count('1')\n    \n    total_distance = 0\n    for i in range(n + 1):\n        for j in range(i + 1, n + 1):\n            total_distance += hamming_distance(i, j)\n    \n    return total_distance\n\n# Example usage:\nn = 5\nprint(sum_of_hamming_distances(n))  # Output: 8"}
{"task_id": 548, "completion": "def longest_increasing_subsequence(sequence):\n    if not sequence:\n        return 0\n    \n    n = len(sequence)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if sequence[i] > sequence[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n\n# Example usage:\nsequence = [10, 9, 2, 5, 3, 7, 101, 18]\nprint(longest_increasing_subsequence(sequence))  # Output: 4\n\n# Explanation:\n# The longest increasing subsequence is [2, 3, 7, 101]. Its length is 4.\n\n# Time Complexity:\n# The time complexity of this function is O(n^2), where n is the length of the sequence. This is because we have a nested loop where the outer loop runs n times and the inner loop runs up to n times.\n\n# Space Complexity:\n# The space complexity is O(n) due to the use of the dp array to store the lengths of the longest increasing subsequences up to each index."}
{"task_id": 549, "completion": "def odd_Sum(n):\n    sm = 0\n    for i in range(1, n + 1):\n        odd_num = 2 * i - 1\n        sm += odd_num ** 5\n    return sm\n\n# Example usage:\nn = 5\nprint(odd_Sum(n))  # Output will be the sum of fifth power of first 5 odd natural numbers"}
{"task_id": 550, "completion": "def find_max_element(arr):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        if arr[left] <= arr[right]:\n            return arr[left]\n        \n        mid = (left + right) // 2\n        next_element = (mid + 1) % len(arr)\n        prev_element = (mid - 1 + len(arr)) % len(arr)\n        \n        if arr[mid] <= arr[next_element] and arr[mid] <= arr[prev_element]:\n            return arr[mid]\n        elif arr[mid] <= arr[right]:\n            right = mid - 1\n        elif arr[mid] >= arr[left]:\n            left = mid + 1\n    \n    return -1\n\n# Example usage:\narr = [4, 5, 6, 7, 0, 1, 2]\nprint(find_max_element(arr))  # Output: 7"}
{"task_id": 551, "completion": "def extract_column(list1, N):\n    result = [i[N] for i in list1]\n    return result\n\n# Example usage:\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nN = 1\nprint(extract_column(list1, N))  # Output: [2, 5, 8]"}
{"task_id": 552, "completion": "def is_linear(seq):\n    if len(seq) < 2:\n        return True\n    diff = seq[1] - seq[0]\n    for i in range(2, len(seq)):\n        if seq[i] - seq[i-1]!= diff:\n            return False\n    return True\n```\n\nThis function checks if the sequence is linear by calculating the difference between the first two elements and then checking if all subsequent differences are the same. If they are, the sequence is linear; otherwise, it is not."}
{"task_id": 553, "completion": "def convert_tuple_to_float(test_tup):\n    # Your code here\n    return float(test_tup)\n\n# Example usage:\n\ntest_tup = (123.45,)\nresult = convert_tuple_to_float(test_tup)\nprint(result)  # Output: 123.45"}
{"task_id": 554, "completion": "def find_odd_numbers(mixed_list):\n    odd_numbers = []\n    for num in mixed_list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\n# Example usage:\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = find_odd_numbers(mixed_list)\nprint(odd_numbers)  # Output: [1, 3, 5, 7, 9]"}
{"task_id": 555, "completion": "def sum_difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n# Example usage:\nn = 5\nresult = sum_difference(n)\nprint(result)  # Output will be the difference between the sum of cubes and the sum of first n natural numbers"}
{"task_id": 556, "completion": "def count_odd_xor_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2!= 0:\n                count += 1\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(count_odd_xor_pairs(arr))  # Output will be 4"}
{"task_id": 557, "completion": "def toggle_case(s):\n    result = \"\"\n    for char in s:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n\n# Example usage:\ninput_string = \"Hello World!\"\noutput_string = toggle_case(input_string)\nprint(output_string)  # Output: \"hELLO wORLD!\""}
{"task_id": 558, "completion": "def digit_distance_nums(n1, n2):\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    if len(str_n1)!= len(str_n2):\n        raise ValueError(\"Both numbers must have the same number of digits.\")\n    \n    distance = 0\n    for i in range(len(str_n1)):\n        distance += abs(int(str_n1[i]) - int(str_n2[i]))\n    \n    return distance\n\n# Example usage:\n# print(digit_distance_nums(123, 256))  # Output: 7\n# print(digit_distance_nums(1234, 4321))  # Output: 12\n\n# Explanation:\n# The function `digit_distance_nums` takes two integers `n1` and `n2` as input.\n# It converts both numbers to strings to easily access each digit.\n# It checks if both numbers have the same number of digits, and if not, raises a ValueError.\n# It then iterates over the digits of both numbers, calculates the absolute difference between the corresponding digits, and sums these differences to get the total digit distance.\n# Finally, it returns the calculated digit distance."}
{"task_id": 559, "completion": "def max_sub_array_sum(a, size):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n\n# Example usage:\na = [-2, -3, 4, -1, -2, 1, 5, -3]\nsize = len(a)\nprint(max_sub_array_sum(a, size))  # Output: 7\n\n# Explanation:\n# The contiguous subarray [4, -1, -2, 1, 5] has the largest sum among all possible contiguous subarrays."}
{"task_id": 560, "completion": "def union_of_tuples(test_tup1, test_tup2):\n    res = tuple(set(test_tup1 + test_tup2))\n    return (res)\n\n# Example usage:\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (3, 4, 5)\nprint(union_of_tuples(test_tup1, test_tup2))  # Output: (1, 2, 3, 4, 5)"}
{"task_id": 561, "completion": "def assign_pairs(test_tup):\n    res = []\n    for idx, ele in enumerate(test_tup):\n        temp = list(ele)\n        temp[1], temp[-1] = temp[-1], temp[1]\n        res.append(tuple(temp))\n    return tuple(res)\n\n# Example usage:\n\ntest_tup = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(assign_pairs(test_tup))  # Output: ((1, 3, 2), (4, 6, 5), (7, 9, 8))"}
{"task_id": 562, "completion": "def max_length_sublist(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\n# Example usage:\n\nexample_list = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(max_length_sublist(example_list))  # Output: 4"}
{"task_id": 563, "completion": "def extract_values(text):\n    import re\n    # Use regular expression to find all matches\n    matches = re.findall(r'\"(.*?)\"', text)\n    return matches\n\n# Example usage:\ntext = 'Here are some values: \"apple\", \"banana\", \"cherry\".'\nvalues = extract_values(text)\nprint(values)  # Output: ['apple', 'banana', 'cherry']"}
{"task_id": 564, "completion": "def count_unequal_pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(count_unequal_pairs(arr, n))  # Output: 10"}
{"task_id": 565, "completion": "def split_string(string):\n    return [char for char in string]\n\n# Example usage:\n\ninput_string = \"hello\"\nresult = split_string(input_string)\nprint(result)  # Output: ['h', 'e', 'l', 'l', 'o']"}
{"task_id": 566, "completion": "def sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n\n# Example usage:\nnumber = 12345\nprint(sum_of_digits(number))  # Output: 15"}
{"task_id": 567, "completion": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Explanation:\n\n# The function `is_sorted` takes a list `lst` as input.\n# The `all` function is used to check if all elements in the list satisfy the condition specified in the generator expression.\n# The generator expression `lst[i] <= lst[i+1] for i in range(len(lst)-1)` iterates over the indices of the list (from 0 to len(lst)-2) and checks if each element is less than or equal to the next element.\n# If all elements satisfy this condition, the function returns `True`, indicating that the list is sorted in non-decreasing order. Otherwise, it returns `False`.\n\n# Example usage:\n\nprint(is_sorted([1, 2, 3, 4, 5]))  # Output: True\nprint(is_sorted([1, 3, 2, 4, 5]))  # Output: False"}
{"task_id": 568, "completion": "def empty_dict(num):\n    return [{} for _ in range(num)]\n\n# Example usage:\nnum_dicts = 3\nempty_dicts = empty_dict(num_dicts)\nprint(empty_dicts)  # Output: [{}, {}, {}]"}
{"task_id": 569, "completion": "def sort_sublists(lists):\n    for sublist in lists:\n        sublist.sort()\n    return lists\n\n# Example usage:\n\nlists = [['banana', 'apple', 'cherry'], ['dog', 'cat', 'elephant']]\nsorted_lists = sort_sublists(lists)\nprint(sorted_lists)\n\n# Output:\n# [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]"}
{"task_id": 570, "completion": "def remove_words(list1, remove_string):\n    result = []\n    for string in list1:\n        words = string.split()\n        filtered_words = [word for word in words if remove_string not in word]\n        result.append(' '.join(filtered_words))\n    return result\n\n# Example usage:\n\nlist_of_strings = [\"apple banana\", \"orange mango\", \"banana apple\"]\nremove_string = \"banana\"\n\nresult = remove_words(list_of_strings, remove_string)\nprint(result)  # Output: ['apple', 'orange mango', 'apple']"}
{"task_id": 571, "completion": "def max_disjoint_pairs_sum(arr, k):\n    if not arr:\n        return 0\n    \n    # Sort the array\n    arr.sort()\n    \n    # Initialize the sum\n    max_sum = 0\n    \n    # Initialize the previous pair end\n    prev_end = float('-inf')\n    \n    for i in range(len(arr)):\n        if arr[i] > prev_end:\n            # Add the current element to the sum\n            max_sum += arr[i]\n            # Update the previous pair end\n            prev_end = arr[i] + k\n    \n    return max_sum\n\n# Example usage:\narr = [1, 3, 2, 5, 4]\nk = 2\nprint(max_disjoint_pairs_sum(arr, k))  # Output: 10\n\n# Explanation:\n# The pairs formed are (1, 3) and (2, 5). The sum of these pairs is 1 + 3 + 2 + 5 = 11.\n# Since k = 2, we can increase the sum by 2 by choosing the pairs (1, 3) and (5, 7) which are not actually in the array.\n# The maximum possible sum of disjoint pairs is 10.\n\n# The function first sorts the array. Then, it iterates through the sorted array and adds the current element to the sum if it is greater than the previous pair's end (which is initially set to negative infinity). The previous pair's end is updated to the current element plus k. This ensures that the pairs are disjoint and the sum is maximized."}
{"task_id": 572, "completion": "def remove_duplicate(nums):\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n\n# Example usage:\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nunique_numbers = remove_duplicate(numbers)\nprint(unique_numbers)  # Output: [1, 2, 3, 4, 5]"}
{"task_id": 573, "completion": "def unique_product(nums):\n    unique_numbers = set(nums)  # Convert the list to a set to remove duplicates\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Example usage:\nnumbers = [1, 2, 2, 3, 4, 4, 5]\nresult = unique_product(numbers)\nprint(result)  # Output will be 60 because 1*2*3*4*5 = 120, but the number 4 is repeated so we take only one 4"}
{"task_id": 574, "completion": "import math\n\ndef surface_area_cylinder(r, h):\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area\n\n# Example usage:\nradius = 3\nheight = 5\nprint(surface_area_cylinder(radius, height))  # Output: 150.79644737231007"}
{"task_id": 575, "completion": "def find_nth_non_multiple(n, m):\n    count = 0\n    number = 1\n    while True:\n        if number % m!= 0:\n            count += 1\n        if count == n:\n            return number\n        number += 1\n\n# Example usage:\nn = 10\nm = 3\nprint(find_nth_non_multiple(n, m))  # Output: 10"}
{"task_id": 576, "completion": "def is_sub_array(A, B, n, m):\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n            if j == m:\n                return True\n        else:\n            i = i - j + 1\n            j = 0\n    return False\n\n# Explanation:\n\n# We define a function `is_sub_array` that takes four parameters: `A` (the main array), `B` (the subarray), `n` (length of `A`), and `m` (length of `B`).\n\n# We initialize two pointers, `i` and `j`, to 0. `i` will traverse through array `A`, and `j` will traverse through array `B`.\n\n# We use a `while` loop that continues as long as `i` is less than `n` and `j` is less than `m`.\n\n# Inside the loop, we check if the current elements of `A` and `B` are equal. If they are, we increment both `i` and `j`.\n\n# If `j` reaches `m`, it means all elements of `B` have been found in `A` in the correct order, so we return `True`.\n\n# If the current elements are not equal, we reset `j` to 0 and increment `i` by 1 minus `j` (to start checking from the next position in `A` where the match might start).\n\n# If the loop completes without finding `B` in `A`, we return `False`.\n\n# Example usage:\n\nA = [1, 2, 3, 4, 5]\nB = [2, 3]\nn = len(A)\nm = len(B)\n\nprint(is_sub_array(A, B, n, m))  # Output: True"}
{"task_id": 577, "completion": "def last_Digit_Factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10\n        if last_digit == 0:\n            break\n    return last_digit\n\n# Test cases:\n\nprint(last_Digit_Factorial(0))  # Output: 1\nprint(last_Digit_Factorial(1))  # Output: 1\nprint(last_Digit_Factorial(5))  # Output: 2\nprint(last_Digit_Factorial(10)) # Output: 0\nprint(last_Digit_Factorial(15)) # Output: 8\nprint(last_Digit_Factorial(20)) # Output: 0"}
{"task_id": 578, "completion": "def interleave(list1, list2):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n    return result\n\n# Example usage:\nlist1 = [1, 3, 5]\nlist2 = [2, 4, 6]\nprint(interleave(list1, list2))  # Output: [1, 2, 3, 4, 5, 6]"}
{"task_id": 579, "completion": "def dissimilar_elements(test_tup1, test_tup2):\n    res = tuple(set(test_tup1) ^ set(test_tup2))\n    return (res)\n\n# Example usage:\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (3, 4, 5, 6)\nprint(dissimilar_elements(test_tup1, test_tup2))\n\n# Output:\n\n# (1, 2, 5, 6)"}
{"task_id": 580, "completion": "def extract_even_elements(test_tup):\n    res = [ele for ele in test_tup if not isinstance(ele, tuple) and ele % 2 == 0]\n    return (res)\n\n# Example usage:\n\n# test_tup = (1, 2, (3, 4), 5, (6, 7, 8), 9)\n# print(extract_even_elements(test_tup))\n\n# This should output: [2, (6, 8)]\n\n# Explanation:\n\n# The function `extract_even_elements` takes a tuple `test_tup` as input.\n# It uses a list comprehension to iterate over each element in the tuple.\n# The list comprehension checks if an element is not a tuple and if it is even (i.e., divisible by 2 with no remainder).\n# The resulting list `res` contains only the even elements that are not tuples.\n# The function returns the list `res`.\n\n# Example usage:\n\ntest_tup = (1, 2, (3, 4), 5, (6, 7, 8), 9)\nprint(extract_even_elements(test_tup))  # Output: [2, (6, 8)]"}
{"task_id": 581, "completion": "def surface_area_square_pyramid(l, s):\n    return l * l + 2 * l * s\n\n# Example usage:\n\nlength = 4\nslant_height = 5\nprint(surface_area_square_pyramid(length, slant_height))  # Output: 44"}
{"task_id": 582, "completion": "def is_dict_empty(dict1):\n    if dict1:\n        return False\n    return True\n\n# Python function using not operator:\n\ndef is_dict_empty(dict1):\n    if not dict1:\n        return True\n    return False\n\n# Python function using bool operator:\n\ndef is_dict_empty(dict1):\n    return not bool(dict1)\n\n# Python function using len function:\n\ndef is_dict_empty(dict1):\n    return len(dict1) == 0\n\n# Python function using exception handling:\n\ndef is_dict_empty(dict1):\n    try:\n        if dict1:\n            return False\n    except:\n        return True\n\n# Example usage:\n\n# Define a dictionary\nmy_dict = {}\n\n# Check if the dictionary is empty\nresult = is_dict_empty(my_dict)\n\n# Print the result\nprint(result)  # Output: True\n\n# Define another dictionary\nmy_dict = {'a': 1, 'b': 2}\n\n# Check if the dictionary is empty\nresult = is_dict_empty(my_dict)\n\n# Print the result\nprint(result)  # Output: False"}
{"task_id": 583, "completion": "def catalan_number(n):\n    if n <= 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]\n\n# Example usage:\nn = 5\nprint(catalan_number(n))  # Output: 42"}
{"task_id": 584, "completion": "import re\n\ndef find_adverbs(text):\n    # Define the regex pattern for adverbs\n    pattern = r'\\b\\w+ly\\b'\n    \n    # Find all matches in the text\n    matches = re.finditer(pattern, text)\n    \n    # Prepare a list to store the results\n    result = []\n    \n    # Iterate over the matches and collect the positions and words\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        word = match.group()\n        result.append((start, end, word))\n    \n    return result\n\n# Example usage:\nsentence = \"He quickly and quietly finished his work.\"\nadverbs = find_adverbs(sentence)\nprint(adverbs)  # Output: [(2, 8, 'quickly'), (16, 23, 'quietly')]"}
{"task_id": 585, "completion": "import heapq\n\ndef expensive_items(items, n):\n    # Sort the items based on their price in descending order\n    expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n    return expensive_items\n```\n\nThis function uses the `heapq.nlargest` function to find the `n` largest items based on the price in descending order. The `key` parameter is used to specify the attribute by which the items should be sorted. In this case, the price attribute is used.\n\n# Example usage:\n\n```python\nitems = [\n    {'name': 'Laptop', 'price': 1200},\n    {'name': 'Smartphone', 'price': 800},\n    {'name': 'Tablet', 'price': 600},\n    {'name': 'Smartwatch', 'price': 300},\n    {'name': 'Headphones', 'price': 150}\n]\n\nn = 3\nexpensive_items_list = expensive_items(items, n)\nprint(expensive_items_list)\n```\n\nOutput:\n\n```\n[{'name': 'Laptop', 'price': 1200}, {'name': 'Smartphone', 'price': 800}, {'name': 'Tablet', 'price': 600}]\n```\n\nThis function will return the `n` most expensive items from the given list based on their price."}
{"task_id": 586, "completion": "def split_Arr(arr, n, k):\n    for i in range(0, k):\n        x = arr[0]\n        for j in range(0, n-1):\n            arr[j] = arr[j + 1]\n        arr[n - 1] = x\n    return arr\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6]\nn = len(arr)\nk = 2\nresult = split_Arr(arr, n, k)\nprint(result)  # Output: [3, 4, 5, 6, 1, 2]\n\n# Explanation:\n# The function `split_Arr` takes an array `arr`, its length `n`, and the number of elements `k` to be moved to the end.\n# It performs the following steps:\n# 1. For `k` iterations, it removes the first element of the array and appends it to the end.\n# 2. The loop runs `k` times, each time shifting the array elements to the left by one position and placing the first element at the end.\n# 3. Finally, it returns the modified array.\n# In the example usage, the array `[1, 2, 3, 4, 5, 6]` is split and the first 2 elements are moved to the end, resulting in `[3, 4, 5, 6, 1, 2]`."}
{"task_id": 587, "completion": "def list_to_tuple(lst):\n    return tuple(lst)\n\n# Example usage:\n\nexample_list = [1, 2, 3, 4]\nexample_tuple = list_to_tuple(example_list)\nprint(example_tuple)  # Output: (1, 2, 3, 4)"}
{"task_id": 588, "completion": "def find_diff(nums):\n    if len(nums) == 0:\n        return 0\n    return max(nums) - min(nums)\n\n# Example usage:\nnums = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nprint(find_diff(nums))  # Output: 8"}
{"task_id": 589, "completion": "def perfect_squares(a, b):\n    # Initialize an empty list to store perfect squares\n    perfect_sq = []\n    \n    # Start from the smallest integer greater than or equal to the square root of 'a'\n    start = int(a**0.5)\n    if start**2 < a:\n        start += 1\n    \n    # End at the largest integer less than or equal to the square root of 'b'\n    end = int(b**0.5)\n    \n    # Iterate through the range from'start' to 'end'\n    for i in range(start, end + 1):\n        perfect_sq.append(i**2)  # Append the square of 'i' to the list\n    \n    return perfect_sq\n\n# Example usage:\na = 10\nb = 100\nprint(perfect_squares(a, b))  # Output: [16, 25, 36, 49, 64, 81, 100]"}
{"task_id": 590, "completion": "import math\n\ndef polar_to_rectangular(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\n# Example usage:\nr = 2\ntheta = math.pi / 4\nprint(polar_to_rectangular(r, theta))  # Output: (1.4142135623730951, 1.4142135623730951)\n```\n\nThis function takes two arguments, `r` (the radius) and `theta` (the angle in radians), and returns the corresponding rectangular coordinates `(x, y)`. The `math.cos` and `math.sin` functions are used to compute the `x` and `y` coordinates from the polar coordinates."}
{"task_id": 591, "completion": "def swap_list(newList):\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n\n# Example usage:\nnewList = [1, 2, 3, 4, 5]\nprint(swap_list(newList))  # Output: [5, 2, 3, 4, 1]"}
{"task_id": 592, "completion": "def sum_of_product_of_binomial_coefficients(n):\n    result = 0\n    for k in range(n + 1):\n        result += comb(n, k) * comb(n, n - k)\n    return result\n\n# Example usage:\nn = 5\nprint(sum_of_product_of_binomial_coefficients(n))  # Output should be 203\n```\n\n# Explanation:\n\n1. **Importing `comb` from `math`**: The `comb` function from the `math` module is used to compute binomial coefficients.\n2. **Function Definition**: The function `sum_of_product_of_binomial_coefficients(n)` is defined to compute the sum of the product of binomial coefficients.\n3. **Initialization**: A variable `result` is initialized to 0 to store the sum.\n4. **Loop Through Range**: A `for` loop runs from `0` to `n` (inclusive). For each `k`, it calculates the product of `comb(n, k)` and `comb(n, n - k)`.\n5. **Summing the Products**: The product is added to `result`.\n6. **Return Result**: The function returns the final sum.\n\n# Example Usage:\n\n- For `n = 5`, the function calculates the sum of `comb(5, k) * comb(5, 5 - k)` for `k` from `0` to `5`.\n- The binomial coefficients are computed as follows:\n  - `comb(5, 0) * comb(5, 5) = 1 * 1 = 1`\n  - `comb(5, 1) * comb(5, 4) = 5 * 5 = 25`\n  - `comb(5, 2) * comb(5, 3) = 10 * 10 = 100`\n  - `comb(5, 3) * comb(5, 2) = 10 * 10 = 100`\n  - `comb(5, 4) * comb(5, 1) = 5 * 5 = 25`\n  - `comb(5"}
{"task_id": 593, "completion": "def remove_leading_zeroes(ip_address):\n    # Split the IP address into its octets\n    octets = ip_address.split('.')\n    \n    # Remove leading zeroes from each octet\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    \n    # Join the cleaned octets back into an IP address\n    cleaned_ip_address = '.'.join(cleaned_octets)\n    \n    return cleaned_ip_address\n\n# Example usage:\nip_address = \"192.168.010.001\"\ncleaned_ip = remove_leading_zeroes(ip_address)\nprint(cleaned_ip)  # Output: \"192.168.10.1\""}
{"task_id": 594, "completion": "def difference_even_odd(numbers):\n    even_number = None\n    odd_number = None\n    \n    for number in numbers:\n        if number % 2 == 0:\n            if even_number is None:\n                even_number = number\n            elif odd_number is not None:\n                break\n        else:\n            if odd_number is None:\n                odd_number = number\n            elif even_number is not None:\n                break\n    \n    if even_number is not None and odd_number is not None:\n        return even_number - odd_number\n    else:\n        return None\n\n# Example usage:\nnumbers = [3, 2, 5, 8, 1, 7]\nresult = difference_even_odd(numbers)\nprint(result)  # Output: 6 (8 - 2)"}
{"task_id": 595, "completion": "def min_Swaps(str1, str2):\n    # Initialize a counter for the number of swaps\n    swaps = 0\n    \n    # Iterate over the characters of the strings\n    for i in range(len(str1)):\n        # If the characters are different and not both are '0' or '1'\n        if str1[i]!= str2[i] and (str1[i] == '0' or str2[i] == '0'):\n            swaps += 1\n    \n    return swaps\n\n# Example usage:\nstr1 = \"1100\"\nstr2 = \"1001\"\nprint(min_Swaps(str1, str2))  # Output: 1\n```\n\nExplanation:\n1. Initialize a counter `swaps` to keep track of the number of swaps needed.\n2. Iterate over the characters of the strings.\n3. For each character position, check if the characters in `str1` and `str2` are different and if one of them is '0'.\n4. If the condition is met, increment the `swaps` counter.\n5. Return the total number of swaps.\n\nThis function assumes that the input strings are of the same length and contain only '0' and '1' characters."}
{"task_id": 596, "completion": "def tuple_size(tup):\n    return len(tup)\n\n# Example usage:\nexample_tuple = (1, 2, 3, 4, 5)\nprint(tuple_size(example_tuple))  # Output: 5"}
{"task_id": 597, "completion": "def kth_element(arr1, arr2, n, m, k):\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < m:\n        if arr1[i] < arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n\n    while i < n:\n        count += 1\n        if count == k:\n            return arr1[i]\n        i += 1\n\n    while j < m:\n        count += 1\n        if count == k:\n            return arr2[j]\n        j += 1\n\n# Example usage:\narr1 = [2, 3, 6, 7, 9]\narr2 = [1, 4, 8, 10]\nn = len(arr1)\nm = len(arr2)\nk = 5\nprint(kth_element(arr1, arr2, n, m, k))  # Output: 6\n\n# Explanation:\n# The function `kth_element` takes two sorted arrays `arr1` and `arr2`, their lengths `n` and `m`, and an integer `k`.\n# It initializes two pointers `i` and `j` to traverse `arr1` and `arr2` respectively.\n# It also initializes a `count` variable to keep track of the number of elements merged so far.\n# It then iterates through both arrays, comparing the current elements and incrementing the count each time.\n# If the count matches `k`, it returns the current element.\n# If one of the arrays is exhausted, it continues to traverse the other array until the count matches `k`.\n# Finally, it returns the kth element found."}
{"task_id": 598, "completion": "def armstrong(n):\n    temp = n\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if n == sum:\n        return True\n    else:\n        return False\n\n# Test the function:\nnum = int(input(\"Enter a number: \"))\nif armstrong(num):\n    print(num, \"is an Armstrong number\")\nelse:\n    print(num, \"is not an Armstrong number\")"}
{"task_id": 599, "completion": "def sum_avg(n):\n    sum_num = (n * (n + 1)) // 2\n    avg = sum_num / n\n    return sum_num, avg\n\n# Example usage:\nn = 5\nresult = sum_avg(n)\nprint(\"Sum:\", result[0])\nprint(\"Average:\", result[1])"}
{"task_id": 600, "completion": "def even_or_odd(n):\n    if n & 1 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Explanation:\n\n# The function `even_or_odd` takes an integer `n` as input.\n# It uses the bitwise AND operator `&` to check the least significant bit of the number.\n# The expression `n & 1` will be 0 if the number is even, and 1 if the number is odd.\n# If `n & 1` is 0, the function returns \"Even\". Otherwise, it returns \"Odd\".\n\n# Example usage:\n\nprint(even_or_odd(4))  # Output: Even\nprint(even_or_odd(7))  # Output: Odd"}
{"task_id": 601, "completion": "def max_chain_length(pairs):\n    # Sort the pairs based on the first element\n    pairs.sort(key=lambda x: x[0])\n    \n    # Initialize the DP array\n    n = len(pairs)\n    dp = [1] * n\n    \n    # Compute the maximum chain length\n    for i in range(1, n):\n        for j in range(i):\n            if pairs[j][1] < pairs[i][0]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    # Return the maximum value in dp array\n    return max(dp)\n\n# Example usage:\npairs = [(5, 24), (15, 25), (27, 40), (50, 60)]\nprint(max_chain_length(pairs))  # Output: 3"}
{"task_id": 602, "completion": "def first_repeated_char(str1):\n    temp = {}\n    for ch in str1:\n        if ch in temp:\n            return ch\n        else:\n            temp[ch] = 0\n    return 'None'\n\nprint(first_repeated_char(\"abcdabcd\"))\nprint(first_repeated_char(\"abcd\"))\n\n# Explanation:\n\n# 1. Define the function `first_repeated_char` that takes a string `str1` as an argument.\n# 2. Create an empty dictionary `temp`.\n# 3. Iterate over each character `ch` in the string `str1`.\n# 4. Check if the character `ch` is already in the dictionary `temp`.\n# 5. If it is, return the character `ch` as it is the first repeated character.\n# 6. If it is not, add the character `ch` to the dictionary `temp` with a value of 0.\n# 7. If the loop completes without finding a repeated character, return 'None'.\n# 8. Test the function with two examples: \"abcdabcd\" and \"abcd\"."}
{"task_id": 603, "completion": "def get_lucid_number(n):\n    # Initialize the first lucid number\n    lucid_numbers = [2]\n    # Start checking from the next integer after 2\n    num = 3\n    \n    while True:\n        is_lucid = True\n        # Check if num is divisible by any of the lucid numbers found so far\n        for lucid in lucid_numbers:\n            if num % lucid == 0:\n                is_lucid = False\n                break\n        \n        if is_lucid:\n            lucid_numbers.append(num)\n            if num <= n:\n                return num\n        num += 1\n\n# Example usage:\nn = 30\nprint(get_lucid_number(n))  # Output: 23"}
{"task_id": 604, "completion": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string\n\n# Example usage:\ninput_string = \"Hello world this is a test\"\noutput_string = reverse_words(input_string)\nprint(output_string)  # Output: \"test a is this world Hello\""}
{"task_id": 605, "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n# Explanation:\n# 1. If the number is less than or equal to 1, it is not a prime number.\n# 2. If the number is 2 or 3, it is a prime number.\n# 3. If the number is divisible by 2 or 3, it is not a prime number.\n# 4. For numbers greater than 3, we check divisibility starting from 5 and increment by 6 (i.e., check i and i+2) up to the square root of the number.\n# 5. If the number is not divisible by any of these numbers, it is a prime number.\n\n# Example usage:\nprint(is_prime(2))  # True\nprint(is_prime(17)) # True\nprint(is_prime(18)) # False"}
{"task_id": 606, "completion": "import math\ndef degree_to_radian(degree):\n    radian = degree * (math.pi / 180)\n    return radian\n\n# Example usage:\ndegree = 45\nradian = degree_to_radian(degree)\nprint(f\"{degree} degrees is equal to {radian} radians.\")"}
{"task_id": 607, "completion": "import re\n\ndef search_literal(pattern, text):\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None\n\n# Example usage:\ntext = \"Hello, welcome to the world of Python.\"\npattern = \"welcome\"\nlocation = search_literal(pattern, text)\nif location:\n    print(f\"Pattern '{pattern}' found at index {location[0]}-{location[1]}\")\nelse:\n    print(f\"Pattern '{pattern}' not found\")\n\n# This function uses the `re.search` method from the `re` module to find the first occurrence of the pattern in the text. If the pattern is found, it returns a tuple containing the start and end indices of the match. If the pattern is not found, it returns `None`."}
{"task_id": 608, "completion": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        # Explicitly set the first element of the current row\n        # as the last element of the previous row\n        bell[i][0] = bell[i-1][i-1]\n        \n        # Fill the rest of the row based on the previous row\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Example usage:\nn = 5\nprint(bell_number(n))  # Output: 52"}
{"task_id": 609, "completion": "def find_minimum(f, a, b, tol=1e-5):\n    \"\"\"\n    Find the minimum of the periodic function f over the interval [a, b]\n    using the golden section search algorithm.\n    \n    Parameters:\n    f (function): The periodic function to minimize.\n    a (float): The start of the interval.\n    b (float): The end of the interval.\n    tol (float): The tolerance for the convergence criterion.\n    \n    Returns:\n    float: The minimum value of the function f in the interval [a, b].\n    \"\"\"\n    # Golden ratio\n    gr = (5**0.5 - 1) / 2\n    \n    # Initial points\n    x1 = a + (1 - gr) * (b - a)\n    x2 = a + gr * (b - a)\n    \n    # Function values at the initial points\n    f1 = f(x1)\n    f2 = f(x2)\n    \n    while abs(b - a) > tol:\n        if f1 < f2:\n            b = x2\n            x2 = x1\n            f2 = f1\n            x1 = a + (1 - gr) * (b - a)\n            f1 = f(x1)\n        else:\n            a = x1\n            x1 = x2\n            f1 = f2\n            x2 = a + gr * (b - a)\n            f2 = f(x2)\n    \n    return (f1 + f2) / 2\n```\n\n# Explanation:\n\n1. **Golden Ratio**: The golden ratio, `gr`, is approximately `0.618033988749895`.\n2. **Initial Points**: `x1` and `x2` are calculated using the golden ratio to divide the interval `[a, b]` into two parts.\n3. **Function Values**: `f1` and `f2` are the function values at `x1` and `x2`.\n4. **Convergence Loop**: The loop continues until the interval `[a, b]` is smaller than the tolerance `tol`.\n5. **Comparison**: If `f"}
{"task_id": 610, "completion": "def remove_kth_element(list1, K):\n    return [ele for (i, ele) in enumerate(list1) if (i+1) % K!= 0]\n\n# Example usage:\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nK = 3\nnew_list = remove_kth_element(list1, K)\nprint(new_list)  # Output: [1, 2, 4, 5, 7, 8, 10]"}
{"task_id": 611, "completion": "def max_column_value(test_list, N):\n    res = max(test_list, key=lambda ele: ele[N])\n    return (res)\n\n# Example usage:\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nN = 1\nprint(max_column_value(test_list, N))  # Output: (7, 8, 9)"}
{"task_id": 612, "completion": "def merge_elements(lst):\n    if not lst:\n        return []\n\n    first_elements = [sublist[0] for sublist in lst]\n    last_elements = [sublist[-1] for sublist in lst]\n\n    return [first_elements, last_elements]\n\n# Example usage:\n\nexample_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nresult = merge_elements(example_list)\nprint(result)  # Output: [[1, 4, 7], [3, 6, 9]]"}
{"task_id": 613, "completion": "def max_value(records):\n    # Initialize the maximum value to None\n    max_val = None\n    \n    # Iterate over each record in the list\n    for record in records:\n        # Check if max_val is None or the current record value is greater than max_val\n        if max_val is None or record[1] > max_val:\n            # Update max_val with the current record value\n            max_val = record[1]\n    \n    # Return the maximum value found\n    return max_val\n\n# Example usage:\nrecords = [('Alice', 85), ('Bob', 92), ('Charlie', 78), ('David', 95)]\nprint(max_value(records))  # Output: 95"}
{"task_id": 614, "completion": "def cumulative_sum(test_list):\n    res = [sum(x) for x in test_list]\n    return res\n\n# Example usage:\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nprint(cumulative_sum(test_list))  # Output: [6, 15, 24]"}
{"task_id": 615, "completion": "def average_value(test_tup):\n    res = tuple(sum(ele) for ele in zip(*test_tup))\n    avg = tuple(round(sum(sub) / len(sub), 3) for sub in res)\n    return (avg)\n\n# Example usage:\n\ntest_tup = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(average_value(test_tup))  # Output: (4.0, 5.0, 6.0)"}
{"task_id": 616, "completion": "def mod_tuple(test_tup1, test_tup2):\n    \n    # result tuple\n    res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n    \n    return (res)\n\n# Example usage:\n\ntest_tup1 = (10, 20, 30)\ntest_tup2 = (2, 3, 4)\n\n# Call the function\nresult = mod_tuple(test_tup1, test_tup2)\n\n# Print the result\nprint(result)"}
{"task_id": 617, "completion": "def min_jumps(target):\n    # Initialize the number of jumps\n    jumps = 0\n    # Initialize the current position\n    current_position = (0, 0)\n    \n    # Loop until the current position is the target position\n    while current_position!= target:\n        # Check if the target is in the same column or row\n        if current_position[0] == target[0] or current_position[1] == target[1]:\n            # Move to the target position\n            current_position = target\n        else:\n            # Move one step in the x direction and one step in the y direction\n            if current_position[0] < target[0]:\n                current_position = (current_position[0] + 1, current_position[1])\n            else:\n                current_position = (current_position[0] - 1, current_position[1])\n            if current_position[1] < target[1]:\n                current_position = (current_position[0], current_position[1] + 1)\n            else:\n                current_position = (current_position[0], current_position[1] - 1)\n        # Increment the number of jumps\n        jumps += 1\n    \n    return jumps\n\n# Example usage:\ntarget = (3, 4)\nprint(min_jumps(target))  # Output: 7\n\ntarget = (0, 0)\nprint(min_jumps(target))  # Output: 0\n\ntarget = (1, 1)\nprint(min_jumps(target))  # Output: 2"}
{"task_id": 618, "completion": "def divide_lists(list1, list2):\n    result = list(map(lambda x, y: x / y if y!= 0 else float('inf'), list1, list2))\n    return result\n\n# Example usage:\nlist1 = [10, 20, 30]\nlist2 = [2, 0, 5]\nprint(divide_lists(list1, list2))  # Output: [5.0, inf, 6.0]"}
{"task_id": 619, "completion": "def move_nums(test_str):\n    # Initialize two empty strings\n    char_part = ''\n    num_part = ''\n    \n    # Iterate over each character in the input string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            num_part += char\n        else:\n            char_part += char\n    \n    # Combine the character part and number part\n    result = char_part + num_part\n    return result\n\n# Test the function\ntest_str = \"abc123xyz456\"\nprint(move_nums(test_str))  # Output should be \"abcxyz123456\""}
{"task_id": 620, "completion": "def largest_subset(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    max_val = 1\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] % arr[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_val = max(max_val, dp[i])\n    return max_val\n\n# Example usage:\narr = [1, 2, 3, 4, 6, 12]\nprint(largest_subset(arr))  # Output: 4"}
{"task_id": 621, "completion": "def increment_numeric_values(strings, k):\n    result = []\n    for string in strings:\n        new_string = \"\"\n        for char in string:\n            if char.isdigit():\n                new_char = str(int(char) + k)\n                new_string += new_char\n            else:\n                new_string += char\n        result.append(new_string)\n    return result\n\n# Example usage:\nstrings = [\"a1b2c3\", \"x9y8z7\", \"hello5world\"]\nk = 2\nincremented_strings = increment_numeric_values(strings, k)\nprint(incremented_strings)  # Output: ['a3b4c5', 'x11y10z9', 'hello7world']"}
{"task_id": 622, "completion": "def find_median(arr1, arr2, n):\n    i = 0  # Pointer for arr1\n    j = 0  # Pointer for arr2\n    m1 = -1  # To store the (m1-1)th element\n    m2 = -1  # To store the (m2-1)th element\n\n    # Since there are 2*n elements, median will be average of elements at index n-1 and n in the combined array\n    count = 0\n    while count < n + 1:\n        count += 1\n\n        # If all elements of one array are processed, use next element from the other array\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n\n        # Pick the smaller element and move the pointer\n        if arr1[i] <= arr2[j]:\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n\n    return (m1 + m2) / 2\n\n# Example usage:\narr1 = [1, 12, 15, 26, 38]\narr2 = [2, 13, 17, 30, 45]\nn = len(arr1)\nprint(\"Median is:\", find_median(arr1, arr2, n))"}
{"task_id": 623, "completion": "def nth_num(nums,n):\n    result = list(map(lambda x: x**n,nums))\n    return result\n\n# Example usage:\n\nnums = [1, 2, 3, 4]\nn = 2\nprint(nth_num(nums, n))  # Output: [1, 4, 9, 16]"}
{"task_id": 624, "completion": "def upper_string(str):\n    return str.upper()\n\n# Example usage:\n\ninput_string = \"hello, world!\"\noutput_string = upper_string(input_string)\nprint(output_string)  # Output: \"HELLO, WORLD!\""}
{"task_id": 625, "completion": "def swap_list(newlist):\n    temp = newlist[0]\n    newlist[0] = newlist[-1]\n    newlist[-1] = temp\n    return newlist\n\n# Example usage:\n\n# Define the list\nmy_list = [1, 2, 3, 4, 5]\n\n# Call the function and print the result\nresult = swap_list(my_list)\nprint(result)  # Output: [5, 2, 3, 4, 1]"}
{"task_id": 626, "completion": "import math\n\ndef largest_triangle(r):\n    # The area of the largest triangle that can be inscribed in a semicircle is 2R^2\n    # where R is the radius of the semicircle\n    area = 2 * r * r\n    return area\n\n# Example usage:\nradius = 5\nprint(\"The area of the largest triangle that can be inscribed in a semicircle with radius\", radius, \"is\", largest_triangle(radius))"}
{"task_id": 627, "completion": "def find_missing(arr):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left\n\n# Example usage:\narr = [0, 1, 2, 6, 9, 11, 15]\nmissing_number = find_missing(arr)\nprint(f\"The smallest missing number is: {missing_number}\")"}
{"task_id": 628, "completion": "def replace_spaces(s):\n    return s.replace(\" \", \"%20\")\n\n# Example usage:\ninput_string = \"Hello World\"\noutput_string = replace_spaces(input_string)\nprint(output_string)  # Output: Hello%20World"}
{"task_id": 629, "completion": "def even_numbers(mixed_list):\n    even_nums = []\n    for num in mixed_list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n\n# Example usage:\nmixed_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(even_numbers(mixed_list))  # Output: [2, 4, 6, 8, 10]"}
{"task_id": 630, "completion": "def adjacent_coordinates(coordinate):\n    x, y = coordinate\n    return [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n\n# Example usage:\ncoordinate = (2, 3)\nprint(adjacent_coordinates(coordinate))\n# Output: [(1, 3), (3, 3), (2, 2), (2, 4)]"}
{"task_id": 631, "completion": "import re\n\ndef replace_whitespaces_and_underscores(text):\n    # Replace underscores with whitespaces\n    replaced_text = re.sub(r'_','', text)\n    # Replace whitespaces with underscores\n    final_text = re.sub(r' ', '_', replaced_text)\n    return final_text\n\n# Example usage:\ninput_string = \"Hello_world_this_is_a_test\"\noutput_string = replace_whitespaces_and_underscores(input_string)\nprint(output_string)  # Output: \"Hello world this is a test\"\n\n# Explanation:\n# 1. The `re.sub(r'_','', text)` function call replaces all underscores (`_`) with whitespaces (` `).\n# 2. The `re.sub(r' ', '_', replaced_text)` function call replaces all whitespaces (` `) with underscores (`_`).\n# 3. The function returns the final string after both replacements."}
{"task_id": 632, "completion": "def move_zeroes(nums):\n    # Initialize an index to keep track of the position to place non-zero elements\n    insert_pos = 0\n    \n    # Iterate through the list\n    for num in nums:\n        if num!= 0:\n            # Place non-zero elements at the insert_pos and increment insert_pos\n            nums[insert_pos] = num\n            insert_pos += 1\n    \n    # Fill the rest of the list with zeroes\n    for i in range(insert_pos, len(nums)):\n        nums[i] = 0\n    \n    return nums\n\n# Example usage:\nnums = [0, 1, 0, 3, 12]\nprint(move_zeroes(nums))  # Output: [1, 3, 12, 0, 0]"}
{"task_id": 633, "completion": "def sum_of_xor_pairs(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum\n\n# Example usage:\narr = [1, 2, 3]\nprint(sum_of_xor_pairs(arr))  # Output: 6"}
{"task_id": 634, "completion": "def even_power_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum += even_number ** 4\n    return sum\n\n# Example usage:\nn = 5\nprint(even_power_sum(n))  # Output: 22432"}
{"task_id": 635, "completion": "def heap_sort(iterable):\n    import heapq\n    h = []\n    for value in iterable:\n        heapq.heappush(h, value)\n    return [heapq.heappop(h) for i in range(len(h))]\n\n# Example usage:\nprint(heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]))\n\n# Output:\n# [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": 636, "completion": "def check_reciprocal(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive (real roots)\n    if discriminant >= 0:\n        # Calculate the roots\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        \n        # Check if the roots are reciprocals of each other\n        if root1 * root2 == 1:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Example usage:\na = 1\nb = -1\nc = 1\nprint(check_reciprocal(a, b, c))  # Output: False\n\na = 1\nb = 1\nc = 1\nprint(check_reciprocal(a, b, c))  # Output: True"}
{"task_id": 637, "completion": "def check_profit_loss(amount):\n    if amount > 0:\n        return \"Profit\"\n    elif amount < 0:\n        return \"Loss\"\n    else:\n        return \"No Profit No Loss\"\n\n# Example usage:\namount = 0\nresult = check_profit_loss(amount)\nprint(result)  # Output: No Profit No Loss\n\namount = 100\nresult = check_profit_loss(amount)\nprint(result)  # Output: Profit\n\namount = -50\nresult = check_profit_loss(amount)\nprint(result)  # Output: Loss"}
{"task_id": 638, "completion": "def wind_chill_index(temperature, wind_speed):\n    if temperature >= 0:\n        return \"Wind chill index is not applicable for temperatures at or above 0 degrees Celsius.\"\n    else:\n        wind_chill = 13.12 + 0.6215 * temperature - 11.37 * (wind_speed ** 0.16) + 0.3965 * temperature * (wind_speed ** 0.16)\n        return wind_chill\n\n# Example usage:\ntemperature = float(input(\"Enter temperature in degrees Celsius: \"))\nwind_speed = float(input(\"Enter wind speed in km/h: \"))\n\nresult = wind_chill_index(temperature, wind_speed)\nprint(result)"}
{"task_id": 639, "completion": "def sum_names_length(names):\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# Example usage:\nnames_list = [\"Alice\", \"bob\", \"Charlie\", \"dave\"]\nprint(sum_names_length(names_list))  # Output: 11 (Alice + Charlie)"}
{"task_id": 640, "completion": "def remove_parenthesis(s):\n    result = []\n    open_parenthesis = 0\n    for char in s:\n        if char == '(':\n            open_parenthesis += 1\n            result.append(char)\n        elif char == ')':\n            if open_parenthesis > 0:\n                open_parenthesis -= 1\n                result.append(char)\n    return ''.join(result)\n\n# Example usage:\nprint(remove_parenthesis(\"example (before) example\"))  # Output: \"example  example\"\nprint(remove_parenthesis(\"example (after) example\"))   # Output: \"example  example\"\nprint(remove_parenthesis(\"example (middle) example\"))  # Output: \"example  example\"\nprint(remove_parenthesis(\"example ((more words) here) example\"))  # Output: \"example  example\"\nprint(remove_parenthesis(\"(first group) (second group) (third group)\"))  # Output: \"  \""}
{"task_id": 641, "completion": "def nonagonal_number(n):\n    return (n * (7 * n - 5)) // 2\n\n# Example usage:\nprint(nonagonal_number(1))  # Output: 1\nprint(nonagonal_number(2))  # Output: 12\nprint(nonagonal_number(3))  # Output: 27\nprint(nonagonal_number(4))  # Output: 46\nprint(nonagonal_number(5))  # Output: 69"}
{"task_id": 642, "completion": "def remove_similar_rows(matrix):\n    unique_rows = []\n    for row in matrix:\n        if row not in unique_rows:\n            unique_rows.append(row)\n    return unique_rows\n\n# Example usage:\n\nmatrix = (\n    (1, 2, 3),\n    (4, 5, 6),\n    (1, 2, 3),\n    (7, 8, 9),\n    (4, 5, 6)\n)\n\nresult = remove_similar_rows(matrix)\nprint(result)  # Output: [(1, 2, 3), (4, 5, 6), (7, 8, 9)]"}
{"task_id": 643, "completion": "import re\n\ndef text_match(text):\n    patterns = r'\\Bz\\B'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\nprint(text_match(\"The quick brown fox jumps over the lazy dog.\"))\nprint(text_match(\"Python Exercises.\"))\n\n# Explanation:\n# The pattern \\Bz\\B is used to match the letter 'z' that is surrounded by word boundaries. \n# \\B is a non-word boundary, so this pattern ensures that 'z' is not at the start or end of the word.\n\n# The re.search() function is used to search the string for the first location where the regular expression pattern produces a match.\n\n# If a match is found, the function returns 'Found a match!'. Otherwise, it returns 'Not matched!'.\n\n# In the given example, the function is tested with two strings:\n# \"The quick brown fox jumps over the lazy dog.\" - This string contains the word \"jumps\", which contains 'z' and is not at the start or end, so it matches the pattern.\n# \"Python Exercises.\" - This string does not contain 'z' at all, so it does not match the pattern."}
{"task_id": 644, "completion": "def reverse_array_upto_position(arr, n):\n    return arr[:n][::-1] + arr[n:]\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6]\nn = 3\nprint(reverse_array_upto_position(arr, n))  # Output: [3, 2, 1, 4, 5, 6]"}
{"task_id": 645, "completion": "def product_kth_index(test_list, K):\n    res = 1\n    for idx, ele in enumerate(test_list):\n        if idx == K:\n            res *= ele\n    return res\n\n# Example usage:\n\ntest_list = (1, 2, 3, 4, 5)\nK = 2\nprint(product_kth_index(test_list, K))  # Output: 6 (3 * 2 * 1)"}
{"task_id": 646, "completion": "def count_cubes(n, k):\n    count = 0\n    for i in range(1, n - k + 2):\n        for j in range(1, n - k + 2):\n            for l in range(1, n - k + 2):\n                count += 1\n    return count\n\n# Example usage:\nn = 8\nk = 2\nprint(count_cubes(n, k))  # Output: 216"}
{"task_id": 647, "completion": "def split_uppercase(text):\n    result = []\n    current_word = \"\"\n    \n    for char in text:\n        if char.isupper():\n            if current_word:\n                result.append(current_word)\n                current_word = \"\"\n            current_word += char\n        else:\n            current_word += char\n    \n    if current_word:\n        result.append(current_word)\n    \n    return result\n\n# Example usage:\ntext = \"HelloWorld\"\nprint(split_uppercase(text))  # Output: ['Hello', 'World']"}
{"task_id": 648, "completion": "def exchange_position(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst\n\n# Example usage:\n\nexample_list = [1, 2, 3, 4, 5, 6]\nresult = exchange_position(example_list)\nprint(result)  # Output: [2, 1, 4, 3, 6, 5]"}
{"task_id": 649, "completion": "def sum_in_range(numbers, start, end):\n    if start < 0 or end >= len(numbers) or start > end:\n        return \"Invalid range\"\n    return sum(numbers[start:end+1])\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nstart = 2\nend = 6\nprint(sum_in_range(numbers, start, end))  # Output: 21 (3+4+5+6+7)"}
{"task_id": 650, "completion": "def are_equal(arr1, arr2):\n    # Check if lengths of both arrays are equal\n    if len(arr1)!= len(arr2):\n        return False\n    \n    # Sort both arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # Compare elements one by one\n    for i in range(len(arr1)):\n        if arr1[i]!= arr2[i]:\n            return False\n    \n    return True\n\n# Example usage:\narr1 = [1, 2, 3, 4]\narr2 = [4, 3, 2, 1]\nprint(are_equal(arr1, arr2))  # Output: True\n\narr1 = [1, 2, 3, 5]\narr2 = [4, 3, 2, 1]\nprint(are_equal(arr1, arr2))  # Output: False"}
{"task_id": 651, "completion": "def is_subset(tuple1, tuple2):\n    return set(tuple1).issubset(set(tuple2))\n\n# Example usage:\n\ntuple1 = (1, 2, 3)\ntuple2 = (1, 2, 3, 4, 5)\nprint(is_subset(tuple1, tuple2))  # Output: True\n\ntuple1 = (1, 2, 3)\ntuple2 = (4, 5, 6)\nprint(is_subset(tuple1, tuple2))  # Output: False"}
{"task_id": 652, "completion": "def flatten_tuple_matrix(matrix):\n    # Initialize an empty list to store the flattened tuples\n    flattened_list = []\n    \n    # Get the number of rows and columns in the matrix\n    num_rows = len(matrix)\n    num_cols = len(matrix[0]) if num_rows > 0 else 0\n    \n    # Iterate over each column index\n    for col_idx in range(num_cols):\n        # Initialize an empty tuple for the current column\n        column_tuple = ()\n        \n        # Iterate over each row in the matrix\n        for row in matrix:\n            # Append the element at the current column index to the column tuple\n            column_tuple += (row[col_idx],)\n        \n        # Append the column tuple to the flattened list\n        flattened_list.append(column_tuple)\n    \n    # Return the flattened list\n    return flattened_list\n\n# Example usage:\nmatrix = ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nprint(flatten_tuple_matrix(matrix))\n\n# Output:\n# [(1, 4, 7), (2, 5, 8), (3, 6, 9)]"}
{"task_id": 653, "completion": "def group_key_value_pairs(pairs):\n    grouped = defaultdict(list)\n    for key, value in pairs:\n        grouped[key].append(value)\n    return dict(grouped)\n\n# Example usage:\npairs = [('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5)]\nresult = group_key_value_pairs(pairs)\nprint(result)  # Output: {'a': [1, 3], 'b': [2, 4], 'c': [5]}"}
{"task_id": 654, "completion": "def rectangle_perimeter(length, width):\n    perimeter = 2 * (length + width)\n    return perimeter\n\n# Example usage:\nlength = 5\nwidth = 3\nprint(\"The perimeter of the rectangle is:\", rectangle_perimeter(length, width))"}
{"task_id": 655, "completion": "def sum_of_fifth_power(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n\n# Example usage:\nn = 5\nprint(sum_of_fifth_power(n))  # Output: 225 + 32 + 1 = 258\n\n# Explanation:\n# The function `sum_of_fifth_power` takes an integer `n` as input.\n# It initializes a variable `sum` to 0.\n# It then iterates over a range from 1 to `n` (inclusive) and for each number `i`, it calculates the fifth power (`i**5`) and adds it to `sum`.\n# Finally, it returns the value of `sum`.\n# In the example usage, `n` is 5, so the function calculates the sum of the fifth powers of the first 5 natural numbers, which are 1^5, 2^5, 3^5, 4^5, and 5^5. The result is 225 + 32 + 1 + 32 + 1 = 258."}
{"task_id": 656, "completion": "def min_absolute_difference(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    n = len(arr1)\n    min_sum = 0\n    for i in range(n):\n        min_sum += abs(arr1[i] - arr2[i])\n    return min_sum\n```\n\nThis function first sorts both arrays. Then, it calculates the sum of absolute differences between the corresponding elements of the two arrays.\n\nLet's break down the steps:\n\n1. **Sorting the Arrays**: By sorting both arrays, we ensure that the smallest elements are paired with each other, which minimizes the absolute difference.\n2. **Calculating the Sum of Absolute Differences**: We iterate through the arrays, summing the absolute differences between corresponding elements.\n\nThis approach ensures that the sum of absolute differences is minimized.\n\nHere is an example of how you can use this function:\n\n```python\narr1 = [1, 3, 5]\narr2 = [2, 4, 6]\nprint(min_absolute_difference(arr1, arr2))  # Output: 6\n```\n\nIn this example, the sorted arrays are `[1, 3, 5]` and `[2, 4, 6]`. The absolute differences are `|1-2| = 1`, `|3-4| = 1`, and `|5-6| = 1`. The sum of these differences is `1 + 1 + 1 = 6`."}
{"task_id": 657, "completion": "def first_Digit(n):\n    if n >= 1 and n <= 9:\n        return n\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n    while fact > 10:\n        fact //= 10\n    return fact % 10\n\n# Example usage:\nn = 5\nprint(first_Digit(n))  # Output: 3 (since factorial of 5 is 120, the first digit is 3)"}
{"task_id": 658, "completion": "def max_occurrences(items):\n    if not items:\n        return None\n\n    counts = {}\n    for item in items:\n        counts[item] = counts.get(item, 0) + 1\n\n    max_count = max(counts.values())\n    max_items = [item for item, count in counts.items() if count == max_count]\n\n    return max_items\n\n# Example usage:\nitems = [1, 3, 2, 1, 4, 1, 3, 2, 3, 3]\nprint(max_occurrences(items))  # Output: [3]"}
{"task_id": 659, "completion": "def print_duplicates(lst):\n    duplicates = []\n    for num in lst:\n        if lst.count(num) > 1 and num not in duplicates:\n            duplicates.append(num)\n    return duplicates\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 2, 5, 6, 3, 7]\nprint(\"Duplicates:\", print_duplicates(numbers))\n\n# Output:\n# Duplicates: [2, 3]"}
{"task_id": 660, "completion": "def choose_points(x1, x2, y1, y2):\n    if x1 <= y1 <= x2 or x1 <= y2 <= x2 or y1 <= x1 <= y2 or y1 <= x2 <= y2:\n        return False\n    else:\n        return True\n\n# Example usage:\n\n# Should return False as 3 lies in both ranges\nprint(choose_points(1, 5, 3, 7))\n\n# Should return True as no point lies in both ranges\nprint(choose_points(1, 5, 6, 8))"}
{"task_id": 661, "completion": "def max_sum_no_three_consecutive(arr, n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    \n    # Initialize the dp array\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    dp[2] = max(dp[1], max(arr[1] + arr[2], arr[0] + arr[2]))\n    \n    # Fill the dp array\n    for i in range(3, n):\n        dp[i] = max(max(dp[i-1], dp[i-2] + arr[i]), arr[i] + arr[i-1] + dp[i-3])\n    \n    return dp[n-1]\n\n# Example usage:\narr = [3, 2, 5, 10, 7]\nn = len(arr)\nprint(max_sum_no_three_consecutive(arr, n))  # Output: 15\n\n# Explanation:\n# The function uses dynamic programming to solve the problem. It initializes a dp array where dp[i] represents the maximum sum possible considering the first i elements of the array, with no three consecutive elements.\n# The base cases are handled for arrays of size 0, 1, and 2. For larger arrays, it iterates through the array and fills the dp array based on the recurrence relation:\n# dp[i] = max(dp[i-1], dp[i-2] + arr[i], arr[i] + arr[i-1] + dp[i-3])\n# The final answer is stored in dp[n-1], which represents the maximum sum possible for the entire array."}
{"task_id": 662, "completion": "def sort_list(dict1):\n    for key in dict1:\n        dict1[key].sort()\n    return dict1\n\n# Example usage:\n\ninput_dict = {\n    'a': [3, 1, 2],\n    'b': [4, 5, 6],\n    'c': [7, 8, 9]\n}\n\nsorted_dict = sort_list(input_dict)\nprint(sorted_dict)"}
{"task_id": 663, "completion": "def find_largest_k(x, y):\n    if y >= x:\n        return -1\n    if y == 0:\n        return x - 1\n    k = x - y\n    if k % x == y:\n        return k\n    else:\n        return -1\n\n# Example usage:\nprint(find_largest_k(10, 5))  # Output: 5\nprint(find_largest_k(10, 3))  # Output: 7\nprint(find_largest_k(10, 0))  # Output: 9\nprint(find_largest_k(10, 7))  # Output: -1\nprint(find_largest_k(10, 10)) # Output: -1"}
{"task_id": 664, "completion": "def average_even_numbers(n):\n    sum_even = 0\n    count_even = 0\n    \n    for num in range(2, n+1, 2):\n        sum_even += num\n        count_even += 1\n    \n    if count_even == 0:\n        return 0\n    else:\n        return sum_even / count_even\n\n# Example usage:\nn = 10\nprint(average_even_numbers(n))  # Output: 6.0\n\nn = 12\nprint(average_even_numbers(n))  # Output: 7.0"}
{"task_id": 665, "completion": "def shift_list(list1):\n    if len(list1) == 0:\n        return list1\n    first_element = list1[0]\n    return list1[1:] + [first_element]\n\n# Test cases:\n\nprint(shift_list([1, 2, 3, 4, 5]))  # Output: [2, 3, 4, 5, 1]\nprint(shift_list([10]))             # Output: [10]\nprint(shift_list([]))               # Output: []\nprint(shift_list([-1, -2, -3]))     # Output: [-2, -3, -1]"}
{"task_id": 666, "completion": "def count_char(string, char):\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n    return count\n\n# Test the function:\n\nstring = \"hello world\"\nchar = \"o\"\nprint(count_char(string, char))  # Output: 2"}
{"task_id": 667, "completion": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count\n\n# Example usage:\n\ns = \"Hello World\"\nprint(count_vowels(s))  # Output: 3"}
{"task_id": 668, "completion": "def remove_char(s, c):\n    result = \"\"\n    for i in range(len(s)):\n        if s[i] == c and i > 0 and s[i-1]!= c:\n            result += c\n        elif s[i]!= c:\n            result += s[i]\n    return result\n\n# Example usage:\ns = \"abccba\"\nc = \"c\"\nprint(remove_char(s, c))  # Output: \"abcb\""}
{"task_id": 669, "completion": "import re\n\ndef check_ip(ip):\n    pattern = re.compile(r\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\")\n    return pattern.match(ip) is not None\n\n# Test the function:\n\nip_addresses = [\"192.168.1.1\", \"255.255.255.255\", \"0.0.0.0\", \"256.256.256.256\", \"192.168.1\", \"192.168.1.1.1\", \"192.168.1.1 \"]\n\nfor ip in ip_addresses:\n    print(f\"{ip}: {check_ip(ip)}\")\n\n# Explanation:\n\n# 1. Import the `re` module for regular expressions.\n# 2. Define the `check_ip` function that takes an IP address as input.\n# 3. Create a regular expression pattern that matches a valid IP address.\n# 4. Use the `pattern.match` method to check if the IP address matches the pattern.\n# 5. Return `True` if the IP address is valid, otherwise return `False`.\n# 6. Test the function with a list of IP addresses to check if they are valid or not."}
{"task_id": 670, "completion": "def check_decreasing(seq):\n    for i in range(len(seq) - 1):\n        if seq[i] <= seq[i + 1]:\n            return False\n    return True\n\n# Example usage:\n\nsequence = [5, 4, 3, 2, 1]\nprint(check_decreasing(sequence))  # Output: True\n\nsequence = [1, 2, 3, 4, 5]\nprint(check_decreasing(sequence))  # Output: False\n\nsequence = [10, 5, 3, 1]\nprint(check_decreasing(sequence))  # Output: True\n\nsequence = [1, 5, 3, 2]\nprint(check_decreasing(sequence))  # Output: False"}
{"task_id": 671, "completion": "def set_right_most_unset_bit(n):\n    if n == 0:\n        return 1\n    if (n & (n + 1)) == 0:\n        return n\n    return n | (n + 1)\n\n# Explanation:\n\n# The function `set_right_most_unset_bit` takes an integer `n` as input.\n# If `n` is 0, it returns 1 because the rightmost unset bit in 0 is the bit at position 0 (which is 1).\n# If `n & (n + 1)` equals 0, it means there are no unset bits to the right of the rightmost set bit, so the function returns `n`.\n# Otherwise, the function returns `n | (n + 1)`, which sets the rightmost unset bit to 1.\n\n# Example usage:\n\nprint(set_right_most_unset_bit(18))  # Output: 23\nprint(set_right_most_unset_bit(12))  # Output: 15\nprint(set_right_most_unset_bit(0))   # Output: 1"}
{"task_id": 672, "completion": "def max_of_three( x, y, z ):\n    if (x > y) and (x > z):\n        return x\n    elif (y > x) and (y > z):\n        return y\n    else:\n        return z\n\n# Testing the function:\n\nprint(max_of_three(3, 1, 2)) # Should return 3\nprint(max_of_three(3, 3, 2)) # Should return 3\nprint(max_of_three(1, 1, 1)) # Should return 1\nprint(max_of_three(1, 2, 3)) # Should return 3"}
{"task_id": 673, "completion": "def convert(list):\n    # Initialize an empty string\n    s = [str(i) for i in list]\n    # Join list elements with empty string\n    res = int(\"\".join(s))\n    return(res)\n\n# Example usage:\n\n# List of integers\nmy_list = [1, 2, 3, 4]\n\n# Convert the list to a single integer\nresult = convert(my_list)\n\n# Print the result\nprint(result)  # Output: 1234"}
{"task_id": 674, "completion": "import collections\n\ndef remove_duplicates(string):\n    words = string.split()\n    unique_words = list(collections.OrderedDict.fromkeys(words).keys())\n    return''.join(unique_words)\n\n# Example usage:\ninput_string = \"Python is a programming language. Python is good. Python is easy.\"\nresult = remove_duplicates(input_string)\nprint(result)  # Output: Python is a programming language. Python is good. Python is easy."}
{"task_id": 675, "completion": "def add_integers(a, b):\n    sum = a + b\n    if sum in range(15, 20):\n        return 20\n    else:\n        return sum\n\n# Example usage:\nresult = add_integers(5, 10)\nprint(result)  # Output: 20\n\nresult = add_integers(3, 7)\nprint(result)  # Output: 10"}
{"task_id": 676, "completion": "import re\n\ndef remove_special_characters(text):\n    pattern = r'[^a-zA-Z0-9]'\n    cleaned_text = re.sub(pattern, '', text)\n    return cleaned_text\n\n# Example usage:\ninput_string = \"Hello, World! 123\"\ncleaned_string = remove_special_characters(input_string)\nprint(cleaned_string)  # Output: \"HelloWorld123\""}
{"task_id": 677, "completion": "def valid_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return \"Valid\"\n    else:\n        return \"Invalid\"\n\n# Explanation:\n\n# 1. Define the function `valid_triangle` with three parameters `a`, `b`, and `c`.\n# 2. Use an `if` statement to check if the sum of any two sides is greater than the third side.\n# 3. If the condition is true, return \"Valid\".\n# 4. Otherwise, return \"Invalid\".\n\n# Example usage:\n\nprint(valid_triangle(3, 4, 5))  # Should return \"Valid\"\nprint(valid_triangle(1, 2, 3))  # Should return \"Invalid\""}
{"task_id": 678, "completion": "def remove_spaces(string):\n    return string.replace(\" \", \"\")\n\n# Example usage:\ninput_string = \"Hello World\"\nresult = remove_spaces(input_string)\nprint(result)  # Output: \"HelloWorld\""}
{"task_id": 679, "completion": "def access_element_by_index(dictionary, index):\n    # Your code here\n```\n\n### Example usage:\n\n```python\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nindex = 1\nprint(access_element_by_index(my_dict, index))  # Output should be 2\n```\n\n### Explanation:\n\n1. The function `access_element_by_index` takes two parameters: `dictionary` (the dictionary to access) and `index` (the index of the key you want to access).\n2. The function should return the value of the key at the specified index.\n3. You can assume that the dictionary has at least one key-value pair.\n\n### Constraints:\n\n- The function should handle cases where the index is out of range by returning `None` or an appropriate error message.\n\nHere's the implementation:\n\n```python\ndef access_element_by_index(dictionary, index):\n    keys = list(dictionary.keys())\n    if index < len(keys):\n        return dictionary[keys[index]]\n    else:\n        return None\n\n# Example usage:\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nindex = 1\nprint(access_element_by_index(my_dict, index))  # Output should be 2\n```\n\nThis function first converts the dictionary keys to a list, then checks if the given index is within the range of the list. If it is, it returns the value associated with the key at that index. If the index is out of range, it returns `None`."}
{"task_id": 680, "completion": "def increasing_trend(nums):\n    for i in range(len(nums) - 1):\n        if nums[i] >= nums[i + 1]:\n            return False\n    return True\n\n# Example usage:\n\nnumbers = [1, 2, 3, 4, 5]\nprint(increasing_trend(numbers))  # Output: True\n\nnumbers = [1, 3, 2, 4, 5]\nprint(increasing_trend(numbers))  # Output: False"}
{"task_id": 681, "completion": "def smallest_prime_divisor(n):\n    if n <= 1:\n        return n\n    \n    # Check divisibility by 2\n    if n % 2 == 0:\n        return 2\n    \n    # Check divisibility by odd numbers\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    \n    # If no divisor found, n itself is prime\n    return n\n\n# Example usage:\nnumber = 37\nprint(smallest_prime_divisor(number))  # Output: 37\n\nnumber = 18\nprint(smallest_prime_divisor(number))  # Output: 2\n\nnumber = 91\nprint(smallest_prime_divisor(number))  # Output: 7"}
{"task_id": 682, "completion": "def multiply_list(lst1, lst2):\n    result = map(lambda x, y: x * y, lst1, lst2)\n    return list(result)\n\n# Example usage:\n\nlst1 = [1, 2, 3]\nlst2 = [4, 5, 6]\nprint(multiply_list(lst1, lst2))  # Output: [4, 10, 18]"}
{"task_id": 683, "completion": "def sum_Square(n):\n    # Check if the number is a perfect square\n    def is_perfect_square(x):\n        s = int(math.sqrt(x))\n        return s*s == x\n\n    # Iterate i from 0 to sqrt(n)\n    for i in range(int(math.sqrt(n)) + 1):\n        # Check if (n - i*i) is a perfect square\n        if is_perfect_square(n - i*i):\n            return True\n    return False\n\n# Example usage:\nimport math\nprint(sum_Square(5))  # Output: True (5 = 1^2 + 2^2)\nprint(sum_Square(17)) # Output: True (17 = 1^2 + 4^2)\nprint(sum_Square(18)) # Output: False"}
{"task_id": 684, "completion": "def count_char_in_repeated_string(s, x, n):\n    # Count the occurrences of character x in the original string s\n    count_x_in_s = s.count(x)\n    \n    # Calculate the number of times the string s is repeated\n    times_repeated = n // len(s)\n    \n    # Calculate the remaining characters that do not complete a full repetition\n    remaining_chars = n % len(s)\n    \n    # Count the occurrences of character x in the substring of remaining characters\n    count_x_in_remaining = s[:remaining_chars].count(x)\n    \n    # Calculate the total occurrences of character x in the repeated string\n    total_count = (times_repeated * count_x_in_s) + count_x_in_remaining\n    \n    return total_count\n\n# Example usage:\ns = \"abcac\"\nx = \"a\"\nn = 10\nprint(count_char_in_repeated_string(s, x, n))  # Output: 4"}
{"task_id": 685, "completion": "def sum_of_primes(n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    total_sum = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            total_sum += i\n    return total_sum\n\n# Example usage:\nn = 10\nprint(sum_of_primes(n))  # Output: 17 (2 + 3 + 5 + 7)"}
{"task_id": 686, "completion": "def frequency_element(lst):\n    frequency = {}\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n\n# Example usage:\n\nmy_list = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nresult = frequency_element(my_list)\nprint(result)  # Output: {1: 1, 2: 2, 3: 3, 4: 4}"}
{"task_id": 687, "completion": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n# Explanation:\n\n# The function `gcd` takes two integers `a` and `b` as input.\n# If `b` is 0, it means that `a` is the greatest common divisor, so the function returns `a`.\n# Otherwise, the function calls itself with `b` and the remainder of `a` divided by `b` (`a % b`).\n# This process continues until `b` becomes 0, at which point the function returns `a`, which is the greatest common divisor.\n\n# Example usage:\n\nprint(gcd(48, 18))  # Output: 6\nprint(gcd(56, 98))  # Output: 14"}
{"task_id": 688, "completion": "import cmath\n\ndef complex_length(a, b):\n    z = complex(a, b)\n    length = abs(z)\n    return length\n\n# Example usage:\nprint(complex_length(3, 4))  # Output: 5.0"}
{"task_id": 689, "completion": "def min_jumps(arr, n):\n    if n == 0:\n        return float('inf')\n    jumps = [0 for _ in range(n)]\n    for i in range(1, n):\n        jumps[i] = float('inf')\n        for j in range(i):\n            if i <= j + arr[j] and jumps[j]!= float('inf'):\n                jumps[i] = min(jumps[i], jumps[j] + 1)\n                break\n    return jumps[n - 1]\n```\n\n# Explanation:\n\n1. **Initialization**:\n   - `jumps` array is initialized to store the minimum number of jumps required to reach each index from the start.\n   - `jumps[0]` is set to 0 because no jumps are needed to stay at the start.\n\n2. **Filling the `jumps` array**:\n   - For each index `i` from 1 to `n-1`, initialize `jumps[i]` to infinity (`float('inf')`), indicating that the value is not yet determined.\n   - For each index `j` from 0 to `i-1`, check if `i` can be reached from `j` (i.e., `i <= j + arr[j]`).\n   - If reachable, update `jumps[i]` to be the minimum of its current value and `jumps[j] + 1`.\n\n3. **Return the result**:\n   - The function returns `jumps[n-1]`, which represents the minimum number of jumps required to reach the end of the array.\n\n# Example usage:\n\n```python\narr = [2, 3, 1, 1, 4]\nn = len(arr)\nprint(min_jumps(arr, n))  # Output: 2\n```\n\nThis function efficiently calculates the minimum number of jumps required to reach the end of the array using dynamic programming."}
{"task_id": 690, "completion": "def multiply_consecutive_numbers(numbers):\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i] * numbers[i + 1])\n    return result\n\n# Example usage:\nnumbers = [2, 3, 4, 5]\nprint(multiply_consecutive_numbers(numbers))  # Output: [6, 12, 20]"}
{"task_id": 691, "completion": "def group_elements(test_list):\n    res = {}\n    for sub in test_list:\n        res[sub[1]] = [ele for ele in test_list if ele[1] == sub[1]]\n    return res\n\n# Example usage:\ntest_list = [(1, 'a'), (2, 'b'), (3, 'a'), (4, 'b'), (5, 'c')]\nprint(group_elements(test_list))\n\n# Output:\n# {'a': [(1, 'a'), (3, 'a')], 'b': [(2, 'b'), (4, 'b')], 'c': [(5, 'c')]}\n\n# Explanation:\n# The function `group_elements` takes a list of tuples `test_list` as input.\n# It initializes an empty dictionary `res` to store the grouped elements.\n# It then iterates over each tuple `sub` in `test_list`.\n# For each tuple, it checks if the second element (`sub[1]`) is already a key in the dictionary `res`.\n# If it is not, it creates a new key with the value as an empty list.\n# It then appends the tuple to the list corresponding to the key `sub[1]`.\n# Finally, it returns the dictionary `res` containing the grouped elements."}
{"task_id": 692, "completion": "def last_Two_Digits_Factorial(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 2\n    fact = 1\n    for i in range(2, n + 1):\n        fact = (fact * i) % 100\n    return fact\n\n# Example usage:\nnumber = 10\nprint(last_Two_Digits_Factorial(number))  # Output: 38 (since 10! = 3628800, last two digits are 80)"}
{"task_id": 693, "completion": "import re\n\ndef remove_multiple_spaces(string):\n    return re.sub(' +','', string)\n\n# Example usage:\nstring = \"This  is   an example    string.\"\nresult = remove_multiple_spaces(string)\nprint(result)  # Output: \"This is an example string.\""}
{"task_id": 694, "completion": "def extract_unique_values(dictionary):\n    unique_values = set()\n    for key in dictionary:\n        values = dictionary[key]\n        for value in values:\n            unique_values.add(value)\n    return list(unique_values)\n\n# Example usage:\n\nexample_dict = {\n    'a': [1, 2, 3],\n    'b': [2, 3, 4],\n    'c': [4, 5, 6]\n}\n\nunique_values = extract_unique_values(example_dict)\nprint(unique_values)  # Output: [1, 2, 3, 4, 5, 6]"}
{"task_id": 695, "completion": "def check_elements(test_tup1, test_tup2):\n    res = all(ele2 > ele1 for ele1, ele2 in zip(test_tup1, test_tup2))\n    return res\n\n# Example usage:\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6, 7, 8)\n\nprint(check_elements(test_tup1, test_tup2))  # Output: True\n\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (1, 6, 7, 8)\n\nprint(check_elements(test_tup1, test_tup2))  # Output: False"}
{"task_id": 696, "completion": "def zip_lists(list1, list2):\n    # Initialize an empty list to store the zipped lists\n    zipped_list = []\n    \n    # Iterate over the indices of the lists\n    for i in range(max(len(list1), len(list2))):\n        # For each index, check if the index is within the bounds of both lists\n        if i < len(list1) and i < len(list2):\n            # If it is, zip the elements from both lists and append to the zipped list\n            zipped_list.append([list1[i], list2[i]])\n        elif i < len(list1):\n            # If the second list is shorter, just append the element from the first list\n            zipped_list.append([list1[i], None])\n        else:\n            # If the first list is shorter, just append the element from the second list\n            zipped_list.append([None, list2[i]])\n    \n    return zipped_list\n\n# Example usage:\nlist1 = [[1, 2], [3, 4], [5, 6]]\nlist2 = [[7, 8], [9, 10]]\nprint(zip_lists(list1, list2))\n\n# Output:\n# [[1, 7], [2, 8], [3, 9], [4, 10], [5, None], [6, None]]"}
{"task_id": 697, "completion": "def count_even_elements(lst):\n    even_count = len(list(filter(lambda x: (x%2==0), lst)))\n    return even_count\n\n# Example usage:\n\nprint(count_even_elements([1, 2, 3, 4, 5, 6]))  # Output: 3\nprint(count_even_elements([10, 15, 20, 25, 30]))  # Output: 4"}
{"task_id": 698, "completion": "def sort_dict_item(test_dict):\n    res = sorted(test_dict.items(), key = lambda ele: ele[0][0] * ele[0][1])\n    return str(res)\n\n# Example usage:\n\ntest_dict = {(2, 3): 'a', (1, 4): 'b', (3, 1): 'c'}\nprint(sort_dict_item(test_dict))\n\n# Output:\n# [((1, 4), 'b'), ((2, 3), 'a'), ((3, 1), 'c')]"}
{"task_id": 699, "completion": "def min_swaps(str1, str2):\n    # Check if the lengths of the two strings are different\n    if len(str1)!= len(str2):\n        return -1  # Not possible to convert\n    \n    # Count the number of mismatches between the two strings\n    mismatches = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            mismatches += 1\n    \n    # The number of swaps required is half the number of mismatches\n    # This is because each swap corrects two mismatches\n    return mismatches // 2\n\n# Example usage:\nstr1 = \"1100\"\nstr2 = \"1001\"\nprint(min_swaps(str1, str2))  # Output: 1"}
{"task_id": 700, "completion": "def count_elements_in_range(lst, min_val, max_val):\n    count = 0\n    for element in lst:\n        if min_val <= element <= max_val:\n            count += 1\n    return count\n\n# Example usage:\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nmin_value = 3\nmax_value = 7\n\nresult = count_elements_in_range(numbers, min_value, max_value)\nprint(result)  # Output: 5"}
{"task_id": 701, "completion": "def equilibrium_index(arr):\n    total_sum = sum(arr)\n    left_sum = 0\n    \n    for i in range(len(arr)):\n        total_sum -= arr[i]\n        \n        if left_sum == total_sum:\n            return i\n        \n        left_sum += arr[i]\n    \n    return -1\n\n# Example usage:\narr = [1, 3, 5, 2, 2]\nprint(equilibrium_index(arr))  # Output: 2"}
{"task_id": 702, "completion": "def find_min_removals(arr, k):\n    arr.sort()\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = i\n    for i in range(1, n):\n        while arr[i] - arr[dp[i]] > k:\n            dp[i] = dp[dp[i] - 1]\n        dp[i] = max(dp[i], dp[i - 1])\n    return n - max(dp)\n\n# Example usage:\narr = [1, 3, 4, 9, 10]\nk = 3\nprint(find_min_removals(arr, k))  # Output: 2"}
{"task_id": 703, "completion": "def check_key(dict, key):\n    if key in dict:\n        print(\"Key is present in the dictionary\")\n    else:\n        print(\"Key is not present in the dictionary\")\n\n# Example usage:\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\ncheck_key(my_dict, 'b')  # Output: Key is present in the dictionary\ncheck_key(my_dict, 'd')  # Output: Key is not present in the dictionary"}
{"task_id": 704, "completion": "def harmonic_sum(n):\n    if n < 2:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n\n# Example usage:\nn = 5\nprint(harmonic_sum(n))  # Output: 2.083333333333333"}
{"task_id": 705, "completion": "def sort_lists(lists):\n    return sorted(lists, key=lambda x: (len(x), x))\n\n# Example usage:\n\nlists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11], [12, 13, 14]]\nsorted_lists = sort_lists(lists)\nprint(sorted_lists)\n\n# Output:\n# [[4, 5], [10, 11], [1, 2, 3], [6, 7, 8, 9], [12, 13, 14]]"}
{"task_id": 706, "completion": "def is_subset(arr1, m, arr2, n):\n    if m < n:\n        return False\n    \n    # Sort both arrays\n    arr1.sort()\n    arr2.sort()\n    \n    # Initialize pointers for both arrays\n    i = 0\n    j = 0\n    \n    # Traverse both arrays\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        elif arr1[i] > arr2[j]:\n            return False\n    \n    # If we have traversed arr2 completely, then arr2 is a subset of arr1\n    return j == n\n\n# Example usage:\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4]\nm = len(arr1)\nn = len(arr2)\nprint(is_subset(arr1, m, arr2, n))  # Output: True\n\narr2 = [2, 3, 7]\nprint(is_subset(arr1, m, arr2, n))  # Output: False"}
{"task_id": 707, "completion": "def count_set_bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('1')\n    return count\n\n# Example usage:\nn = 5\nprint(count_set_bits(n))  # Output: 7"}
{"task_id": 708, "completion": "def string_to_list(string):\n    # Split the string into a list using split() method\n    lst = list(string.split())\n    return lst\n\n# Example usage:\n\ninput_string = \"Hello world this is a test\"\nresult = string_to_list(input_string)\nprint(result)  # Output: ['Hello', 'world', 'this', 'is', 'a', 'test']"}
{"task_id": 709, "completion": "def count_unique_keys(test_list):\n    res = {}\n    for key, val in test_list:\n        res[val] = res.get(val, 0) + 1\n    return res\n\n# Example usage:\n\ntest_list = [('a', 1), ('b', 2), ('a', 1), ('c', 3), ('b', 2)]\nprint(count_unique_keys(test_list))"}
{"task_id": 710, "completion": "def access_data(record):\n    if not record:\n        return None, None\n    return record[0], record[-1]\n\n# Example usage:\nrecord = (10, 20, 30, 40, 50)\nfirst, last = access_data(record)\nprint(\"First:\", first)\nprint(\"Last:\", last)\n\n# Explanation:\n# 1. The function `access_data` takes a tuple `record` as input.\n# 2. It checks if the tuple is empty. If it is, it returns `(None, None)`.\n# 3. Otherwise, it returns the first element (`record[0]`) and the last element (`record[-1]`) of the tuple.\n# 4. The example usage demonstrates how to call the function and print the results."}
{"task_id": 711, "completion": "def product_equal(n):\n    n_str = str(n)\n    product_even = 1\n    product_odd = 1\n    for i in range(len(n_str)):\n        if i % 2 == 0:\n            product_even *= int(n_str[i])\n        else:\n            product_odd *= int(n_str[i])\n    return product_even == product_odd\n\n# Example usage:\n\nprint(product_equal(1234))  # Output: False\nprint(product_equal(1221))  # Output: True"}
{"task_id": 712, "completion": "def remove_duplicates(list_of_lists):\n    seen = set()\n    result = []\n    for sublist in list_of_lists:\n        if tuple(sublist) not in seen:\n            seen.add(tuple(sublist))\n            result.append(list(sublist))\n    return result\n\n# Example usage:\n\nlist_of_lists = [[1, 2], [3, 4], [1, 2], [5, 6], [3, 4]]\nprint(remove_duplicates(list_of_lists))  # Output: [[1, 2], [3, 4], [5, 6]]"}
{"task_id": 713, "completion": "def check_valid_tuple(test_tup):\n    # Your code here\n    return all(isinstance(ele, (int, float)) for ele in test_tup)\n\n# Example usage:\ntest_tup = (1, 2.5, 'a', 3)\nprint(check_valid_tuple(test_tup))  # Output: False\n\ntest_tup = (1, 2.5, 3)\nprint(check_valid_tuple(test_tup))  # Output: True"}
{"task_id": 714, "completion": "def count_Distinct_Power_Prime_Factors(n):\n    count = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            count += 1\n            n //= i\n            while n % i == 0:\n                n //= i\n    return count\n```\n\nThis function counts the number of distinct powers of prime factors of a given number `n`. It works by iterating through all numbers from 2 to `n`, checking if they are factors of `n`, and then dividing `n` by these factors repeatedly to ensure only distinct prime factors are considered. The function then returns the count of distinct prime factors."}
{"task_id": 715, "completion": "def convert_string_to_tuple(string):\n    # Split the string into a list of integers\n    list_of_integers = [int(num) for num in string.split(',')]\n    # Convert the list of integers to a tuple\n    tuple_of_integers = tuple(list_of_integers)\n    return tuple_of_integers\n\n# Example usage:\ninput_string = \"1, 2, 3, 4, 5\"\nresult_tuple = convert_string_to_tuple(input_string)\nprint(result_tuple)  # Output: (1, 2, 3, 4, 5)"}
{"task_id": 716, "completion": "def rombus_perimeter(s1, s2):\n    perimeter = 2 * (s1 + s2)\n    return perimeter\n\n# Example usage:\n\nside1 = 5\nside2 = 4\nprint(rombus_perimeter(side1, side2))  # Output: 18"}
{"task_id": 717, "completion": "def calculate_std_dev(numbers):\n    n = len(numbers)\n    if n <= 1:\n        return 0\n    mean = sum(numbers) / n\n    variance = sum((x - mean) ** 2 for x in numbers) / (n - 1)\n    std_dev = variance ** 0.5\n    return std_dev\n\n# Example usage:\nnumbers = [10, 12, 23, 23, 16, 23, 21, 16]\nstd_dev = calculate_std_dev(numbers)\nprint(\"Standard Deviation:\", std_dev)"}
{"task_id": 718, "completion": "def alternate_elements(lst):\n    return [lst[i] for i in range(0, len(lst), 2)]\n\n# Example usage:\noriginal_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nresult_list = alternate_elements(original_list)\nprint(result_list)  # Output: [1, 3, 5, 7, 9]"}
{"task_id": 719, "completion": "def text_match(text):\n    patterns = 'ab*?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test the function:\n\nprint(text_match(\"ac\"))\nprint(text_match(\"abc\"))\nprint(text_match(\"abbc\"))\nprint(text_match(\"a\"))\nprint(text_match(\"\"))"}
{"task_id": 720, "completion": "def add_dictionary_to_tuple(test_tup, test_dict):\n    print(tuple(test_dict.items()) + test_tup)\n\n# Test the function:\ntest_tup = (1, 2, 3)\ntest_dict = {'a': 4, 'b': 5}\nadd_dictionary_to_tuple(test_tup, test_dict)\n\n# Output:\n# (('a', 4), ('b', 5), 1, 2, 3)"}
{"task_id": 721, "completion": "def max_average_path(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    \n    # Initialize the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    \n    # Initialize the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    \n    # Fill the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    \n    # Calculate the maximum average\n    max_average = dp[n-1][n-1] / (2*n - 1)\n    return max_average\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(max_average_path(matrix))  # Output should be the maximum average path\n```\n\nThis function calculates the maximum average path in a given square matrix by using dynamic programming. It initializes the first row and column, then fills the rest of the `dp` table by choosing the maximum value between the top and left neighbors, and finally calculates the maximum average by dividing the sum of the last cell by the number of steps (2*n - 1)."}
{"task_id": 722, "completion": "def filter_student_height_width(student_data):\n    # Initialize an empty dictionary to store the filtered data\n    filtered_data = {}\n    \n    # Iterate over each student in the input dictionary\n    for student, dimensions in student_data.items():\n        # Extract height and width from the current student's dimensions\n        height, width = dimensions\n        \n        # Check if both height and width are greater than or equal to 150\n        if height >= 150 and width >= 150:\n            # Add the student and their dimensions to the filtered data dictionary\n            filtered_data[student] = dimensions\n    \n    # Return the filtered data dictionary\n    return filtered_data\n\n# Example usage:\nstudent_data = {\n    'Alice': (160, 60),\n    'Bob': (155, 55),\n    'Charlie': (170, 70),\n    'David': (140, 65),\n    'Eve': (165, 65)\n}\n\nfiltered_students = filter_student_height_width(student_data)\nprint(filtered_students)\n\n# Output:\n# {'Alice': (160, 60), 'Charlie': (170, 70), 'Eve': (165, 65)}"}
{"task_id": 723, "completion": "def count_same_pair(list1, list2):\n    count = 0\n    for x, y in zip(list1, list2):\n        if x == y:\n            count += 1\n    return count\n\n# Test the function:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(count_same_pair(list1, list2))  # Output: 5\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nprint(count_same_pair(list1, list2))  # Output: 0\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 2, 1]\nprint(count_same_pair(list1, list2))  # Output: 3\n\n# Using map function:\n\ndef count_same_pair_map(list1, list2):\n    return sum(map(lambda x, y: x == y, list1, list2))\n\n# Test the function:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(count_same_pair_map(list1, list2))  # Output: 5\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\nprint(count_same_pair_map(list1, list2))  # Output: 0\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 2, 1]\nprint(count_same_pair_map(list1, list2))  # Output: 3"}
{"task_id": 724, "completion": "def sum_of_power(base, power):\n    result = base ** power\n    sum_of_digits = sum(int(digit) for digit in str(result))\n    return sum_of_digits\n\n# Example usage:\nbase = 2\npower = 10\nprint(sum_of_power(base, power))  # Output: 14\n\n# Explanation:\n# 1. Calculate the result of base raised to the power.\n# 2. Convert the result to a string to iterate over each digit.\n# 3. Convert each digit back to an integer and calculate the sum of all digits.\n# 4. Return the sum of the digits."}
{"task_id": 725, "completion": "import re\n\ndef extract_values(text):\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext = 'Here are some values: \"apple\", \"banana\", \"cherry\".'\nvalues = extract_values(text)\nprint(values)  # Output: ['apple', 'banana', 'cherry']"}
{"task_id": 726, "completion": "def multiply_adjacent_elements(test_tup):\n    res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup, test_tup[1:]))\n    return res\n\n# Example usage:\ntest_tup = (1, 2, 3, 4)\nprint(multiply_adjacent_elements(test_tup))  # Output: (2, 6, 12)"}
{"task_id": 727, "completion": "import re\n\ndef remove_special_characters(text):\n    # Use regex to remove all characters except letters and numbers\n    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text)\n    return cleaned_text\n\n# Example usage:\ninput_text = \"Hello, World! 123\"\ncleaned_text = remove_special_characters(input_text)\nprint(cleaned_text)  # Output: \"HelloWorld123\""}
{"task_id": 728, "completion": "def sum_elements(list1, list2):\n    return [a + b for a, b in zip(list1, list2)]\n\n# Example usage:\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nresult = sum_elements(list1, list2)\nprint(result)  # Output: [5, 7, 9]"}
{"task_id": 729, "completion": "def add_list(list1, list2):\n    result = map(lambda x, y: x + y, list1, list2)\n    return list(result)\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nprint(add_list(list1, list2))  # Output: [5, 7, 9]"}
{"task_id": 730, "completion": "def remove_consecutive_duplicates(numbers):\n    result = []\n    for num in numbers:\n        if not result or num!= result[-1]:\n            result.append(num)\n    return result\n\n# Example usage:\nnumbers = [1, 1, 2, 3, 3, 3, 4, 5, 5, 6]\nprint(remove_consecutive_duplicates(numbers))  # Output: [1, 2, 3, 4, 5, 6]"}
{"task_id": 731, "completion": "import math\n\ndef cone_lateral_surface_area(r, l):\n    return math.pi * r * l\n\n# Example usage:\nr = 3\nl = 5\nprint(cone_lateral_surface_area(r, l))  # Output: 47.12388980384689"}
{"task_id": 732, "completion": "def replace_special_chars(text):\n    replacements = {\n       '': ':',\n        ',': ':',\n        '.': ':'\n    }\n    return ''.join(replacements.get(char, char) for char in text)\n\n# Example usage:\ninput_text = \"Hello, world. This is a test.\"\noutput_text = replace_special_chars(input_text)\nprint(output_text)  # Output: \"Hello:world:This:is:a:test:\""}
{"task_id": 733, "completion": "def find_index(arr, n, x):\n    # Initialize the result index to -1 (not found)\n    result = -1\n    \n    # Initialize the left and right pointers\n    left, right = 0, n - 1\n    \n    # Perform binary search\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            right = mid - 1  # Look for the first occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n\n# Example usage:\narr = [1, 2, 2, 2, 3, 4, 5]\nn = len(arr)\nx = 2\nprint(find_index(arr, n, x))  # Output: 1"}
{"task_id": 734, "completion": "def sum_of_products(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    \n    return total_sum\n\n# Example usage:\n\narr = [1, 2, 3]\nresult = sum_of_products(arr)\nprint(result)  # Output: 23\n\n# Explanation:\n\n# The function `sum_of_products` calculates the sum of products of all possible subarrays of the input array `arr`.\n\n# 1. Initialize `total_sum` to 0, which will store the sum of all products of subarrays.\n# 2. Loop through each starting index `i` of the subarray.\n# 3. For each starting index `i`, initialize `current_product` to 1, which will store the product of the current subarray.\n# 4. Loop through each ending index `j` of the subarray starting from `i`.\n# 5. Multiply `current_product` by the element at index `j`.\n# 6. Add `current_product` to `total_sum`.\n# 7. After the inner loop completes, the outer loop moves to the next starting index and repeats the process.\n# 8. Finally, return `total_sum`.\n\n# The example usage calculates the sum of products of all possible subarrays of the array `[1, 2, 3]`, which results in 23."}
{"task_id": 735, "completion": "def toggle_middle_bits(n, l):\n    if l <= 2:\n        return n\n    x = 1\n    for i in range(1, l - 1):\n        x = (x << 1) | 1\n    return n ^ x\n\n# Example usage:\nn = 29  # Binary: 11101\nl = 5   # Length of the binary representation\nprint(toggle_middle_bits(n, l))  # Output: 22 (Binary: 10110)"}
{"task_id": 736, "completion": "def locate_insertion_point(sorted_list, value):\n    left = 0\n    right = len(sorted_list)\n    \n    while left < right:\n        mid = (left + right) // 2\n        if sorted_list[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Example usage:\nsorted_list = [1, 2, 4, 4, 5]\nvalue = 3\nprint(locate_insertion_point(sorted_list, value))  # Output: 2\n\n# Explanation:\n# The function uses binary search to find the insertion point for the specified value in the sorted list.\n# The left and right pointers define the search range.\n# The while loop continues until the search range is empty.\n# The mid point is calculated as the average of left and right pointers.\n# If the value at the mid point is less than the specified value, the search continues in the right half.\n# Otherwise, the search continues in the left half.\n# The function returns the left pointer, which indicates the insertion point."}
{"task_id": 737, "completion": "import re\n\ndef starts_with_vowel(string):\n    if re.match(r'^[aeiouAEIOU]', string):\n        return True\n    else:\n        return False\n\n# Test the function:\n\nprint(starts_with_vowel(\"apple\"))  # True\nprint(starts_with_vowel(\"banana\")) # False\nprint(starts_with_vowel(\"Elephant\")) # True\nprint(starts_with_vowel(\"123\"))    # False\nprint(starts_with_vowel(\"\"))       # False"}
{"task_id": 738, "completion": "def geometric_sum(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 / (2 ** n) + geometric_sum(n - 1)\n\n# Example usage:\nn = 5\nprint(geometric_sum(n))  # Output will be the sum of the first n terms of the geometric series\n\n# Explanation:\n\n# The function geometric_sum takes an integer n as input.\n# If n is 0, it returns 1, since the sum of the first term of a geometric series with ratio 1/2 is 1.\n# Otherwise, it returns the sum of the current term (1 / (2 ** n)) and the sum of the remaining terms, which is obtained by calling geometric_sum with n - 1.\n# This process continues recursively until n becomes 0."}
{"task_id": 739, "completion": "def find_index_of_smallest_triangular_number_with_n_digits(n):\n    # Initialize the index and the triangular number\n    index = 1\n    triangular_number = 1\n    \n    # Loop until the triangular number has n digits\n    while len(str(triangular_number)) < n:\n        index += 1\n        triangular_number += index\n    \n    return index\n\n# Example usage:\nn = 3\nprint(find_index_of_smallest_triangular_number_with_n_digits(n))  # Output: 10"}
{"task_id": 740, "completion": "def tuple_to_dict(test_tup):\n    res = {}\n    for ele in range(0, len(test_tup), 2):\n        res[test_tup[ele]] = test_tup[ele + 1]\n    return res\n\n# Example usage:\n\ntest_tup = (1, 'a', 2, 'b', 3, 'c')\nprint(tuple_to_dict(test_tup))\n\n# Output:\n\n{1: 'a', 2: 'b', 3: 'c'}"}
{"task_id": 741, "completion": "def all_characters_same(s):\n    return all(char == s[0] for char in s)\n\n# Example usage:\n\nprint(all_characters_same(\"aaaa\"))  # True\nprint(all_characters_same(\"abc\"))   # False\nprint(all_characters_same(\"aabbb\")) # False\nprint(all_characters_same(\"\"))      # True (empty string)"}
{"task_id": 742, "completion": "import math\n\ndef area_tetrahedron(side):\n    area = math.sqrt(3) * (side ** 2)\n    return area\n\n# Example usage:\n\nside = 3\nprint(\"Area of the tetrahedron:\", area_tetrahedron(side))\n\n# Explanation:\n\n# 1. Import the math module: This module provides access to the mathematical functions in Python.\n# 2. Define the function `area_tetrahedron(side)`: This function takes one parameter `side`, which represents the length of the side of the tetrahedron.\n# 3. Calculate the area: The area of a regular tetrahedron is given by the formula `sqrt(3) * (side ** 2)`.\n# 4. Return the calculated area.\n# 5. Example usage: Define the side length of the tetrahedron and call the function with this value. The result is printed to the console."}
{"task_id": 743, "completion": "def rotate_list(nums, k):\n    n = len(nums)\n    k = k % n  # To handle cases where k is greater than the length of the list\n    rotated_list = nums[-k:] + nums[:-k]\n    return rotated_list\n\n# Example usage:\noriginal_list = [1, 2, 3, 4, 5]\nk = 2\nrotated_list = rotate_list(original_list, k)\nprint(rotated_list)  # Output: [4, 5, 1, 2, 3]"}
{"task_id": 744, "completion": "def check_none(test_tup):\n    result = all(test_tup)\n    return (result)\n\n# Example usage:\n\ntest_tup = (1, 2, None, 4)\nprint(check_none(test_tup))  # Output: False\n\ntest_tup = (1, 2, 3, 4)\nprint(check_none(test_tup))  # Output: True"}
{"task_id": 745, "completion": "def divisible_by_digits(start, end):\n    def is_divisible_by_digits(num):\n        str_num = str(num)\n        for digit in str_num:\n            if digit!= '0' and num % int(digit)!= 0:\n                return False\n        return True\n    \n    result = []\n    for num in range(start, end + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result\n\n# Example usage:\nstart_num = 1\nend_num = 22\nprint(divisible_by_digits(start_num, end_num))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": 746, "completion": "def area_of_sector(r,a):\n    area = (a/360)*(22/7)*(r**2)\n    return area\n\n# Example usage:\n\nr = 10\na = 90\nprint(area_of_sector(r,a))"}
{"task_id": 747, "completion": "def find_lcs(X, Y, Z, m, n, o):\n    # Create a table to store lengths of longest common subsequence.\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    # Build the L[m+1][n+1][o+1] in bottom up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # L[m][n][o] contains the length of LCS for X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    return L[m][n][o]\n\n# Example usage:\nX = \"AGGT12\"\nY = \"12TXAYB\"\nZ = \"12XBA\"\nm = len(X)\nn = len(Y)\no = len(Z)\n\nprint(find_lcs(X, Y, Z, m, n, o))  # Output: 2"}
{"task_id": 748, "completion": "import re\n\ndef add_spaces(text):\n    return re.sub(r'(?<!^)(?=[A-Z])','', text)\n\n# Example usage:\n\ninput_string = \"ThisIsAStringWithWordsStartingWithCapitalLetters\"\noutput_string = add_spaces(input_string)\nprint(output_string)  # Output: \"This Is A String With Words Starting With Capital Letters\""}
{"task_id": 749, "completion": "def sort_list(numbers):\n    numbers.sort(key=int)\n    return numbers\n\n# Example usage:\nnumbers = [\"34\", \"67\", \"12\", \"90\"]\nsorted_numbers = sort_list(numbers)\nprint(sorted_numbers)  # Output: ['12', '34', '67', '90']"}
{"task_id": 750, "completion": "def add_tuple(test_list, test_tup):\n    test_list += test_tup[:2]\n    return str(test_list)\n\n# Example usage:\ntest_list = [1, 2, 3]\ntest_tup = (4, 5, 6)\nprint(add_tuple(test_list, test_tup))  # Output: [1, 2, 3, 4, 5]"}
{"task_id": 751, "completion": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if 2*i + 1 < n and arr[i] > arr[2*i + 1]:\n            return False\n        if 2*i + 2 < n and arr[i] > arr[2*i + 2]:\n            return False\n    return True\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6]\nprint(check_min_heap(arr))  # Output: False\n\narr = [2, 3, 4, 5, 10, 15]\nprint(check_min_heap(arr))  # Output: True"}
{"task_id": 752, "completion": "def jacobsthal_number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            c = b + 2 * a\n            a, b = b, c\n        return b\n\n# Example usage:\nn = 5\nprint(f\"The {n}th Jacobsthal number is: {jacobsthal_number(n)}\")"}
{"task_id": 753, "completion": "def find_min_k(tuples, k):\n    # Your code here\n```\n\nThis function should take a list of tuples and an integer `k` as input and return a list of the `k` tuples with the smallest first element. If `k` is greater than the number of tuples, the function should return the entire list.\n\nHere is an example of how you might implement this function:\n\n```python\ndef find_min_k(tuples, k):\n    # Sort the list of tuples based on the first element\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    # Return the first k tuples\n    return sorted_tuples[:k]\n```\n\nThis implementation sorts the list of tuples based on the first element and then returns the first `k` tuples from the sorted list. If `k` is greater than the number of tuples, the entire list is returned.\n\nLet's test the function with an example:\n\n```python\ntuples = [(1, 'a'), (3, 'b'), (2, 'c'), (4, 'd'), (5, 'e')]\nk = 3\nprint(find_min_k(tuples, k))  # Output should be [(1, 'a'), (2, 'c'), (3, 'b')]\n```\n\nThis should output the first 3 tuples sorted by their first element."}
{"task_id": 754, "completion": "def common_elements(l1, l2, l3):\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            result.append(i)\n    return result\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\nlist3 = [5, 6, 7, 8, 9]\nprint(common_elements(list1, list2, list3))  # Output: [2, 3]"}
{"task_id": 755, "completion": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num > smallest and num < second_smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest\n\n# Example usage:\nnumbers = [5, 2, 8, 12, 7, 3]\nprint(second_smallest(numbers))  # Output: 3"}
{"task_id": 756, "completion": "import re\n\ndef text_match(text):\n    patterns = 'ab?$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases:\n\nprint(text_match(\"ab\"))       # Should return 'Found a match!'\nprint(text_match(\"a\"))        # Should return 'Found a match!'\nprint(text_match(\"abc\"))      # Should return 'Not matched!'\nprint(text_match(\"abb\"))      # Should return 'Found a match!'\nprint(text_match(\"ac\"))       # Should return 'Not matched!'\nprint(text_match(\"\"))         # Should return 'Not matched!'"}
{"task_id": 757, "completion": "def count_reverse_pairs(words):\n    count = 0\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if words[i] == words[j][::-1]:\n                count += 1\n    return count\n\n# Example usage:\nwords = [\"abc\", \"cba\", \"bca\", \"acb\", \"xyz\", \"zyx\"]\nprint(count_reverse_pairs(words))  # Output: 3"}
{"task_id": 758, "completion": "def count_unique_lists(lst):\n    unique_lists = set()\n    for sublist in lst:\n        unique_lists.add(tuple(sublist))\n    return len(unique_lists)\n\n# Example usage:\nexample_list = [[1, 2], [3, 4], [1, 2], [5, 6]]\nprint(count_unique_lists(example_list))  # Output: 3"}
{"task_id": 759, "completion": "def check_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n\n# Example usage:\nprint(check_decimal(\"123.45\"))  # True\nprint(check_decimal(\"123.4\"))   # True\nprint(check_decimal(\"123.456\")) # False\nprint(check_decimal(\"abc\"))     # False\n```\n\nThis function attempts to convert the input string to a float. If the conversion is successful, it means the input is a valid decimal number, and the function returns `True`. If the conversion fails (resulting in a `ValueError`), the function returns `False`."}
{"task_id": 760, "completion": "def is_distinct(arr):\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n    \n    # Iterate through the array and check for distinct elements\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i - 1]:\n            return False\n    \n    return True\n\n# Example usage:\n\n# Test cases\nprint(is_distinct([1, 2, 3, 4, 5]))  # Output: True\nprint(is_distinct([1, 1, 1, 1, 1]))  # Output: True\nprint(is_distinct([1, 2, 2, 3, 4]))  # Output: False\nprint(is_distinct([5, 5, 5, 5, 5]))  # Output: True\nprint(is_distinct([]))               # Output: True\nprint(is_distinct([10]))             # Output: True\n\n# Explanation:\n# The function `is_distinct` checks if the given array contains only one distinct element.\n# It first checks if the array is empty or has only one element, in which case it returns True.\n# Then, it iterates through the array starting from the second element, comparing each element with the previous one.\n# If any two consecutive elements are different, it returns False.\n# If the loop completes without finding any different consecutive elements, it returns True."}
{"task_id": 761, "completion": "def arc_length(radius, angle):\n    \"\"\"\n    Calculate the arc length of a circle given the radius and the angle in radians.\n\n    Parameters:\n    radius (float): The radius of the circle.\n    angle (float): The angle in radians.\n\n    Returns:\n    float: The arc length.\n    \"\"\"\n    return radius * angle\n\n# Example usage:\nradius = 5\nangle = 1.5708  # This is 1 radian, which is approximately 57.296 degrees\nprint(\"Arc length:\", arc_length(radius, angle))  # Should print the arc length"}
{"task_id": 762, "completion": "def check_month(month):\n    if month in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n# Test the function:\n\nmonth_number = 4\nresult = check_month(month_number)\nprint(f\"The month number {month_number} has 30 days: {result}\")\n\nmonth_number = 7\nresult = check_month(month_number)\nprint(f\"The month number {month_number} has 30 days: {result}\")"}
{"task_id": 763, "completion": "def min_difference(arr):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff\n\n# Example usage:\n\narr = [10, 3, 8, 6, 15]\nprint(min_difference(arr))  # Output: 3"}
{"task_id": 764, "completion": "def count_numeric_values(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Example usage:\n\nstring = \"Hello123World456\"\nprint(count_numeric_values(string))  # Output: 6"}
{"task_id": 765, "completion": "def is_polite(num):\n    count_5 = 0\n    while num % 5 == 0:\n        num //= 5\n        count_5 += 1\n    return count_5\n\ndef nth_polite_number(n):\n    count = 0\n    number = 1\n    while True:\n        if is_polite(number) % 2 == 0:\n            count += 1\n        if count == n:\n            return number\n        number += 1\n\n# Example usage:\nn = 10\nprint(nth_polite_number(n))  # Output: 25"}
{"task_id": 766, "completion": "def iterate_consecutive_pairs(lst):\n    for i in range(len(lst) - 1):\n        yield (lst[i], lst[i + 1])\n\n# Example usage:\nmy_list = [1, 2, 3, 4]\nfor pair in iterate_consecutive_pairs(my_list):\n    print(pair)\n\n# Output:\n# (1, 2)\n# (2, 3)\n# (3, 4)"}
{"task_id": 767, "completion": "def get_pairs_count(arr, n, sum):\n    count = 0  \n    for i in range(0, n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n\n# Example usage:\narr = [1, 5, 7, -1, 5]\nn = len(arr)\nsum = 6\nprint(get_pairs_count(arr, n, sum))  # Output: 3"}
{"task_id": 768, "completion": "def check_odd_parity(n):\n    parity = 0\n    while n:\n        parity = ~parity\n        n = n & (n - 1)\n    return (parity == 1)\n\n# Example usage:\nnumber = 7\nif check_odd_parity(number):\n    print(f\"{number} has odd parity.\")\nelse:\n    print(f\"{number} has even parity.\")"}
{"task_id": 769, "completion": "def get_difference(list1, list2):\n    difference = []\n    for item in list1:\n        if item not in list2:\n            difference.append(item)\n    return difference\n\n# Example usage:\n\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\ndifference = get_difference(list1, list2)\nprint(difference)  # Output: [1, 2]"}
{"task_id": 770, "completion": "def odd_num_sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        odd_num = 2 * i - 1\n        sum += odd_num ** 4\n    return sum\n\n# Example usage:\nn = 5\nprint(odd_num_sum(n))  # Output: 13065"}
{"task_id": 771, "completion": "def is_balanced(expression):\n    stack = []\n    opening_brackets = \"({[\"\n    closing_brackets = \")}]\"\n    bracket_pairs = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    \n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack[-1]!= bracket_pairs[char]:\n                return False\n            stack.pop()\n    \n    return not stack\n\n# Example usage:\nexpression = \"{[()()]}\"\nprint(is_balanced(expression))  # Output: True\n\nexpression = \"{[(])}\"\nprint(is_balanced(expression))  # Output: False"}
{"task_id": 772, "completion": "def remove_words_k_length(s, k):\n    words = s.split()\n    result_words = [word for word in words if len(word)!= k]\n    result =''.join(result_words)\n    return result\n\n# Example usage:\ninput_string = \"This is a sample string to remove words of a specific length\"\nk = 3\nprint(remove_words_k_length(input_string, k))  # Output: \"This is a sample string to remove words of specific length\""}
{"task_id": 773, "completion": "def find_substring(main_string, sub_string):\n    occurrences = []\n    start_index = 0\n    while True:\n        start_index = main_string.find(sub_string, start_index)\n        if start_index == -1:\n            break\n        occurrences.append((start_index, start_index + len(sub_string)))\n        start_index += 1  # Move to the next character to continue searching\n    return occurrences\n\n# Example usage:\nmain_string = \"hello world, hello universe\"\nsub_string = \"hello\"\nresult = find_substring(main_string, sub_string)\nprint(result)  # Output: [(0, 5), (13, 18)]\n\n# Explanation:\n# The function `find_substring` takes two arguments: `main_string` and `sub_string`.\n# It initializes an empty list `occurrences` to store the positions of the substrings.\n# It uses a `while` loop to find occurrences of `sub_string` in `main_string` using the `find` method.\n# If `find` returns `-1`, it means the substring is not found, and the loop breaks.\n# If the substring is found, its starting and ending positions (inclusive) are added to the `occurrences` list.\n# The `start_index` is incremented by 1 to continue searching from the next character.\n# Finally, the function returns the list of positions."}
{"task_id": 774, "completion": "import re\n\ndef is_valid_email(email):\n    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\n    if re.match(pattern, email):\n        return True\n    else:\n        return False\n\n# Example usage:\nemail = \"example@example.com\"\nif is_valid_email(email):\n    print(f\"{email} is a valid email address.\")\nelse:\n    print(f\"{email} is not a valid email address.\")\n\n# Explanation:\n\n# The function `is_valid_email` takes an email address as input.\n# The `pattern` variable contains a regular expression that defines the structure of a valid email address.\n# The `re.match` function checks if the email address matches the pattern.\n# If the email address matches the pattern, the function returns `True`, indicating that the email is valid.\n# Otherwise, it returns `False`, indicating that the email is not valid."}
{"task_id": 775, "completion": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Example usage:\n\nprint(odd_position([1, 2, 3, 4, 5, 6]))  # Output: False\nprint(odd_position([1, 3, 5, 7, 9]))      # Output: True\nprint(odd_position([2, 4, 6, 8, 10]))     # Output: False"}
{"task_id": 776, "completion": "def count_vowel_neighbors(s):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(1, len(s) - 1):\n        if s[i] in vowels:\n            if s[i - 1] in vowels or s[i + 1] in vowels:\n                count += 1\n    return count\n\n# Example usage:\nprint(count_vowel_neighbors(\"hello world\"))  # Output: 3\nprint(count_vowel_neighbors(\"algorithm\"))    # Output: 2\nprint(count_vowel_neighbors(\"aeiou\"))        # Output: 0"}
{"task_id": 777, "completion": "def sum_of_unique(arr):\n    unique_elements = []\n    for num in arr:\n        if num not in unique_elements:\n            unique_elements.append(num)\n    return sum(unique_elements)\n\n# Example usage:\narr = [1, 2, 3, 2, 4, 3, 5]\nprint(sum_of_unique(arr))  # Output: 15"}
{"task_id": 778, "completion": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    \n    result = []\n    current_pack = [lst[0]]\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            current_pack.append(lst[i])\n        else:\n            result.append(current_pack)\n            current_pack = [lst[i]]\n    \n    result.append(current_pack)\n    return result\n\n# Example usage:\nexample_list = [1, 1, 2, 3, 3, 3, 2, 2, 1]\npacked_list = pack_consecutive_duplicates(example_list)\nprint(packed_list)  # Output: [[1, 1], [2], [3, 3, 3], [2, 2], [1]]"}
{"task_id": 779, "completion": "def count_unique_lists(lst):\n    unique_lists = set()\n    for item in lst:\n        unique_lists.add(frozenset(item))\n    return len(unique_lists)\n\n# Example usage:\nexample_list = [[1, 2], [3, 4], [1, 2], [5, 6], [3, 4]]\nprint(count_unique_lists(example_list))  # Output: 3"}
{"task_id": 780, "completion": "def find_combinations(test_list):\n    res = []\n    for idx, ele in enumerate(test_list):\n        for jdx in range(idx + 1, len(test_list)):\n            for kdx in range(jdx + 1, len(test_list)):\n                for ldx in range(kdx + 1, len(test_list)):\n                    res.append((ele, test_list[jdx], test_list[kdx], test_list[ldx]))\n    return res\n\n# Example usage:\ntest_list = (1, 2, 3, 4)\nprint(find_combinations(test_list))\n\n# Explanation:\n# 1. The function `find_combinations` takes a tuple `test_list` as input.\n# 2. It initializes an empty list `res` to store the combinations.\n# 3. It uses nested loops to iterate over all possible combinations of four elements from `test_list`.\n# 4. For each combination, it appends a tuple of the four elements to `res`.\n# 5. Finally, it returns the list of combinations.\n\n# The example usage demonstrates how to call the function with a test list containing the elements (1, 2, 3, 4) and prints the result."}
{"task_id": 781, "completion": "def count_Divisors(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\ndef even_or_odd(n):\n    count = count_Divisors(n)\n    if count % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n\n# Example usage:\nn = 10\nprint(even_or_odd(n))  # Output: Even\n\nn = 15\nprint(even_or_odd(n))  # Output: Odd"}
{"task_id": 782, "completion": "def sum_odd_length_subarrays(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for start in range(n):\n        current_sum = 0\n        for end in range(start, n):\n            current_sum += arr[end]\n            if (end - start + 1) % 2 == 1:\n                total_sum += current_sum\n    \n    return total_sum\n\n# Example usage:\narr = [1, 4, 2, 5, 3]\nprint(sum_odd_length_subarrays(arr))  # Output: 58"}
{"task_id": 783, "completion": "def rgb_to_hsv(r, g, b):\n    # Normalize RGB values to the range [0, 1]\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Calculate the maximum and minimum values of R, G, B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    \n    # Calculate Hue\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / delta) + 240) % 360\n    \n    # Calculate Saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = (delta / max_val) * 100\n    \n    # Calculate Value\n    v = max_val * 100\n    \n    return h, s, v\n\n# Example usage:\nr, g, b = 255, 0, 0\nh, s, v = rgb_to_hsv(r, g, b)\nprint(f\"HSV: ({h}, {s}%, {v}%)\")\n```\n\nThis function converts an RGB color to its corresponding HSV (Hue, Saturation, Value) representation. The RGB values are normalized to the range [0, 1], and then the hue, saturation, and value are calculated based on the normalized values. The hue is calculated in degrees, and the saturation and value are expressed as percentages."}
{"task_id": 784, "completion": "def product_even_odd(nums):\n    even_product = 1\n    odd_product = 1\n    even_found = False\n    odd_found = False\n    \n    for num in nums:\n        if num % 2 == 0:\n            even_product *= num\n            even_found = True\n        else:\n            odd_product *= num\n            odd_found = True\n    \n    if even_found and odd_found:\n        return even_product, odd_product\n    else:\n        return \"No even or odd number found\"\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6]\nresult = product_even_odd(numbers)\nprint(result)  # Output: (720, 15)\n\n# Explanation:\n# The function `product_even_odd` takes a list of numbers as input.\n# It initializes two variables, `even_product` and `odd_product`, to 1.\n# It also initializes two boolean variables, `even_found` and `odd_found`, to False.\n# It then iterates through the list of numbers.\n# If a number is even (i.e., divisible by 2), it multiplies `even_product` by that number and sets `even_found` to True.\n# If a number is odd, it multiplies `odd_product` by that number and sets `odd_found` to True.\n# After the loop, it checks if both even and odd numbers were found.\n# If both were found, it returns a tuple containing the products of even and odd numbers.\n# If either even or odd numbers were not found, it returns a message indicating that no even or odd number was found."}
{"task_id": 785, "completion": "def tuple_to_int(tup):\n    return tuple(int(x) for x in tup)\n\n# Example usage:\n\nexample_tuple = ('1', '2', '3')\nresult = tuple_to_int(example_tuple)\nprint(result)  # Output: (1, 2, 3)"}
{"task_id": 786, "completion": "def find_right_insertion_point(sorted_list, value):\n    left, right = 0, len(sorted_list)\n    while left < right:\n        mid = (left + right) // 2\n        if sorted_list[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Example usage:\nsorted_list = [1, 2, 4, 4, 5]\nvalue = 3\ninsertion_point = find_right_insertion_point(sorted_list, value)\nprint(f\"The right insertion point for {value} in {sorted_list} is {insertion_point}\")"}
{"task_id": 787, "completion": "import re\n\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        if re.search(patterns, text):\n            return 'Found a match!'\n        else:\n            return 'Not matched!'\n\nprint(text_match_three(\"aabbbbbc\"))\nprint(text_match_three(\"aabbbbc\"))\nprint(text_match_three(\"abbbbbc\"))\n\n# Explanation:\n\n# 1. Import the `re` module, which provides support for regular expressions in Python.\n# 2. Define the function `text_match_three` that takes a single argument `text`.\n# 3. The `patterns` variable is set to the regular expression pattern 'ab{3}?', which matches a string that has an 'a' followed by exactly three 'b's.\n# 4. Use the `re.search` function to search the `text` for the pattern. If the pattern is found, `re.search` returns a match object, which is truthy. If the pattern is not found, `re.search` returns `None`, which is falsy.\n# 5. If a match is found, the function returns the string 'Found a match!'. If no match is found, the function returns the string 'Not matched!'.\n# 6. The function is tested with three different strings, and the results are printed to the console."}
{"task_id": 788, "completion": "def create_tuple(test_str, test_list):\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple\n\n# Example usage:\n\ntest_str = \"Hello\"\ntest_list = [1, 2, 3]\nresult = create_tuple(test_str, test_list)\nprint(result)  # Output: ('H', 'e', 'l', 'l', 'o', 1, 2, 3)"}
{"task_id": 789, "completion": "def perimeter_polygon(n, s):\n    return n * s\n\n# Example usage:\n\n# Calculate the perimeter of a square with side length 5 units\nperimeter = perimeter_polygon(4, 5)\nprint(perimeter)  # Output: 20\n\n# Calculate the perimeter of a triangle with side length 3 units\nperimeter = perimeter_polygon(3, 3)\nprint(perimeter)  # Output: 9"}
{"task_id": 790, "completion": "def check_even_index(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n\n# Example usage:\n\nnums = [2, 4, 6, 8, 10]\nprint(check_even_index(nums))  # Output: True\n\nnums = [2, 3, 6, 8, 10]\nprint(check_even_index(nums))  # Output: False"}
{"task_id": 791, "completion": "def remove_nested_record(test_tup):\n    res = []\n    for ele in test_tup:\n        if isinstance(ele, tuple):\n            for sub_ele in ele:\n                res.append(sub_ele)\n        else:\n            res.append(ele)\n    return (tuple(res))\n\n# Test the function:\ntest_tup = (1, 2, (3, 4), 5, (6, 7))\nprint(remove_nested_record(test_tup))  # Output: (1, 2, 3, 4, 5, 6, 7)"}
{"task_id": 792, "completion": "def count_list(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Example usage:\n\nexample_list = [1, [2, 3], [4, [5, 6]], 7, [8, 9, [10]]]\nprint(count_list(example_list))  # Output: 5"}
{"task_id": 793, "completion": "def last_position(A, target):\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == target:\n            result = mid\n            left = mid + 1\n        elif A[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n# Example usage:\nA = [1, 2, 2, 2, 3, 4, 5]\ntarget = 2\nprint(last_position(A, target))  # Output: 3"}
{"task_id": 794, "completion": "import re\n\ndef match_string(text):\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Example usage:\n\nprint(match_string(\"aabb\"))       # Output: Found a match!\nprint(match_string(\"aabbb\"))      # Output: Found a match!\nprint(match_string(\"abb\"))        # Output: Not matched!\nprint(match_string(\"a\"))          # Output: Not matched!\nprint(match_string(\"ab\"))         # Output: Not matched!\nprint(match_string(\"axb\"))        # Output: Found a match!\nprint(match_string(\"abc\"))        # Output: Not matched!"}
{"task_id": 795, "completion": "import heapq\n\ndef n_cheap_items(items, n):\n    if n <= 0:\n        return []\n    cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\n    return cheap_items\n```\n\n# Explanation:\n\n1. **Importing the heapq module**: The `heapq` module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.\n\n2. **Defining the function `n_cheap_items`**: This function takes two parameters:\n   - `items`: A list of dictionaries where each dictionary represents an item with a 'price' key.\n   - `n`: The number of items with the cheapest prices to retrieve.\n\n3. **Handling edge cases**: If `n` is less than or equal to 0, the function returns an empty list because there are no items to return.\n\n4. **Using `heapq.nsmallest`**: This function returns the `n` smallest elements from the provided iterable based on the `key` function. In this case, the key function is a lambda that returns the price of each item.\n\n5. **Returning the result**: The function returns the list of `n` cheapest items.\n\n# Example usage:\n\n```python\nitems = [\n    {'name': 'Item1', 'price': 10},\n    {'name': 'Item2', 'price': 30},\n    {'name': 'Item3', 'price': 20},\n    {'name': 'Item4', 'price': 50},\n    {'name': 'Item5', 'price': 40}\n]\n\nn = 3\ncheap_items = n_cheap_items(items, n)\nprint(cheap_items)\n```\n\n# Output:\n\n```\n[{'name': 'Item1', 'price': 10}, {'name': 'Item3', 'price': 20}, {'name': 'Item2', 'price': 30}]\n```\n\nThis output shows the 3 cheapest items based on their prices."}
{"task_id": 796, "completion": "def sum_dict_values(dictionary):\n    return sum(dictionary.values())\n\n# Example usage:\n\nexample_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(sum_dict_values(example_dict))  # Output: 6"}
{"task_id": 797, "completion": "def sum_of_odd_natural_numbers(l, r):\n    sum = 0\n    for i in range(l, r + 1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n\n# Example usage:\nl = 3\nr = 9\nprint(sum_of_odd_natural_numbers(l, r))  # Output: 24"}
{"task_id": 798, "completion": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nresult = sum_array(arr)\nprint(\"Sum of the array:\", result)"}
{"task_id": 799, "completion": "def left_rotate(n, d):\n    # Assuming that n can be represented in binary in 32 bits\n    left_bit_mask = (1 << 32) - 1\n    right_bit_mask = (1 << 32) - 1\n    \n    # Rotate bits to the left\n    rotated_bits = (n << d | n >> (32 - d)) & left_bit_mask\n    \n    return rotated_bits\n\n# Example usage:\nn = 0x12345678\nd = 8\nprint(hex(left_rotate(n, d)))  # Output: 0x23456781\n\n# Explanation:\n# The function `left_rotate` takes two arguments: `n` (the number to rotate) and `d` (the number of bits to rotate).\n# The function assumes that `n` can be represented in binary in 32 bits.\n# The `left_bit_mask` and `right_bit_mask` are used to ensure that the bits are rotated correctly within the 32-bit range.\n# The function performs a left rotation by shifting `n` to the left by `d` bits and then shifting `n` to the right by `(32 - d)` bits.\n# The result is masked with `left_bit_mask` to ensure that the result is within the 32-bit range.\n# The function then returns the rotated bits."}
{"task_id": 800, "completion": "def remove_whitespaces(string):\n    return \"\".join(string.split())\n\n# Example usage:\ninput_string = \"Hello World\"\nresult = remove_whitespaces(input_string)\nprint(result)  # Output: \"HelloWorld\""}
{"task_id": 801, "completion": "def count_equal_numbers(a, b, c):\n    count = 0\n    if a == b:\n        count += 1\n    if a == c:\n        count += 1\n    if b == c:\n        count += 1\n    return count\n\n# Example usage:\nresult = count_equal_numbers(3, 3, 3)\nprint(result)  # Output: 3\n\nresult = count_equal_numbers(1, 2, 3)\nprint(result)  # Output: 0\n\nresult = count_equal_numbers(4, 4, 2)\nprint(result)  # Output: 2"}
{"task_id": 802, "completion": "def count_rotation(arr):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    \n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        mid = (low + high) // 2\n        next_index = (mid + 1) % n\n        prev_index = (mid - 1 + n) % n\n        \n        if arr[mid] <= arr[next_index] and arr[mid] <= arr[prev_index]:\n            return mid\n        elif arr[low] <= arr[mid]:\n            low = mid + 1\n        elif arr[mid] <= arr[high]:\n            high = mid - 1\n    return -1\n\n# Example usage:\narr = [4, 5, 6, 1, 2, 3]\nprint(count_rotation(arr))  # Output: 3"}
{"task_id": 803, "completion": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(n**0.5)\n    return root * root == n\n\n# Example usage:\n\nnumber = 25\nprint(is_perfect_square(number))  # Output: True\n\nnumber = 16\nprint(is_perfect_square(number))  # Output: True\n\nnumber = 14\nprint(is_perfect_square(number))  # Output: False"}
{"task_id": 804, "completion": "def product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Example usage:\n\nnumbers = [2, 3, 4, 5]\nprint(product_even(numbers))  # Output: True\n\nnumbers = [1, 3, 5, 7]\nprint(product_even(numbers))  # Output: False"}
{"task_id": 805, "completion": "def highest_sum_list(lists):\n    if not lists:\n        return None\n    \n    highest_sum = float('-inf')\n    highest_list = None\n    \n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > highest_sum:\n            highest_sum = current_sum\n            highest_list = lst\n    \n    return highest_list\n\n# Example usage:\nlists = [[1, 2, 3], [4, 5, 6], [10, -1, 1], [3, 3, 3]]\nprint(highest_sum_list(lists))  # Output: [4, 5, 6]"}
{"task_id": 806, "completion": "def max_run_uppercase(s):\n    max_run = 0\n    current_run = 0\n    \n    for char in s:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n\n# Example usage:\ninput_string = \"GeeKs01fOr@gEEks07\"\nprint(max_run_uppercase(input_string))  # Output: 3"}
{"task_id": 807, "completion": "def first_odd_num(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n\n# Example usage:\n\nnumbers = [2, 4, 6, 8, 10, 11, 12, 13, 14, 15]\nresult = first_odd_num(numbers)\nprint(result)  # Output: 11"}
{"task_id": 808, "completion": "def check_tuple(test_tup, K):\n    res = any(K in sub for sub in test_tup)\n    return (res)\n\n# Test cases:\nprint(check_tuple((1, 2, 3), 2))  # Output: True\nprint(check_tuple((1, 2, 3), 4))  # Output: False\nprint(check_tuple((1, 2, 3, 4, 5), 3))  # Output: True\nprint(check_tuple((1, 2, 3, 4, 5), 6))  # Output: False\n\n# Explanation:\n# The function `check_tuple` takes two arguments: `test_tup` (a tuple) and `K` (an integer).\n# It uses a generator expression within the `any` function to check if `K` is present in any of the elements of `test_tup`.\n# The `any` function returns `True` if at least one element in the generator expression is `True`, otherwise it returns `False`.\n# The function returns the result of this check.\n\n# Test cases:\n# - For `check_tuple((1, 2, 3), 2)`, the output is `True` because `2` is present in the tuple.\n# - For `check_tuple((1, 2, 3), 4)`, the output is `False` because `4` is not present in the tuple.\n# - For `check_tuple((1, 2, 3, 4, 5), 3)`, the output is `True` because `3` is present in the tuple.\n# - For `check_tuple((1, 2, 3, 4, 5), 6)`, the output is `False` because `6` is not present in the tuple."}
{"task_id": 809, "completion": "def check_elements(test_tup1, test_tup2):\n    res = all(x > y for x, y in zip(test_tup1, test_tup2))\n    return res\n\n# Example usage:\ntest_tup1 = (5, 10, 15, 20)\ntest_tup2 = (3, 7, 12, 18)\nprint(check_elements(test_tup1, test_tup2))  # Output: True"}
{"task_id": 810, "completion": "def repeat_elements(elements):\n    result = []\n    for element, count in elements.items():\n        result.extend([element] * count)\n    return result\n\n# Example usage:\nelements = {'a': 2, 'b': 3, 'c': 1}\nprint(repeat_elements(elements))  # Output: ['a', 'a', 'b', 'b', 'b', 'c']"}
{"task_id": 811, "completion": "def check_identical(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\n# Example usage:\nlist1 = [(1, 2), (3, 4), (5, 6)]\nlist2 = [(1, 2), (3, 4), (5, 6)]\nprint(check_identical(list1, list2))  # Output: True\n\nlist3 = [(1, 2), (3, 4), (5, 7)]\nlist4 = [(1, 2), (3, 4), (5, 6)]\nprint(check_identical(list3, list4))  # Output: False"}
{"task_id": 812, "completion": "def abbreviate_road(text):\n    return text.replace('road', 'rd.')\n\n# Example usage:\n\nprint(abbreviate_road(\"123 Main Street\"))  # Output: \"123 Main St.rd.\"\nprint(abbreviate_road(\"456 Road Avenue\"))   # Output: \"456 Rd. Avenue\"\nprint(abbreviate_road(\"789 Roadway\"))       # Output: \"789 Rdway\"\n\n# Explanation:\n\n# The function `abbreviate_road` takes a string `text` as input.\n# It uses the `replace` method to replace every occurrence of the substring 'road' with 'rd.'.\n# The function then returns the modified string.\n# The example usages demonstrate how the function works with different strings."}
{"task_id": 813, "completion": "def string_length(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n\nprint(string_length(\"hello world\"))\n\n# Using len() function:\n\ndef string_length(str1):\n    return len(str1)\n\nprint(string_length(\"hello world\"))\n\n# Using recursion:\n\ndef string_length(str1):\n    if str1 == '':\n        return 0\n    else:\n        return 1 + string_length(str1[1:])\n\nprint(string_length(\"hello world\"))"}
{"task_id": 814, "completion": "def rombus_area(d1, d2):\n    area = (d1 * d2) / 2\n    return area\n\n# Example usage:\nd1 = 10\nd2 = 20\nprint(\"Area of the rombus:\", rombus_area(d1, d2))"}
{"task_id": 815, "completion": "def sort_array(arr):\n    count_0 = arr.count(0)\n    count_1 = arr.count(1)\n    count_2 = arr.count(2)\n    \n    for i in range(len(arr)):\n        if i < count_0:\n            arr[i] = 0\n        elif i < count_0 + count_1:\n            arr[i] = 1\n        else:\n            arr[i] = 2\n    \n    return arr\n\n# Example usage:\narr = [2, 0, 2, 1, 1, 0]\nsorted_arr = sort_array(arr)\nprint(sorted_arr)  # Output: [0, 0, 1, 1, 2, 2]"}
{"task_id": 816, "completion": "def clear_tuple(test_tup):\n    test_tup = tuple()\n    return test_tup\n\n# Test the function:\n\ntest_tup = (1, 2, 3)\nprint(clear_tuple(test_tup))  # Output: ()\n\n# Explanation:\n\n# 1. Define a function named `clear_tuple` that takes one parameter `test_tup`.\n# 2. Inside the function, set `test_tup` to an empty tuple using `test_tup = tuple()`.\n# 3. Return the modified `test_tup`.\n# 4. Test the function with a sample tuple `test_tup = (1, 2, 3)` and print the result.\n# 5. The function should return an empty tuple, so the output will be `()`."}
{"task_id": 817, "completion": "def divisible_by_m_or_n(numbers, m, n):\n    result = list(filter(lambda x: x % m == 0 or x % n == 0, numbers))\n    return result\n\n# Example usage:\nnumbers = [10, 15, 20, 25, 30, 35, 40]\nm = 5\nn = 10\nprint(divisible_by_m_or_n(numbers, m, n))  # Output: [10, 15, 20, 25, 30, 40]"}
{"task_id": 818, "completion": "def count_lowercase_letters(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count\n\n# Example usage:\n\nstring = \"Hello World\"\nprint(count_lowercase_letters(string))  # Output: 9"}
{"task_id": 819, "completion": "def count_duplicates(nums):\n    if not nums:\n        return []\n\n    result = []\n    count = 1\n    for i in range(1, len(nums)):\n        if nums[i] == nums[i - 1]:\n            count += 1\n        else:\n            result.append((nums[i - 1], count))\n            count = 1\n    result.append((nums[-1], count))\n    return result\n\n# Example usage:\nnums = [1, 1, 2, 2, 2, 3, 3, 1]\nprint(count_duplicates(nums))  # Output: [(1, 2), (2, 3), (3, 2), (1, 1)]"}
{"task_id": 820, "completion": "def check_month_days(month_number):\n    # Check if the month number is 2 (February)\n    if month_number == 2:\n        return True  # February always has 28 days\n    else:\n        return False\n\n# Example usage:\nmonth_number = 2\nprint(check_month_days(month_number))  # Output: True\n\nmonth_number = 4\nprint(check_month_days(month_number))  # Output: False"}
{"task_id": 821, "completion": "def merge_dict(d1, d2):\n    return {**d1, **d2}\n\n# Example usage:\n\nd1 = {'a': 1, 'b': 2}\nd2 = {'c': 3, 'd': 4}\nmerged_dict = merge_dict(d1, d2)\nprint(merged_dict)  # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"}
{"task_id": 822, "completion": "def is_valid_password(password):\n    # Check if the password length is between 6 and 12 characters\n    if not (6 <= len(password) <= 12):\n        return False\n    \n    # Check if the password contains at least one lowercase letter\n    has_lowercase = any(char.islower() for char in password)\n    if not has_lowercase:\n        return False\n    \n    # Check if the password contains at least one uppercase letter\n    has_uppercase = any(char.isupper() for char in password)\n    if not has_uppercase:\n        return False\n    \n    # Check if the password contains at least one digit\n    has_digit = any(char.isdigit() for char in password)\n    if not has_digit:\n        return False\n    \n    # Check if the password contains at least one special character (allowed special characters:!@#$%^&*)\n    special_characters = \"!@#$%^&*\"\n    has_special_char = any(char in special_characters for char in password)\n    if not has_special_char:\n        return False\n    \n    # If all checks pass, the password is valid\n    return True\n\n# Example usage:\n# print(is_valid_password(\"Password1!\"))  # Should return True\n# print(is_valid_password(\"pass\"))        # Should return False\n# print(is_valid_password(\"Password\"))    # Should return False\n# print(is_valid_password(\"Pass1!\"))      # Should return True\n# print(is_valid_password(\"P@ssw0rd\"))    # Should return True\n\n# Python function to check if a string is a palindrome:\ndef is_palindrome(s):\n    # Remove all non-alphanumeric characters and convert to lowercase\n    cleaned_s = ''.join(char.lower() for char in s if char.isalnum())\n    # Compare the cleaned string with its reverse\n    return cleaned_s == cleaned_s[::-1]\n\n# Example usage:\n# print(is_palindrome(\"A man, a plan, a canal, Panama\"))  # Should return True\n# print(is_palindrome(\"race"}
{"task_id": 823, "completion": "import re\n\ndef check_substring(string, substring):\n    pattern = re.compile(rf\"^{re.escape(substring)}\")\n    match = pattern.match(string)\n    return bool(match)\n\n# Example usage:\nresult = check_substring(\"hello world\", \"hello\")\nprint(result)  # Output: True\n\nresult = check_substring(\"hello world\", \"world\")\nprint(result)  # Output: False"}
{"task_id": 824, "completion": "def remove_even(nums):\n    return [num for num in nums if num % 2!= 0]\n\n# Example usage:\n\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(remove_even(numbers))  # Output: [1, 3, 5, 7, 9]"}
{"task_id": 825, "completion": "def access_elements(list1, indexes):\n    result = [list1[i] for i in indexes]\n    return result\n\n# Example usage:\n\nlist1 = [10, 20, 30, 40, 50]\nindexes = [0, 2, 4]\nprint(access_elements(list1, indexes))  # Output: [10, 30, 50]"}
{"task_id": 826, "completion": "def find_triangle(a, b, c):\n    # Check if the given sides can form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Check for equilateral triangle\n        if a == b == c:\n            return \"Equilateral triangle\"\n        # Check for isosceles triangle\n        elif a == b or b == c or a == c:\n            return \"Isosceles triangle\"\n        # If not equilateral or isosceles, it must be a scalene triangle\n        else:\n            return \"Scalene triangle\"\n    else:\n        return \"Not a triangle\"\n\n# Example usage:\na, b, c = 3, 3, 3\nprint(find_triangle(a, b, c))  # Output: Equilateral triangle\n\na, b, c = 3, 3, 4\nprint(find_triangle(a, b, c))  # Output: Isosceles triangle\n\na, b, c = 3, 4, 5\nprint(find_triangle(a, b, c))  # Output: Scalene triangle\n\na, b, c = 1, 2, 3\nprint(find_triangle(a, b, c))  # Output: Not a triangle"}
{"task_id": 827, "completion": "def sum_column(list1, n):\n    return sum(i[n] for i in list1)\n\n# Example usage:\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nn = 1\nprint(sum_column(list1, n))  # Output: 15"}
{"task_id": 828, "completion": "def count_characters(input_string):\n    alphabets = 0\n    digits = 0\n    special_characters = 0\n    \n    for char in input_string:\n        if char.isalpha():\n            alphabets += 1\n        elif char.isdigit():\n            digits += 1\n        else:\n            special_characters += 1\n    \n    return alphabets, digits, special_characters\n\n# Example usage:\ninput_str = \"Hello, World! 123\"\nalphabets, digits, special_characters = count_characters(input_str)\nprint(f\"Alphabets: {alphabets}, Digits: {digits}, Special Characters: {special_characters}\")"}
{"task_id": 829, "completion": "def second_frequent(strings):\n    frequency = {}\n    for s in strings:\n        frequency[s] = frequency.get(s, 0) + 1\n    \n    sorted_freq = sorted(frequency.items(), key=lambda x: x[1], reverse=True)\n    \n    if len(sorted_freq) < 2:\n        return None\n    else:\n        return sorted_freq[1][0]\n\n# Example usage:\n\nstrings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"banana\", \"orange\", \"apple\", \"apple\"]\nprint(second_frequent(strings))  # Output: \"orange\""}
{"task_id": 830, "completion": "def round_up(number, digits):\n    return round(number + 5 * (10 ** (-digits - 1)), digits)\n\n# Example usage:\nprint(round_up(3.14159, 2))  # Output: 3.15\nprint(round_up(123.456, 1))  # Output: 123.5\nprint(round_up(1.005, 2))    # Output: 1.01"}
{"task_id": 831, "completion": "def count_equal_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\n# Example usage:\narray = [1, 2, 3, 1, 2, 3]\nresult = count_equal_pairs(array)\nprint(result)  # Output: 3"}
{"task_id": 832, "completion": "import re\n\ndef extract_max_value(string):\n    # Find all numbers in the string\n    numbers = re.findall(r'-?\\d+', string)\n    \n    # Convert the found numbers to integers\n    numbers = [int(num) for num in numbers]\n    \n    # Return the maximum number\n    return max(numbers) if numbers else None\n\n# Example usage:\nstring = \"The numbers are 10, -20, 30, and 40.\"\nmax_value = extract_max_value(string)\nprint(\"The maximum numeric value is:\", max_value)\n\n# Explanation:\n# 1. The function uses the `re.findall` method from the `re` module to find all occurrences of numbers in the string. The regular expression `r'-?\\d+'` matches any integer (positive or negative) by looking for an optional minus sign (`-`) followed by one or more digits (`\\d+`).\n# 2. The `findall` method returns a list of all found matches as strings. We then convert these strings to integers using a list comprehension.\n# 3. We use the `max` function to find and return the maximum value from the list of integers. If the list is empty (i.e., no numbers were found), we return `None`.\n# 4. The example usage demonstrates how to call the function and print the result."}
{"task_id": 833, "completion": "def get_keys(dictionary):\n    return list(dictionary.keys())\n\n# Example usage:\n\nexample_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(get_keys(example_dict))  # Output: ['a', 'b', 'c']"}
{"task_id": 834, "completion": "def generate_matrix(n):\n    # Create an n x n matrix filled with zeros\n    matrix = [[0] * n for _ in range(n)]\n    \n    # Initialize the starting point and the boundaries\n    start_row, end_row = 0, n - 1\n    start_col, end_col = 0, n - 1\n    num = 1\n    \n    while start_row <= end_row and start_col <= end_col:\n        # Fill the top row\n        for col in range(start_col, end_col + 1):\n            matrix[start_row][col] = num ** 2\n            num += 1\n        start_row += 1\n        \n        # Fill the right column\n        for row in range(start_row, end_row + 1):\n            matrix[row][end_col] = num ** 2\n            num += 1\n        end_col -= 1\n        \n        # Fill the bottom row\n        if start_row <= end_row:\n            for col in range(end_col, start_col - 1, -1):\n                matrix[end_row][col] = num ** 2\n                num += 1\n            end_row -= 1\n        \n        # Fill the left column\n        if start_col <= end_col:\n            for row in range(end_row, start_row - 1, -1):\n                matrix[row][start_col] = num ** 2\n                num += 1\n            start_col += 1\n    \n    return matrix\n\n# Example usage:\nn = 3\nprint(generate_matrix(n))"}
{"task_id": 835, "completion": "def slope_of_line(x1, y1, x2, y2):\n    if x2 - x1 == 0:\n        return \"undefined\"\n    else:\n        slope = (y2 - y1) / (x2 - x1)\n        return slope\n\n# Explanation:\n\n# The function `slope_of_line` takes four parameters: `x1`, `y1`, `x2`, and `y2`. These parameters represent the coordinates of two points on a line.\n\n# First, the function checks if `x2 - x1` is equal to 0. If it is, the slope is undefined because division by zero is not possible. In this case, the function returns the string \"undefined\".\n\n# If `x2 - x1` is not equal to 0, the function calculates the slope using the formula `(y2 - y1) / (x2 - x1)`. The result is then returned as the slope of the line.\n\n# Example usage:\n\nprint(slope_of_line(1, 2, 3, 4))  # Output: 1.0\nprint(slope_of_line(1, 2, 1, 4))  # Output: undefined"}
{"task_id": 836, "completion": "def max_sub_array_sum(a, size):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return (end - start + 1)\n\n# Example usage:\na = [-2, -3, 4, -1, -2, 1, 5, -3]\nsize = len(a)\nprint(\"Length of the longest contiguous subarray with maximum sum:\", max_sub_array_sum(a, size))"}
{"task_id": 837, "completion": "def cube_sum(n):\n    sum = 0\n    for i in range(1, 2 * n, 2):\n        sum += i ** 3\n    return sum\n\n# Example usage:\nn = 5\nprint(cube_sum(n))  # Output: 351 (1^3 + 3^3 + 5^3 + 7^3 + 9^3)"}
{"task_id": 838, "completion": "def min_swaps(str1, str2):\n    # Check if the lengths of the two strings are different\n    if len(str1)!= len(str2):\n        return -1\n    \n    # Initialize counters for mismatches\n    mismatches = 0\n    \n    # Count the number of mismatches between the two strings\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            mismatches += 1\n    \n    # If the number of mismatches is odd, it's impossible to make the strings equal\n    if mismatches % 2!= 0:\n        return -1\n    \n    # The minimum number of swaps required is half the number of mismatches\n    return mismatches // 2\n\n# Example usage:\nstr1 = \"1100\"\nstr2 = \"1001\"\nprint(min_swaps(str1, str2))  # Output: 1"}
{"task_id": 839, "completion": "def sort_tuple(tup):\n    # Sort the tuples using the first item\n    return sorted(tup, key=lambda x: x[0])\n\n# Example usage:\n\ntup = [('banana', 2), ('apple', 5), ('cherry', 1)]\nsorted_tup = sort_tuple(tup)\nprint(sorted_tup)  # Output: [('apple', 5), ('banana', 2), ('cherry', 1)]"}
{"task_id": 840, "completion": "def check_roots(a, b, c):\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is non-negative\n    if discriminant >= 0:\n        # Calculate the roots\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        \n        # Check if the roots are numerically equal but opposite in sign\n        if root1 == -root2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Example usage:\n# print(check_roots(1, -3, 2))  # Output: True\n# print(check_roots(1, 2, 1))   # Output: False\n\n# Explanation:\n# The function first calculates the discriminant of the quadratic equation. If the discriminant is non-negative, it proceeds to calculate the roots using the quadratic formula. Then, it checks if the roots are numerically equal but opposite in sign. If they are, the function returns True; otherwise, it returns False. If the discriminant is negative, the function returns False since the roots would be complex, and we are only interested in real roots."}
{"task_id": 841, "completion": "def count_inversions(arr):\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr, 0\n        \n        mid = len(arr) // 2\n        left_half, left_inv = merge_sort(arr[:mid])\n        right_half, right_inv = merge_sort(arr[mid:])\n        \n        merged, merge_inv = merge(left_half, right_half)\n        return merged, left_inv + right_inv + merge_inv\n    \n    def merge(left, right):\n        merged = []\n        i = j = inv_count = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inv_count += len(left) - i\n        \n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        \n        return merged, inv_count\n    \n    _, inversions = merge_sort(arr)\n    return inversions\n\n# Example usage:\narr = [2, 4, 1, 3, 5]\nprint(count_inversions(arr))  # Output: 3"}
{"task_id": 842, "completion": "def get_odd_occurrence(arr):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    for num, count in count_dict.items():\n        if count % 2!= 0:\n            return num\n\n# Example usage:\narr = [2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2]\nprint(get_odd_occurrence(arr))  # Output: 5"}
{"task_id": 843, "completion": "import heapq\n\ndef nth_super_ugly_number(n, primes):\n    uglies = [1]\n    def gen(prime):\n        for ugly in uglies:\n            yield ugly * prime\n    h = heapq.merge(*map(gen, primes))\n    while len(uglies) < n:\n        ugly = next(h)\n        if ugly!= uglies[-1]:\n            uglies.append(ugly)\n    return uglies[-1]\n\n# Example usage:\nprint(nth_super_ugly_number(12, [2, 7, 13, 19]))  # Output: 32\n```\n\nThis function uses the `heapq.merge` function to merge multiple generator streams of ugly numbers, each generated by multiplying the last ugly number by each of the given primes. It ensures that each ugly number is unique by checking if the new ugly number is different from the last one added to the list. The function returns the nth super ugly number."}
{"task_id": 844, "completion": "def kth_element(arr, k):\n    odd_elements = [x for x in arr if x % 2!= 0]\n    even_elements = [x for x in arr if x % 2 == 0]\n    combined_list = odd_elements + even_elements\n    return combined_list[k - 1]\n\n# Example usage:\narr = [1, 3, 5, 2, 4, 6]\nk = 5\nprint(kth_element(arr, k))  # Output should be 4"}
{"task_id": 845, "completion": "import math\n\ndef count_digits(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        digits = 0\n        for i in range(2, n + 1):\n            digits += math.log10(i)\n        return int(digits) + 1\n\n# Example usage:\nnumber = 10\nprint(count_digits(number))  # Output: 7"}
{"task_id": 846, "completion": "def min_platforms(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while i < n and j < n:\n        if arr[i] <= dep[j]:\n            plat_needed += 1\n            i += 1\n            if plat_needed > result:\n                result = plat_needed\n        elif arr[i] > dep[j]:\n            plat_needed -= 1\n            j += 1\n    return result\n\n# Example usage:\narr = [900, 940, 950, 1100, 1500, 1800]\ndep = [910, 1200, 1120, 1130, 1900, 2000]\nn = len(arr)\nprint(min_platforms(arr, dep, n))  # Output: 3"}
{"task_id": 847, "completion": "def copy_list(test_list):\n    res = list(test_list)\n    return res\n\n# Example usage:\n\ntest_tuple = (1, 2, 3, 4)\ncopied_list = copy_list(test_tuple)\nprint(copied_list)  # Output: [1, 2, 3, 4]"}
{"task_id": 848, "completion": "def area_of_trapezium(a, b, h):\n    return 0.5 * (a + b) * h\n\n# Example usage:\na = 5\nb = 7\nh = 10\nprint(area_of_trapezium(a, b, h))  # Output: 60.0"}
{"task_id": 849, "completion": "def sum_of_prime_divisors(n):\n    def is_prime(x):\n        if x <= 1:\n            return False\n        if x <= 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    sum_of_divisors = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            sum_of_divisors += i\n    return sum_of_divisors\n\n# Example usage:\nprint(sum_of_prime_divisors(12))  # Output: 7 (2 + 3)\nprint(sum_of_prime_divisors(30))  # Output: 10 (2 + 3 + 5)"}
{"task_id": 850, "completion": "def is_triangle(a, b, c):\n    # Check if the sum of any two angles is greater than the third angle\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\n# Example usage:\na = 60\nb = 60\nc = 60\nprint(is_triangle(a, b, c))  # Output: True\n\na = 90\nb = 45\nc = 45\nprint(is_triangle(a, b, c))  # Output: True\n\na = 91\nb = 45\nc = 45\nprint(is_triangle(a, b, c))  # Output: False"}
{"task_id": 851, "completion": "def sum_of_inverse_divisors(n):\n    sum_inv_div = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_inv_div += 1 / i\n    return sum_inv_div\n\n# Example usage:\nn = 6\nprint(sum_of_inverse_divisors(n))  # Output: 2.45"}
{"task_id": 852, "completion": "def remove_negatives(numbers):\n    return [num for num in numbers if num >= 0]\n\n# Example usage:\nnumbers = [1, -2, 3, -4, 5, -6]\npositive_numbers = remove_negatives(numbers)\nprint(positive_numbers)  # Output: [1, 3, 5]"}
{"task_id": 853, "completion": "def sum_of_odd_factors(n):\n    result = 1\n    # Count the number of 2s that divide n\n    while n % 2 == 0:\n        n //= 2\n    # n must be odd at this point, so a skip of 2 ( i = i + 2) can be used\n    for i in range(3, int(n**0.5) + 1, 2):\n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        # While i divides n, count i and divide n\n        while n % i == 0:\n            count += 1\n            n //= i\n            curr_term *= i\n            curr_sum += curr_term\n        result *= curr_sum\n    # This condition is to check if n is a prime number greater than 2\n    if n > 2:\n        result *= (1 + n)\n    return result\n\n# Example usage:\nprint(sum_of_odd_factors(30))  # Output: 72\nprint(sum_of_odd_factors(18))  # Output: 13"}
{"task_id": 854, "completion": "def convert_to_heap(lst):\n    import heapq\n    heapq.heapify(lst)\n    return lst\n\n# Example usage:\n\nexample_list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nconverted_heap = convert_to_heap(example_list)\nprint(converted_heap)  # Output will be a heapified list, e.g., [1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]"}
{"task_id": 855, "completion": "def check_even_parity(n):\n    count = 0\n    while n:\n        count ^= n & 1\n        n >>= 1\n    return count == 0\n\n# Explanation:\n\n# 1. Initialize a variable `count` to 0. This will be used to count the number of 1s in the binary representation of the number.\n# 2. Use a while loop to iterate until `n` becomes 0.\n# 3. Inside the loop, use the bitwise AND operator (`&`) to check the least significant bit of `n`.\n# 4. Use the bitwise XOR operator (`^=`) to toggle the `count` variable.\n# 5. Right shift `n` by 1 bit using the bitwise right shift operator (`>>=`).\n# 6. After the loop, check if `count` is 0. If it is, return `True` indicating that the number has even parity (an even number of 1s in its binary representation). Otherwise, return `False`.\n\n# Example usage:\n\nprint(check_even_parity(4))  # True, because 4 in binary is 100, which has even parity (2 ones)\nprint(check_even_parity(7))  # False, because 7 in binary is 111, which has odd parity (3 ones)"}
{"task_id": 856, "completion": "def min_adjacent_swaps_to_sort_binary_array(arr):\n    # Count the number of 0s and 1s in the array\n    num_zeros = arr.count(0)\n    num_ones = len(arr) - num_zeros\n    \n    # Initialize the number of swaps\n    swaps = 0\n    \n    # Initialize the number of 0s and 1s in the correct positions\n    correct_zeros = 0\n    correct_ones = num_ones\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            # If the current element is 0, it should be in the first correct_zeros positions\n            swaps += correct_ones - (len(arr) - i - num_zeros)\n            correct_zeros += 1\n        else:\n            # If the current element is 1, it should be in the last correct_ones positions\n            swaps += correct_zeros - i + num_zeros\n            correct_ones -= 1\n    \n    return swaps\n\n# Example usage:\narr = [1, 0, 1, 0, 1, 0]\nprint(min_adjacent_swaps_to_sort_binary_array(arr))  # Output: 12"}
{"task_id": 857, "completion": "def list_strings(strings):\n    result = list(map(list, strings))\n    return result\n\n# Example usage:\n\nstrings = [\"hello\", \"world\"]\nprint(list_strings(strings))  # Output: [['h', 'e', 'l', 'l', 'o'], ['w', 'o', 'r', 'l', 'd']]"}
{"task_id": 858, "completion": "def count_list_and_square(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, list):\n            count += 1\n    return count ** 2\n\n# Example usage:\nexample_list = [1, [2, 3], [4, [5, 6]], 7, [8, 9, [10]]]\nprint(count_list_and_square(example_list))  # Output will be 9 because there are 3 lists and 3^2 = 9"}
{"task_id": 859, "completion": "def generate_sublists(lst):\n    sublists = [[]]\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublists.append(lst[i:j])\n    return sublists\n\n# Example usage:\nexample_list = [1, 2, 3]\nsublists = generate_sublists(example_list)\nprint(sublists)"}
{"task_id": 860, "completion": "import re\n\ndef ends_with_alphanumeric(s):\n    pattern = r'[a-zA-Z0-9]+$'\n    if re.search(pattern, s):\n        return True\n    else:\n        return False\n\n# Test cases:\n\nprint(ends_with_alphanumeric(\"hello123\"))  # True\nprint(ends_with_alphanumeric(\"hello!\"))     # False\nprint(ends_with_alphanumeric(\"hello_world\"))# False\nprint(ends_with_alphanumeric(\"hello123!\"))  # False\nprint(ends_with_alphanumeric(\"123\"))        # True"}
{"task_id": 861, "completion": "def find_anagrams(list_of_strings, string):\n    sorted_string = sorted(string)\n    anagrams = []\n    for s in list_of_strings:\n        if sorted(s) == sorted_string:\n            anagrams.append(s)\n    return anagrams\n\n# Using lambda function:\ndef find_anagrams_lambda(list_of_strings, string):\n    sorted_string = sorted(string)\n    anagrams = list(filter(lambda x: sorted(x) == sorted_string, list_of_strings))\n    return anagrams\n\n# Example usage:\nlist_of_strings = [\"listen\", \"silent\", \"enlist\", \"google\", \"gooegl\"]\nstring = \"tinsel\"\nprint(find_anagrams(list_of_strings, string))  # Output: ['silent', 'enlist']\nprint(find_anagrams_lambda(list_of_strings, string))  # Output: ['silent', 'enlist']"}
{"task_id": 862, "completion": "def most_common_words(text, n):\n    # Split the text into words\n    words = text.split()\n    \n    # Create a dictionary to count occurrences of each word\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    \n    # Sort the words by their frequency in descending order\n    sorted_words = sorted(word_count.items(), key=lambda item: item[1], reverse=True)\n    \n    # Return the n most common words\n    return sorted_words[:n]\n\n# Example usage:\ntext = \"this is a test test this is only a test\"\nn = 2\nprint(most_common_words(text, n))  # Output: [('test', 3), ('this', 2)]"}
{"task_id": 863, "completion": "def find_longest_conseq_subseq(arr, n):\n    if n == 0:\n        return 0\n    arr.sort()\n    longest_streak = 1\n    current_streak = 1\n    for i in range(1, n):\n        if arr[i]!= arr[i-1]:\n            if arr[i] == arr[i-1] + 1:\n                current_streak += 1\n            else:\n                longest_streak = max(longest_streak, current_streak)\n                current_streak = 1\n    return max(longest_streak, current_streak)\n\n# Example usage:\narr = [1, 9, 3, 10, 4, 20, 2]\nn = len(arr)\nprint(find_longest_conseq_subseq(arr, n))  # Output: 4\n\n# Explanation:\n# The longest consecutive subsequence is [1, 2, 3, 4]. Therefore, the output is 4.\n\n# Time Complexity: O(n log n) due to sorting, where n is the number of elements in the array.\n# Space Complexity: O(1) if we consider sorting in-place, otherwise O(n) for an auxiliary array used by the sorting algorithm."}
{"task_id": 864, "completion": "def palindrome_lambda(str_list):\n    palindromes = list(filter(lambda x: x == x[::-1], str_list))\n    return palindromes\n\n# Example usage:\n\nstr_list = [\"radar\", \"hello\", \"level\", \"world\", \"madam\"]\nprint(palindrome_lambda(str_list))  # Output: ['radar', 'level','madam']"}
{"task_id": 865, "completion": "def print_list(nums, n):\n    result = list(map(lambda x: x * n, nums))\n    return result\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nn = 3\nprint(print_list(numbers, n))  # Output: [3, 6, 9, 12, 15]\n\n# Explanation:\n# The function `print_list` takes two parameters: `nums` (a list of numbers) and `n` (an integer).\n# Inside the function, we use the `map` function with a lambda function as its first argument.\n# The lambda function takes an element `x` from the list `nums` and multiplies it by `n`.\n# The `map` function applies this lambda function to each element of `nums`, resulting in a new list.\n# Finally, we convert the map object to a list and return it.\n# The example usage demonstrates how to call the function with a list of numbers and an integer `n`, and it prints the resulting list."}
{"task_id": 866, "completion": "def check_month(month_name):\n    # Dictionary to store the number of days in each month\n    month_days = {\n        \"January\": 31,\n        \"February\": 28,\n        \"March\": 31,\n        \"April\": 30,\n        \"May\": 31,\n        \"June\": 30,\n        \"July\": 31,\n        \"August\": 31,\n        \"September\": 30,\n        \"October\": 31,\n        \"November\": 30,\n        \"December\": 31\n    }\n    \n    # Check if the given month name is in the dictionary\n    if month_name in month_days:\n        # Check if the month has 31 days\n        if month_days[month_name] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Example usage:\nmonth_name = \"January\"\nprint(check_month(month_name))  # Output: True\n\nmonth_name = \"February\"\nprint(check_month(month_name))  # Output: False"}
{"task_id": 867, "completion": "def min_num_to_make_even(arr):\n    current_sum = sum(arr)\n    if current_sum % 2 == 0:\n        return 0\n    else:\n        for num in arr:\n            if (current_sum - num) % 2 == 0:\n                return num\n    return None\n\n# Example usage:\narray = [1, 2, 3, 4]\nprint(min_num_to_make_even(array))  # Output: 1"}
{"task_id": 868, "completion": "def length_of_last_word(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Check if there are no words\n    if not words:\n        return 0\n    \n    # Return the length of the last word\n    return len(words[-1])\n\n# Example usage:\ns = \"Hello World\"\nprint(length_of_last_word(s))  # Output: 5"}
{"task_id": 869, "completion": "def remove_sublists(list1, r1, r2):\n    result = [sublist for sublist in list1 if any(r1 <= i <= r2 for i in sublist)]\n    return result\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nr1, r2 = 3, 8\nprint(remove_sublists(list1, r1, r2))  # Output: [[4, 5, 6], [7, 8, 9]]"}
{"task_id": 870, "completion": "def sum_positive_numbers(numbers):\n    return sum(filter(lambda x: x > 0, numbers))\n\n# Example usage:\nnumbers = [1, -2, 3, -4, 5, -6]\nprint(sum_positive_numbers(numbers))  # Output: 9"}
{"task_id": 871, "completion": "def are_Rotations(string1, string2):\n    if len(string1)!= len(string2):\n        return False\n    temp = string1 + string1\n    if string2 in temp:\n        return True\n    else:\n        return False\n\n# Example usage:\n\nstring1 = \"ABCD\"\nstring2 = \"CDAB\"\nprint(are_Rotations(string1, string2))  # Output: True\n\nstring1 = \"ABCD\"\nstring2 = \"ACBD\"\nprint(are_Rotations(string1, string2))  # Output: False"}
{"task_id": 872, "completion": "def is_subset(list1, list2):\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n\n# Example usage:\nlist1 = [[1, 2], [3, 4]]\nlist2 = [[1, 2], [3, 4]]\nprint(is_subset(list1, list2))  # Output: True\n\nlist1 = [[1, 2], [3, 4]]\nlist2 = [[1, 2], [3, 5]]\nprint(is_subset(list1, list2))  # Output: False"}
{"task_id": 873, "completion": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\n# Test the function:\nprint(fibonacci(10))  # Output: 55\n\n# Explanation:\n# The function uses recursion to calculate the Fibonacci sequence. \n# If n is less than or equal to 0, it returns 0. \n# If n is 1, it returns 1. \n# Otherwise, it returns the sum of the two preceding numbers in the sequence, which are calculated by calling the function recursively."}
{"task_id": 874, "completion": "def check_string(s1, s2):\n    if len(s1) < len(s2):\n        return s2.startswith(s1)\n    else:\n        return s1.startswith(s2)\n\n# Test cases:\n\nprint(check_string(\"abc\", \"abcpq\"))  # True\nprint(check_string(\"abc\", \"defabc\")) # True\nprint(check_string(\"abc\", \"abx\"))    # False\nprint(check_string(\"hello\", \"hellop\")) # True\nprint(check_string(\"world\", \"helloworld\")) # True\nprint(check_string(\"python\", \"py\")) # False\n\n# Explanation:\n\n# The function `check_string(s1, s2)` takes two strings `s1` and `s2` as input.\n# It first checks the lengths of the two strings.\n# If `s1` is shorter than `s2`, it checks if `s2` starts with `s1`.\n# If `s1` is not shorter than `s2`, it checks if `s1` starts with `s2`.\n# The function returns `True` if the condition is met, otherwise it returns `False`."}
{"task_id": 875, "completion": "def min_diff(test_list):\n    res = float('inf')\n    for tup in test_list:\n        res = min(res, abs(tup[0] - tup[1]))\n    return res\n\n# Example usage:\n\ntest_list = [(1, 5), (3, 8), (2, 7)]\nprint(min_diff(test_list))  # Output: 2"}
{"task_id": 876, "completion": "def find_lcm(num1, num2):\n    if num1 > num2:\n        greater = num1\n    else:\n        greater = num2\n    while True:\n        if (greater % num1 == 0) and (greater % num2 == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\n# Example usage:\nnum1 = 12\nnum2 = 18\nprint(\"The LCM of\", num1, \"and\", num2, \"is\", find_lcm(num1, num2))"}
{"task_id": 877, "completion": "def sort_string(s):\n    return ''.join(sorted(s))\n\n# Example usage:\n\ninput_string = \"python\"\nsorted_string = sort_string(input_string)\nprint(sorted_string)  # Output: hnopty"}
{"task_id": 878, "completion": "def check_k_elements(test_tup, K):\n    return len(test_tup) == K\n\n# Example usage:\ntest_tup = (1, 2, 3)\nK = 3\nprint(check_k_elements(test_tup, K))  # Output: True\n\ntest_tup = (1, 2, 3, 4)\nK = 3\nprint(check_k_elements(test_tup, K))  # Output: False"}
{"task_id": 879, "completion": "import re\n\ndef match_string(text):\n    pattern = r'a.*?b$'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n```\n\nThis function uses a regular expression pattern to match a string that starts with 'a', followed by any character (except newline) zero or more times (`.*?`), and ends with 'b'. The `?` after `*` makes the `*` non-greedy, so it matches the shortest possible string. The `$` at the end of the pattern ensures that the string ends with 'b'."}
{"task_id": 880, "completion": "def find_no_of_solutions(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"Two solutions\"\n    elif discriminant == 0:\n        return \"One solution\"\n    else:\n        return \"No real solutions\"\n\n# Example usage:\na = 1\nb = -3\nc = 2\nprint(find_no_of_solutions(a, b, c))  # Output: Two solutions\n\na = 1\nb = 2\nc = 1\nprint(find_no_of_solutions(a, b, c))  # Output: One solution\n\na = 1\nb = 1\nc = 1\nprint(find_no_of_solutions(a, b, c))  # Output: No real solutions"}
{"task_id": 881, "completion": "def sum_even_odd(numbers):\n    even_sum = 0\n    odd_sum = 0\n    for num in numbers:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum, odd_sum\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\neven_sum, odd_sum = sum_even_odd(numbers)\nprint(\"Sum of even numbers:\", even_sum)\nprint(\"Sum of odd numbers:\", odd_sum)"}
{"task_id": 882, "completion": "def parallelogram_perimeter(side, base):\n    perimeter = 2 * (side + base)\n    return perimeter\n\n# Example usage:\n\nside = 5\nbase = 10\nperimeter = parallelogram_perimeter(side, base)\nprint(\"The perimeter of the parallelogram is:\", perimeter)"}
{"task_id": 883, "completion": "def divisible_by_nums(numbers, m, n):\n    result = list(filter(lambda x: (x % m == 0 and x % n == 0), numbers))\n    return result\n\n# Example usage:\nnumbers = [10, 15, 20, 25, 30, 35, 40]\nm = 2\nn = 5\nprint(divisible_by_nums(numbers, m, n))  # Output: [10, 20, 30, 40]"}
{"task_id": 884, "completion": "def check_bits(n, l, r):\n    # Create a mask with all bits set to 1 within the range [l, r]\n    mask = (1 << (r - l + 1)) - 1\n    mask <<= (l - 1)\n    \n    # Apply the mask to the number and check if the result is non-zero\n    return (n & mask)!= 0\n\n# Example usage:\nn = 29  # Binary: 11101\nl = 2\nr = 4\nprint(check_bits(n, l, r))  # Output: True, because bits at positions 2, 3, and 4 are set\n\n# Explanation:\n# 1. The mask is created by shifting 1 left by (r - l + 1) positions and then subtracting 1 to get a sequence of (r - l + 1) ones.\n# 2. The mask is then shifted left by (l - 1) positions to align the bits within the desired range.\n# 3. The mask is applied to the number using a bitwise AND operation.\n# 4. If the result is non-zero, it means that at least one bit within the specified range is set, so the function returns True. Otherwise, it returns False."}
{"task_id": 885, "completion": "def is_Isomorphic(str1, str2):\n    if len(str1)!= len(str2):\n        return False\n    map_str1_to_str2 = {}\n    map_str2_to_str1 = {}\n    for i in range(len(str1)):\n        char1 = str1[i]\n        char2 = str2[i]\n        if char1 in map_str1_to_str2:\n            if map_str1_to_str2[char1]!= char2:\n                return False\n        else:\n            map_str1_to_str2[char1] = char2\n        if char2 in map_str2_to_str1:\n            if map_str2_to_str1[char2]!= char1:\n                return False\n        else:\n            map_str2_to_str1[char2] = char1\n    return True\n\n# Example usage:\n\nstr1 = \"egg\"\nstr2 = \"add\"\nprint(is_Isomorphic(str1, str2))  # Output: True\n\nstr1 = \"foo\"\nstr2 = \"bar\"\nprint(is_Isomorphic(str1, str2))  # Output: False"}
{"task_id": 886, "completion": "def add_and_divide(numbers):\n    total_sum = sum(numbers)\n    length = len(numbers)\n    result = total_sum / length\n    return result\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nresult = add_and_divide(numbers)\nprint(result)  # Output: 3.0"}
{"task_id": 887, "completion": "def check_odd(num):\n    if num & 1:\n        return \"Odd\"\n    else:\n        return \"Even\"\n\n# Example usage:\n\nprint(check_odd(5))  # Output: Odd\nprint(check_odd(4))  # Output: Even"}
{"task_id": 888, "completion": "def subtract_elements(test_tup):\n    res = tuple(ele - sub for ele, sub in zip(test_tup[0], test_tup[1]))\n    return (res)\n\n# Example usage:\n\ntest_tup = ((10, 2, 3), (1, 2, 3))\nprint(subtract_elements(test_tup))\n\n# Output:\n\n# (9, 0, 0)"}
{"task_id": 889, "completion": "def reverse_lists(lists):\n    return [lst[::-1] for lst in lists]\n\n# Example usage:\n\nlists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nreversed_lists = reverse_lists(lists)\nprint(reversed_lists)  # Output: [[3, 2, 1], [6, 5, 4], [9, 8, 7]]"}
{"task_id": 890, "completion": "def find_Extra(arr1, arr2, n):\n    sum1 = 0\n    sum2 = 0\n    for i in range(n):\n        sum1 += arr1[i]\n    for i in range(n - 1):\n        sum2 += arr2[i]\n    return (sum1 - sum2)\n\n# Example usage:\n\narr1 = [2, 4, 6, 8, 10, 12]\narr2 = [2, 4, 6, 8, 10]\nn = len(arr1)\nprint(find_Extra(arr1, arr2, n))  # Output: 12"}
{"task_id": 891, "completion": "def same_num_digits(num1, num2):\n    # Convert the numbers to strings to count the number of digits\n    str_num1 = str(abs(num1))\n    str_num2 = str(abs(num2))\n    \n    # Compare the lengths of the two strings\n    return len(str_num1) == len(str_num2)\n\n# Example usage:\nnum1 = 123\nnum2 = 4567\nprint(same_num_digits(num1, num2))  # Output: False\n\nnum1 = 1234\nnum2 = 567\nprint(same_num_digits(num1, num2))  # Output: True"}
{"task_id": 892, "completion": "def remove_multiple_spaces(string):\n    # Use regular expression to replace multiple spaces with a single space\n    import re\n    return re.sub(' +','', string)\n\n# Example usage:\ninput_string = \"This  is   an example  string.\"\nresult = remove_multiple_space(input_string)\nprint(result)  # Output: \"This is an example string.\""}
{"task_id": 893, "completion": "def last_element(list1):\n    result = [sub[-1] for sub in list1]\n    return result\n\n# Example usage:\nexample_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(last_element(example_list))  # Output: [3, 6, 9]"}
{"task_id": 894, "completion": "def float_to_tuple(float_str):\n    float_list = float_str.split()\n    float_tuple = tuple(map(float, float_list))\n    return float_tuple\n\n# Example usage:\nfloat_str = \"1.23 4.56 7.89\"\nresult = float_to_tuple(float_str)\nprint(result)  # Output: (1.23, 4.56, 7.89)"}
{"task_id": 895, "completion": "def max_sum_subsequence(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    \n    # Initialize two variables to store the maximum sum including and excluding the current element\n    include = arr[0]\n    exclude = 0\n    \n    for i in range(1, n):\n        # Store the previous maximum sum including the current element\n        prev_include = include\n        \n        # Update the maximum sum including the current element\n        include = exclude + arr[i]\n        \n        # Update the maximum sum excluding the current element\n        exclude = max(exclude, prev_include)\n    \n    # Return the maximum of include and exclude\n    return max(include, exclude)\n\n# Example usage:\narr = [5, 5, 10, 100, 10, 5]\nprint(max_sum_subsequence(arr))  # Output: 110"}
{"task_id": 896, "completion": "def last(n):\n    return n[-1]\n\ndef sort_list_last(tuples):\n    return sorted(tuples, key=last)\n\n# Example usage:\n\ntuples = [(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]\nprint(sort_list_last(tuples))\n\n# Output:\n\n# [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]"}
{"task_id": 897, "completion": "def check_word(sentence, word):\n    words = sentence.split()\n    if word in words:\n        return True\n    else:\n        return False\n\n# Example usage:\n\nsentence = \"Hello world, this is a sample sentence.\"\nword = \"sample\"\n\nif check_word(sentence, word):\n    print(f\"The word '{word}' is present in the sentence.\")\nelse:\n    print(f\"The word '{word}' is not present in the sentence.\")"}
{"task_id": 898, "completion": "def extract_elements(lst, n):\n    result = []\n    for i in range(len(lst) - n + 1):\n        if all(lst[i] == lst[i + j] for j in range(1, n)):\n            result.append(lst[i:i + n])\n    return result\n\n# Example usage:\n\nnumbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nn = 2\nprint(extract_elements(numbers, n))  # Output: [[1, 2], [2, 2], [3, 3], [4, 4]]\n\nn = 3\nprint(extract_elements(numbers, n))  # Output: [[2, 2, 2], [3, 3, 3], [4, 4, 4]]"}
{"task_id": 899, "completion": "def is_sorted_after_swap(arr):\n    n = len(arr)\n    if n <= 1:\n        return True\n    \n    # Find the first pair that is out of order\n    i = 0\n    while i < n - 1 and arr[i] <= arr[i + 1]:\n        i += 1\n    \n    # If the array is already sorted\n    if i == n - 1:\n        return True\n    \n    # Check if swapping the first out of order pair makes the array sorted\n    j = n - 1\n    while j > 0 and arr[j] >= arr[j - 1]:\n        j -= 1\n    \n    # Check if swapping the first out of order pair makes the array sorted\n    if arr[i] <= arr[j] and all(arr[k] <= arr[k + 1] for k in range(i, j)) and (j == n - 1 or arr[i] <= arr[j + 1]) and (i == 0 or arr[j] >= arr[i - 1]):\n        return True\n    else:\n        return False\n\n# Example usage:\narr1 = [1, 5, 3, 4, 2]\nprint(is_sorted_after_swap(arr1))  # Output: True\n\narr2 = [1, 3, 2, 4, 5]\nprint(is_sorted_after_swap(arr2))  # Output: False"}
{"task_id": 900, "completion": "def string_start_number(string, number):\n    return string.startswith(number)\n\n# Example usage:\n\nprint(string_start_number(\"123abc\", \"123\"))  # Output: True\nprint(string_start_number(\"123abc\", \"456\"))  # Output: False"}
{"task_id": 901, "completion": "def smallest_multiple(n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    multiple = 1\n    for i in range(1, n + 1):\n        multiple = lcm(multiple, i)\n    return multiple\n\n# Example usage:\nn = 20\nprint(smallest_multiple(n))  # Output will be the smallest number that is a multiple of all numbers from 1 to 20"}
{"task_id": 902, "completion": "def add_dicts(dict1, dict2):\n    combined_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in combined_dict:\n            combined_dict[key] += value\n        else:\n            combined_dict[key] = value\n    return combined_dict\n\n# Example usage:\n\ndict1 = {'a': 1, 'b': 2, 'c': 3}\ndict2 = {'b': 3, 'c': 4, 'd': 5}\n\nresult = add_dicts(dict1, dict2)\nprint(result)  # Output: {'a': 1, 'b': 5, 'c': 7, 'd': 5}"}
{"task_id": 903, "completion": "def count_unset_bits(n):\n    count = 0\n    for i in range(1, n + 1):\n        count += bin(i).count('0') - 1\n    return count\n\n# Example usage:\nn = 10\nprint(count_unset_bits(n))  # Output: 17"}
{"task_id": 904, "completion": "def is_even(num):\n    return num % 2 == 0\n\n# Test cases:\n\nprint(is_even(4))  # True\nprint(is_even(7))  # False\nprint(is_even(0))  # True\nprint(is_even(-2)) # True\nprint(is_even(-3)) # False"}
{"task_id": 905, "completion": "def sum_of_square_binomial_coefficients(n):\n    sum_squares = 0\n    for k in range(n + 1):\n        sum_squares += binomial_coefficient(n, k) ** 2\n    return sum_squares\n\ndef binomial_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)  # Take advantage of symmetry\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c\n\n# Example usage:\nn = 5\nprint(sum_of_square_binomial_coefficients(n))  # Output: 56\n```\n\nThis Python function calculates the sum of the squares of the binomial coefficients for a given non-negative integer \\( n \\). The function uses a helper function `binomial_coefficient` to compute the binomial coefficients, which are then squared and summed up.\n\nHere's a breakdown of the code:\n\n1. **sum_of_square_binomial_coefficients(n)**:\n   - Initializes `sum_squares` to 0.\n   - Loops through all values of \\( k \\) from 0 to \\( n \\).\n   - For each \\( k \\), it computes the binomial coefficient \\( \\binom{n}{k} \\), squares it, and adds it to `sum_squares`.\n   - Returns the final sum of squares.\n\n2. **binomial_coefficient(n, k)**:\n   - Handles edge cases where \\( k \\) is out of bounds.\n   - Handles the special cases where \\( k = 0 \\) or \\( k = n \\).\n   - Uses a more efficient method to compute the binomial coefficient using a loop, taking advantage of the symmetry \\( \\binom{n}{k} = \\binom{n}{n-k} \\).\n\nThe example usage demonstrates how to call the function with \\( n = 5 \\), and it prints the result, which should be 56."}
{"task_id": 906, "completion": "import re\nfrom urllib.parse import urlparse\n\ndef extract_date(url):\n    # Parse the URL to get the query part\n    parsed_url = urlparse(url)\n    query_params = parsed_url.query\n    \n    # Use regex to find the date pattern in the query parameters\n    date_pattern = r'date=([0-9]{4}-[0-9]{2}-[0-9]{2})'\n    match = re.search(date_pattern, query_params)\n    \n    if match:\n        date_str = match.group(1)\n        year, month, day = date_str.split('-')\n        return int(year), int(month), int(day)\n    else:\n        return None\n\n# Example usage:\nurl = 'https://example.com/page?date=2023-04-15'\nyear, month, day = extract_date(url)\nprint(f'Year: {year}, Month: {month}, Day: {day}')  # Output: Year: 2023, Month: 4, Day: 15\n\n# Explanation:\n# 1. The `urlparse` function from the `urllib.parse` module is used to parse the URL and extract the query part.\n# 2. A regex pattern `date=([0-9]{4}-[0-9]{2}-[0-9]{2})` is defined to match the date format \"YYYY-MM-DD\".\n# 3. The `re.search` function is used to search for the pattern in the query parameters.\n# 4. If a match is found, the date string is extracted and split into year, month, and day.\n# 5. The function returns the year, month, and day as integers. If no match is found, it returns `None`.\n\n# Note: This function assumes that the date is always provided in the query parameters of the URL. If the date might be located in a different part of the URL or if the format of the date might vary, additional logic would be required to handle those cases."}
{"task_id": 907, "completion": "def print_lucky_numbers(n):\n    lucky_numbers = []\n    current_number = 1\n    \n    while len(lucky_numbers) < n:\n        if is_lucky(current_number):\n            lucky_numbers.append(current_number)\n        current_number += 1\n    \n    for number in lucky_numbers:\n        print(number)\n\ndef is_lucky(number):\n    while number >= 10:\n        number = sum_of_digits(number)\n    return number == 7\n\ndef sum_of_digits(number):\n    sum_digits = 0\n    while number > 0:\n        sum_digits += number % 10\n        number //= 10\n    return sum_digits\n\n# Example usage:\nprint_lucky_numbers(10)"}
{"task_id": 908, "completion": "def find_fixed_point(arr, low, high):\n    if low <= high:\n        mid = (low + high) // 2\n        if mid == arr[mid]:\n            return mid\n        elif mid < arr[mid]:\n            return find_fixed_point(arr, low, mid - 1)\n        else:\n            return find_fixed_point(arr, mid + 1, high)\n    return -1\n\n# Example usage:\narr = [-10, -5, 0, 3, 7]\nresult = find_fixed_point(arr, 0, len(arr) - 1)\nprint(\"Fixed Point is\", result)\n\n# Explanation:\n# 1. The function `find_fixed_point` takes an array `arr`, and the indices `low` and `high` as inputs.\n# 2. It calculates the middle index `mid`.\n# 3. If `mid` is equal to `arr[mid]`, it returns `mid` as the fixed point.\n# 4. If `mid` is less than `arr[mid]`, it recursively searches in the left half of the array.\n# 5. If `mid` is greater than `arr[mid]`, it recursively searches in the right half of the array.\n# 6. If no fixed point is found, it returns -1.\n\n# The example usage demonstrates how to call the function with an array and print the result."}
{"task_id": 909, "completion": "def previous_palindrome(num):\n    num -= 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return num\n        num -= 1\n\n# Example usage:\n\nprint(previous_palindrome(123))  # Output: 121\nprint(previous_palindrome(100))  # Output: 99\nprint(previous_palindrome(176))  # Output: 171"}
{"task_id": 910, "completion": "import re\nfrom datetime import datetime\n\ndef is_valid_date(date_str):\n    try:\n        datetime.strptime(date_str, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False\n```\n\nThis function uses the `strptime` method from the `datetime` module to attempt to parse the input string as a date in the format `YYYY-MM-DD`. If the parsing is successful, the function returns `True`, indicating that the date is valid. If the parsing fails (raising a `ValueError`), the function returns `False`, indicating that the date is invalid.\n\nHere's an example of how you can use this function:\n\n```python\ndate_str = '2023-10-31'\nif is_valid_date(date_str):\n    print(f\"{date_str} is a valid date.\")\nelse:\n    print(f\"{date_str} is not a valid date.\")\n```\n\nThis will output:\n\n```\n2023-10-31 is a valid date.\n```\n\nIf you provide an invalid date string, such as `2023-10-32`, the function will return `False`:\n\n```python\ndate_str = '2023-10-32'\nif is_valid_date(date_str):\n    print(f\"{date_str} is a valid date.\")\nelse:\n    print(f\"{date_str} is not a valid date.\")\n```\n\nThis will output:\n\n```\n2023-10-32 is not a valid date.\n```"}
{"task_id": 911, "completion": "import heapq\n\ndef max_product_of_three(nums):\n    # Use heapq.nlargest to get the three largest numbers\n    largest_three = heapq.nlargest(3, nums)\n    # Use heapq.nsmallest to get the two smallest numbers\n    smallest_two = heapq.nsmallest(2, nums)\n    # Calculate the product of the three largest numbers\n    max_product = largest_three[0] * largest_three[1] * largest_three[2]\n    # Calculate the product of the two smallest numbers and the largest number\n    max_product_with_negatives = smallest_two[0] * smallest_two[1] * largest_three[0]\n    # Return the maximum of the two products\n    return max(max_product, max_product_with_negatives)\n\n# Example usage:\nnums = [-4, -3, -2, -1, 0, 1, 2, 3, 4]\nprint(max_product_of_three(nums))  # Output should be 24\n```\n\nThis function first finds the three largest numbers and the two smallest numbers in the array using `heapq.nlargest` and `heapq.nsmallest` respectively. It then calculates the maximum product by either multiplying the three largest numbers or the two smallest numbers with the largest number (to account for negative numbers which can produce a large positive product). Finally, it returns the larger of the two products."}
{"task_id": 912, "completion": "import math\n\ndef lobb_number(n, m):\n    if m == 0:\n        return math.log(math.factorial(n))\n    elif n == m:\n        return 0\n    else:\n        lobb = 0\n        for k in range(m):\n            lobb += math.comb(n - k - 1, m - 1) * math.comb(n + k, m)\n        return lobb\n\n# Example usage:\nn = 5\nm = 2\nprint(lobb_number(n, m))  # Output will be the Lobb number L(5, 2)\n```\n\nThis function calculates the Lobb number \\( L(n, m) \\) using the given formula. It handles the special cases where \\( m = 0 \\) and \\( n = m \\) directly. For other cases, it iterates over \\( k \\) from 0 to \\( m-1 \\) and sums up the products of binomial coefficients."}
{"task_id": 913, "completion": "def check_num_end(string):\n    # Use regular expression to check if the string ends with a digit\n    import re\n    return bool(re.search(r'\\d$', string))\n\n# Example usage:\nprint(check_num_end(\"hello123\"))  # True\nprint(check_num_end(\"hello\"))     # False\nprint(check_num_end(\"123abc\"))    # False\nprint(check_num_end(\"abc123\"))    # True"}
{"task_id": 914, "completion": "def check_alternating(s):\n    if len(s) < 2:\n        return False\n    first_char = s[0]\n    second_char = s[1]\n    if first_char == second_char:\n        return False\n    for i in range(2, len(s)):\n        if i % 2 == 0 and s[i]!= first_char:\n            return False\n        if i % 2!= 0 and s[i]!= second_char:\n            return False\n    return True\n\n# Test cases:\n\nprint(check_alternating(\"abababab\"))  # True\nprint(check_alternating(\"aaaa\"))      # False\nprint(check_alternating(\"abcabcabc\")) # False\nprint(check_alternating(\"ababababa\")) # True\nprint(check_alternating(\"a\"))         # False\nprint(check_alternating(\"\"))          # False"}
{"task_id": 915, "completion": "def rearrange_nums(nums):\n    nums.sort(key=lambda x: 0 if x == 0 else -1 / x)\n    return nums\n\n# Example usage:\n\nnums = [3, -2, -1, 4, 0, -3, 2]\nprint(rearrange_nums(nums))  # Output: [-1, -2, -3, 0, 3, 2, 4]"}
{"task_id": 916, "completion": "def find_triplet(arr, target):\n    arr.sort()\n    n = len(arr)\n    \n    for i in range(n-2):\n        left = i + 1\n        right = n - 1\n        \n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            \n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n                \n    return False\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\ntarget = 9\nprint(find_triplet(arr, target))  # Output: True"}
{"task_id": 917, "completion": "def find_sequences(input_string):\n    import re\n    pattern = r'[A-Z][a-z]+'\n    matches = re.findall(pattern, input_string)\n    return matches\n\n# Example usage:\ninput_string = \"Hello World ThisIsAtestString\"\nresult = find_sequences(input_string)\nprint(result)  # Output: ['Hello', 'World', 'ThisIsAtestString']"}
{"task_id": 918, "completion": "def count_coin_change(coins, amount):\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    \n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] += dp[x - coin]\n    \n    return dp[amount]\n\n# Example usage:\ncoins = [1, 2, 5]\namount = 5\nprint(count_coin_change(coins, amount))  # Output: 4"}
{"task_id": 919, "completion": "def multiply_list(items):\n    total = 1\n    for x in items:\n        total *= x\n    return total\n\n# Example usage:\n\nmy_list = [1, 2, 3, 4]\nresult = multiply_list(my_list)\nprint(result)  # Output: 24"}
{"task_id": 920, "completion": "def remove_tuple(test_list):\n    res = [sub for sub in test_list if not all(ele is None for ele in sub)]\n    return (res)\n\n# Example usage:\ntest_list = [(1, 2, 3), (None, None, None), (4, None, 5), (None,), (7, 8, 9)]\nprint(remove_tuple(test_list))  # Output: [(1, 2, 3), (4, None, 5), (7, 8, 9)]"}
{"task_id": 921, "completion": "def chunk_tuples(test_list, N):\n    res = []\n    for sub in range(0, len(test_list), N):\n        res.append(test_list[sub: sub + N])\n    return res\n\n# Example usage:\n\ntest_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]\nN = 2\nprint(chunk_tuples(test_list, N))\n\n# Output:\n\n[(1, 2, 3), (4, 5, 6)]\n[(7, 8, 9), (10, 11, 12)]\n\n# Explanation:\n\n# The function `chunk_tuples` takes two arguments: `test_list` (a list of tuples) and `N` (the size of each chunk).\n# It initializes an empty list `res` to store the resulting chunks.\n# It then iterates over the list in steps of `N` using a for loop.\n# For each iteration, it slices the list from the current position `sub` to `sub + N` and appends this slice to `res`.\n# Finally, it returns the list of chunks `res`.\n\n# In the example usage, `test_list` contains four tuples, and `N` is set to 2. The function will output two chunks, each containing two tuples."}
{"task_id": 922, "completion": "def max_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = float('-inf')\n    max_pair = (None, None)\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (nums[i], nums[j])\n    return max_pair\n\n# Example usage:\nnums = [3, 4, 5, 2, 7]\nprint(max_product(nums))  # Output: (5, 7)\n\n# Explanation:\n# The function `max_product` takes a list of integers `nums` as input.\n# It initializes `max_product` to negative infinity and `max_pair` to `(None, None)`.\n# It then iterates over all pairs of numbers in the list using nested loops.\n# For each pair, it calculates the product and checks if it is greater than the current `max_product`.\n# If it is, it updates `max_product` and `max_pair`.\n# Finally, it returns the pair with the highest product."}
{"task_id": 923, "completion": "def shortest_Common_Supersequence(str1, str2):\n    m, n = len(str1), len(str2)\n    \n    # Create a DP table to store lengths of longest common subsequence.\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill dp table\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    \n    # Length of the shortest common supersequence\n    lcs_length = dp[m][n]\n    return m + n - lcs_length\n\n# Example usage:\nstr1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"\nprint(shortest_Common_Supersequence(str1, str2))  # Output: 9"}
{"task_id": 924, "completion": "def max_of_two( x, y ):\n    if x > y:\n        return x\n    return y\n\n# Testing the function:\n\nprint(max_of_two(3, 4))  # Output: 4\nprint(max_of_two(5, 2))  # Output: 5\nprint(max_of_two(7, 7))  # Output: 7"}
{"task_id": 925, "completion": "def product_of_tuple(tup):\n    product = 1\n    for num in tup:\n        product *= num\n    return product\n\n# Example usage:\n\nmy_tuple = (1, 2, 3, 4)\nresult = product_of_tuple(my_tuple)\nprint(result)  # Output: 24"}
{"task_id": 926, "completion": "def rencontres_number(n):\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0], dp[1], dp[2] = 1, 0, 1\n    for i in range(3, n + 1):\n        dp[i] = (i - 1) * (dp[i - 1] + dp[i - 2])\n    return dp[n]\n\n# Example usage:\nn = 4\nprint(rencontres_number(n))  # Output: 9"}
{"task_id": 927, "completion": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root):\n    if root is None:\n        return 0\n    left_height = max_height(root.left)\n    right_height = max_height(root.right)\n    return max(left_height, right_height) + 1\n```\n\nThis function recursively calculates the height of the left and right subtrees and returns the maximum of the two plus one (for the current node). If the node is `None`, it returns 0, which represents the base case for the recursion."}
{"task_id": 928, "completion": "def convert_date_format(date_str):\n    # Split the date string into year, month, and day\n    year, month, day = date_str.split('-')\n    # Reformat the date string to dd-mm-yyyy format\n    return f\"{day}-{month}-{year}\"\n\n# Example usage:\ndate = \"2023-04-01\"\nconverted_date = convert_date_format(date)\nprint(converted_date)  # Output: 01-04-2023"}
{"task_id": 929, "completion": "def count_repeated_items(test_tup):\n    res = {ele:test_tup.count(ele) for ele in set(test_tup) if test_tup.count(ele) > 1}\n    return (str(res))\n\n# Example usage:\ntest_tup = (1, 2, 2, 3, 4, 4, 4, 5)\nprint(count_repeated_items(test_tup))\n\n# Output:\n# \"{2: 2, 4: 3}\""}
{"task_id": 930, "completion": "import re\n\ndef text_match(text):\n    patterns = 'ab*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n\n# Test cases:\nprint(text_match(\"ac\"))  # Expected output: Found a match!\nprint(text_match(\"abc\")) # Expected output: Found a match!\nprint(text_match(\"a\"))   # Expected output: Found a match!\nprint(text_match(\"\"))    # Expected output: Not matched!"}
{"task_id": 931, "completion": "def sum_of_series(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n\n# Example usage:\nn = 5\nprint(sum_of_series(n))  # Output: 225"}
{"task_id": 932, "completion": "def remove_duplicates(strings):\n    unique_strings = []\n    for string in strings:\n        if string not in unique_strings:\n            unique_strings.append(string)\n    return unique_strings\n\n# Example usage:\nstrings = [\"apple\", \"banana\", \"apple\", \"orange\", \"banana\", \"grape\"]\nresult = remove_duplicates(strings)\nprint(result)  # Output: ['apple', 'banana', 'orange', 'grape']"}
{"task_id": 933, "completion": "import re\n\ndef camel_to_snake(text):\n    # Use regex to replace capital letters with underscore followed by lowercase letter\n    str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    # Replace remaining capital letters with underscore followed by lowercase letter\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n# Example usage:\nprint(camel_to_snake('camelCaseString'))  # Output: camel_case_string\n```\n\nThis function uses regular expressions to identify the capital letters in the camel case string and replaces them with an underscore followed by the corresponding lowercase letter. It also handles cases where there are numbers involved in the camel case string. The final result is converted to lowercase."}
{"task_id": 934, "completion": "def delannoy_number(m, n):\n    # Create a 2D array to store the delannoy numbers\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Fill the array using the recursive relation\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1]\n    \n    return dp[m][n]\n\n# Example usage:\nm = 3\nn = 3\nprint(delannoy_number(m, n))  # Output: 63"}
{"task_id": 935, "completion": "def sum_of_series(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\n# Example usage:\nn = 5\nprint(sum_of_series(n))  # Output: 55"}
{"task_id": 936, "completion": "def rearrange_tuples(test_list, ord_list):\n    res = sorted(test_list, key = lambda ele: ord_list.index(ele[0]))\n    return (str(res))\n\n# Example usage:\n\ntest_list = [(1, 'a'), (2, 'b'), (3, 'c')]\nord_list = [2, 3, 1]\nprint(rearrange_tuples(test_list, ord_list))\n\n# Output:\n# [(2, 'b'), (3, 'c'), (1, 'a')]"}
{"task_id": 937, "completion": "def most_common_char(s):\n    if not s:\n        return None\n    \n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    max_count = max(char_count.values())\n    most_common_chars = [char for char, count in char_count.items() if count == max_count]\n    \n    if len(most_common_chars) == 1:\n        return most_common_chars[0]\n    else:\n        return None\n\n# Example usage:\n# result = most_common_char(\"hello world\")\n# print(result)  # Output will be 'l' since 'l' appears three times, which is the most frequent.\n\nresult = most_common_char(\"hello world\")\nprint(result)  # Output will be 'l' since 'l' appears three times, which is the most frequent."}
{"task_id": 938, "completion": "def find_closest(ar1, ar2, ar3, p, q, r):\n    # Initialize the difference between the maximum and minimum\n    diff = float('inf')\n    res_i = 0\n    res_j = 0\n    res_k = 0\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < p and j < q and k < r:\n        # Find minimum and maximum of current three elements\n        minimum = min(ar1[i], ar2[j], ar3[k])\n        maximum = max(ar1[i], ar2[j], ar3[k])\n        \n        # Update the result if current diff is less than the min diff\n        if maximum - minimum < diff:\n            res_i = i\n            res_j = j\n            res_k = k\n            diff = maximum - minimum\n        \n        # We can move forward only in the array with the minimum\n        if diff == 0:\n            break\n        \n        if ar1[i] == minimum:\n            i += 1\n        elif ar2[j] == minimum:\n            j += 1\n        else:\n            k += 1\n    \n    return ar1[res_i], ar2[res_j], ar3[res_k]\n\n# Example usage:\nar1 = [1, 4, 10]\nar2 = [2, 15, 20]\nar3 = [10, 12]\np = len(ar1)\nq = len(ar2)\nr = len(ar3)\n\nprint(find_closest(ar1, ar2, ar3, p, q, r))  # Output: (4, 15, 12)"}
{"task_id": 939, "completion": "def sort_list_of_dicts(list_of_dicts, key):\n    return sorted(list_of_dicts, key=lambda x: x[key])\n\n# Example usage:\n\nlist_of_dicts = [\n    {'name': 'John', 'age': 25},\n    {'name': 'Jane', 'age': 22},\n    {'name': 'Jack', 'age': 27}\n]\n\nsorted_list = sort_list_of_dicts(list_of_dicts, 'age')\nprint(sorted_list)\n\nsorted_list_by_name = sort_list_of_dicts(list_of_dicts, 'name')\nprint(sorted_list_by_name)"}
{"task_id": 940, "completion": "def heap_sort(arr):\n    n = len(arr)\n    \n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n    \n    return arr\n\ndef heapify(arr, n, i):\n    largest = i  # Initialize largest as root\n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    # See if left child of root exists and is greater than root\n    if left < n and arr[i] < arr[left]:\n        largest = left\n    \n    # See if right child of root exists and is greater than root\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n    \n    # Change root, if needed\n    if largest!= i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # Swap\n        \n        # Heapify the root\n        heapify(arr, n, largest)\n\n# Example usage:\narr = [12, 11, 13, 5, 6, 7]\nsorted_arr = heap_sort(arr)\nprint(\"Sorted array is:\", sorted_arr)\n\n# Explanation:\n\n# The `heap_sort` function first builds a max heap from the input array. This involves transforming the array into a max-heap, where each parent node is greater than or equal to its children. This is done by calling the `heapify` function on each non-leaf node, starting from the last non-leaf node down to the root.\n\n# After the heap is built, the function extracts elements from the heap one by one. It swaps the root of the heap (the largest element) with the last element of the heap, reduces the heap size by one, and then calls `heapify` on the new root to maintain the heap property.\n\n# The `heapify"}
{"task_id": 941, "completion": "def count_elements_until_tuple(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Example usage:\nexample_list = [1, 2, (3, 4), 5, 6]\nprint(count_elements_until_tuple(example_list))  # Output: 2"}
{"task_id": 942, "completion": "def check_element_present(list1, element):\n    for item in list1:\n        if item == element:\n            return True\n    return False\n\n# Example usage:\n\nlist1 = [1, 2, 3, 4, 5]\nelement = 3\nprint(check_element_present(list1, element))  # Output: True\n\nelement = 6\nprint(check_element_present(list1, element))  # Output: False"}
{"task_id": 943, "completion": "import heapq as hq\n\ndef combine_sorted_lists(list1, list2):\n    # Combine the two lists using heapq.merge\n    combined_list = list(hq.merge(list1, list2))\n    return combined_list\n\n# Example usage:\nlist1 = [1, 4, 7, 10]\nlist2 = [2, 5, 6, 11]\nprint(combine_sorted_lists(list1, list2))  # Output: [1, 2, 4, 5, 6, 7, 10, 11]"}
{"task_id": 944, "completion": "def extract_numbers_and_positions(input_string):\n    result = []\n    for i, char in enumerate(input_string):\n        if char.isdigit():\n            result.append((char, i))\n    return result\n\n# Example usage:\ninput_string = \"a1b2c3\"\noutput = extract_numbers_and_positions(input_string)\nprint(output)  # Output: [('1', 1), ('2', 3), ('3', 5)]\n\n# Explanation:\n# The function `extract_numbers_and_positions` takes an input string and iterates through each character along with its index.\n# It checks if the character is a digit using the `isdigit()` method.\n# If the character is a digit, it appends a tuple containing the digit and its index to the `result` list.\n# Finally, it returns the `result` list containing tuples of digits and their positions."}
{"task_id": 945, "completion": "def tuple_to_set(test_tup):\n    res = set(test_tup)\n    return res\n\n# Example usage:\n\ntest_tup = (1, 2, 3, 4)\nprint(tuple_to_set(test_tup))  # Output: {1, 2, 3, 4}"}
{"task_id": 946, "completion": "import re\n\ndef most_common_elements(text, n=5):\n    # Convert the text to lowercase and remove non-alphanumeric characters\n    cleaned_text = re.sub(r'[^a-zA-Z0-9\\s]', '', text).lower()\n    \n    # Split the text into words\n    words = cleaned_text.split()\n    \n    # Count the frequency of each word\n    word_counts = Counter(words)\n    \n    # Get the most common elements and their counts\n    most_common = word_counts.most_common(n)\n    \n    return most_common\n\n# Example usage:\ntext = \"This is a test. This test is only a test.\"\nprint(most_common_elements(text))\n```\n\nThis function will output the most common words in the given text, with a default of 5 most common words. You can adjust the `n` parameter to get more or fewer results."}
{"task_id": 947, "completion": "def find_short(s):\n    words = s.split()\n    shortest_length = float('inf')\n    for word in words:\n        if len(word) < shortest_length:\n            shortest_length = len(word)\n    return shortest_length\n\n# Example usage:\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(find_short(sentence))  # Output: 3"}
{"task_id": 948, "completion": "def get_item(tuplex, idx):\n    try:\n        return tuplex[idx]\n    except IndexError:\n        return \"Index out of range\"\n\n# Example usage:\nexample_tuple = (1, 2, 3, 4, 5)\nindex = 2\nprint(get_item(example_tuple, index))  # Output: 3\n\nindex = 10\nprint(get_item(example_tuple, index))  # Output: Index out of range"}
{"task_id": 949, "completion": "def sort_tuple(tup):\n    # sort the tuple list basis the total digits in tuple\n    return sorted(tup, key = lambda x: sum(int(digit) for digit in str(x)))\n\n# Example usage:\ntup = [(1, 2), (23, 4), (2, 3), (456, 7)]\nsorted_tup = sort_tuple(tup)\nprint(sorted_tup)  # Output: [(1, 2), (2, 3), (23, 4), (456, 7)]"}
{"task_id": 950, "completion": "def chinese_zodiac(year):\n    # Your code here\n    animals = [\"Monkey\", \"Rooster\", \"Dog\", \"Pig\", \"Rat\", \"Ox\", \"Tiger\", \"Rabbit\", \"Dragon\", \"Snake\", \"Horse\", \"Sheep\"]\n    return animals[(year - 4) % 12]\n\n# Example usage:\nyear = 2021\nprint(chinese_zodiac(year))  # Output should be \"Ox\""}
{"task_id": 951, "completion": "def max_of_tuples(test_list1, test_list2):\n    \n    res = []\n    for sub in zip(test_list1, test_list2):\n        res.append(max(sub[0][1], sub[1][1]))\n    return res\n\n# Example usage:\n\ntest_list1 = [(1, 3), (2, 5), (3, 4)]\ntest_list2 = [(1, 2), (2, 3), (3, 6)]\nprint(max_of_tuples(test_list1, test_list2))  # Output: [3, 5, 6]"}
{"task_id": 952, "completion": "def ncr_mod_p(n, r, p):\n    if r > n - r:\n        r = n - r\n    num = 1\n    den = 1\n    for i in range(1, r + 1):\n        num = (num * (n - i + 1)) % p\n        den = (den * i) % p\n    return (num * pow(den, p - 2, p)) % p\n\n# Example usage:\nn = 10\nr = 2\np = 13\nprint(ncr_mod_p(n, r, p))  # Output: 45"}
{"task_id": 953, "completion": "def min_subsets(arr):\n    arr.sort()\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i]!= arr[i - 1]:\n            count += 1\n    return count\n\n# Example usage:\n\narr = [1, 2, 2, 3]\nprint(min_subsets(arr))  # Output: 3\n\n# Explanation:\n# The array can be divided into 3 subsets with distinct elements: [1], [2], and [3]."}
{"task_id": 954, "completion": "def check_profit(cost_price, sell_price):\n    if sell_price > cost_price:\n        profit = sell_price - cost_price\n        return profit\n    else:\n        return None\n\n# Example usage:\ncost_price = 100\nsell_price = 150\nresult = check_profit(cost_price, sell_price)\nprint(\"Profit:\", result)  # Output: Profit: 50\n\ncost_price = 150\nsell_price = 100\nresult = check_profit(cost_price, sell_price)\nprint(\"Profit:\", result)  # Output: Profit: None"}
{"task_id": 955, "completion": "def is_abundant(n):\n    sum_of_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors > n\n\n# Example usage:\n\nprint(is_abundant(12))  # Should return True, because 12 is an abundant number\nprint(is_abundant(15))  # Should return False, because 15 is not an abundant number"}
{"task_id": 956, "completion": "import re\n\ndef split_uppercase(text):\n    return re.findall('[A-Z][^A-Z]*', text)\n\n# Example usage:\nprint(split_uppercase(\"SplitThisTextAtUppercaseLetters\"))\n```\n\nThis function uses the `re.findall` method with a regular expression to find all matches of the pattern `[A-Z][^A-Z]*`. This pattern matches an uppercase letter followed by zero or more non-uppercase letters. The `findall` method returns a list of all matches found in the input string.\n\nWhen you run the example usage, it will output:\n\n```\n['Split', 'This', 'Text', 'At', 'Uppercase', 'Letters']\n```"}
{"task_id": 957, "completion": "def get_Position_Rightmost_Set_Bit(n):\n    if n == 0:\n        return 0\n    position = 1\n    temp = n\n    while temp & 1 == 0:\n        temp = temp >> 1\n        position += 1\n    return position\n\n# Example usage:\nn = 18\nprint(get_Position_Rightmost_Set_Bit(n))  # Output: 2"}
{"task_id": 958, "completion": "def integer_to_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syms = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syms[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\n# Example usage:\nprint(integer_to_roman(58))  # Output: \"LVIII\"\nprint(integer_to_roman(1994))  # Output: \"MCMXCIV\""}
{"task_id": 959, "completion": "def average_list(lst):\n    if not lst:\n        return 0\n    return sum(lst) / len(lst)\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(average_list(numbers))  # Output: 3.0"}
{"task_id": 960, "completion": "def tiling_problem(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        dp[2] = 2\n        for i in range(3, n + 1):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[n]\n\n# Example usage:\nn = 5\nprint(tiling_problem(n))  # Output: 8"}
{"task_id": 961, "completion": "def roman_to_int(s):\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman_map[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total\n\n# Example usage:\nprint(roman_to_int(\"III\"))  # Output: 3\nprint(roman_to_int(\"IV\"))   # Output: 4\nprint(roman_to_int(\"IX\"))   # Output: 9\nprint(roman_to_int(\"LVIII\"))  # Output: 58\nprint(roman_to_int(\"MCMXCIV\"))  # Output: 1994"}
{"task_id": 962, "completion": "def sum_even_numbers(l, r):\n    sum = 0\n    for i in range(l, r + 1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n# Example usage:\n\nl = 2\nr = 10\nprint(sum_even_numbers(l, r))  # Output: 30 (2 + 4 + 6 + 8 + 10)\n\nl = 1\nr = 10\nprint(sum_even_numbers(l, r))  # Output: 30 (2 + 4 + 6 + 8 + 10)\n\nl = 3\nr = 9\nprint(sum_even_numbers(l, r))  # Output: 24 (4 + 6 + 8)\n\nl = 5\nr = 5\nprint(sum_even_numbers(l, r))  # Output: 0 (no even numbers in this range)\n\nl = 2\nr = 2\nprint(sum_even_numbers(l, r))  # Output: 2 (only one even number in this range)"}
{"task_id": 963, "completion": "def discriminant_value(a, b, c):\n    discriminant = b**2 - 4*a*c\n    return discriminant\n\n# Example usage:\na = 1\nb = -3\nc = 2\nresult = discriminant_value(a, b, c)\nprint(\"The discriminant value is:\", result)"}
{"task_id": 964, "completion": "def even_length_word(str):\n    # Split the string into words using space\n    words = str.split(' ')\n    \n    # Iterate through all the words in the string\n    for word in words:\n        # If the length of the word is even, print the word\n        if len(word) % 2 == 0:\n            print(word)\n\n# Example usage:\ninput_string = \"Write a python function to check whether the length of the word is even or not\"\neven_length_word(input_string)\n\n# Output:\n# Write\n# python\n# function\n# the\n# is\n# even\n# or\n# not"}
{"task_id": 965, "completion": "def camel_to_snake(text):\n    import re\n    str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()\n\n# Example usage:\nprint(camel_to_snake('camelCaseString'))  # Output: camel_case_string"}
{"task_id": 966, "completion": "def remove_empty(tuples):\n    # Use a list comprehension to filter out empty tuples\n    return [t for t in tuples if t]\n\n# Example usage:\n\nexample_list = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d',)]\nfiltered_list = remove_empty(example_list)\nprint(filtered_list)  # Output should be [('',), ('a', 'b'), ('a', 'b', 'c'), ('d',)]"}
{"task_id": 967, "completion": "def check_vowels(string):\n    vowels = set(\"aeiouAEIOU\")\n    for char in string:\n        if char in vowels:\n            vowels.remove(char)\n    return len(vowels) == 0\n\n# Example usage:\n\nprint(check_vowels(\"hello world\"))  # False\nprint(check_vowels(\"aeiou\"))        # True\nprint(check_vowels(\"AEIOU\"))        # True\nprint(check_vowels(\"aabbcc\"))       # False"}
{"task_id": 968, "completion": "def maximum_possible_value(n, m):\n    # Your code here\n    pass\n```\n\n# Constraints:\n\n- 1 <= n <= 10^5\n- 1 <= m <= 10^5\n\n# Example:\n\n```python\n# Example usage:\nprint(maximum_possible_value(5, 3))  # Output: 14\n```\n\n# Explanation:\n\nFor a given integer `n` and an integer `m`, the function should return the maximum possible value of a periodic function. The periodic function is defined as follows:\n\n- The function has a period of `m`.\n- The function value at any point `i` (where `0 <= i < m`) is `i * n`.\n\nTo find the maximum possible value, we need to consider the values of the function over one period and choose the maximum value.\n\n# Solution:\n\n```python\ndef maximum_possible_value(n, m):\n    max_value = 0\n    for i in range(m):\n        value = i * n\n        if value > max_value:\n            max_value = value\n    return max_value\n\n# Example usage:\nprint(maximum_possible_value(5, 3))  # Output: 14\n```\n\nThis function iterates through all possible values of the function within one period and keeps track of the maximum value encountered. The time complexity of this solution is O(m), which is efficient given the constraints."}
{"task_id": 969, "completion": "def join_tuples(test_list):\n    res = []\n    for sub in test_list:\n        if not res or res[-1][0]!= sub[0]:\n            res.append(sub)\n        else:\n            res[-1].extend(sub[1:])\n    return res\n\n# Example usage:\n\ntest_list = [(1, 2, 3), (1, 4, 5), (6, 7), (6, 8)]\nprint(join_tuples(test_list))  # Output: [(1, 2, 3, 4, 5), (6, 7, 8)]"}
{"task_id": 970, "completion": "def min_of_two(x, y):\n    if x < y:\n        return x\n    return y\n\n# Example usage:\nnum1 = 10\nnum2 = 20\nprint(min_of_two(num1, num2))  # Output: 10"}
{"task_id": 971, "completion": "def max_segments(n, a, b, c):\n    # Base case: if n is less than the minimum of a, b, and c, no segments can be formed\n    if n < min(a, b, c):\n        return 0\n    \n    # Initialize the maximum number of segments to 0\n    max_segments = 0\n    \n    # Try to form segments of length a\n    if n >= a:\n        max_segments = max(max_segments, 1 + max_segments(n - a, a, b, c))\n    \n    # Try to form segments of length b\n    if n >= b:\n        max_segments = max(max_segments, 1 + max_segments(n - b, a, b, c))\n    \n    # Try to form segments of length c\n    if n >= c:\n        max_segments = max(max_segments, 1 + max_segments(n - c, a, b, c))\n    \n    return max_segments\n\n# Example usage:\nn = 7\na = 2\nb = 3\nc = 4\nprint(max_segments(n, a, b, c))  # Output: 3 (e.g., segments of length 3, 3, and 1)"}
{"task_id": 972, "completion": "def concat_nested_tuple(test_tup1, test_tup2):\n    res = (*test_tup1, *test_tup2)\n    return (res,)\n\n# Example usage:\n\ntest_tup1 = (1, 2, 3)\ntest_tup2 = (4, 5, 6)\n\nresult = concat_nested_tuple(test_tup1, test_tup2)\nprint(result)  # Output: ((1, 2, 3, 4, 5, 6),)"}
{"task_id": 973, "completion": "def left_rotate(s, d):\n    temp = s[d:] + s[:d]\n    return temp\n\n# Example usage:\n\nstring = \"hello\"\nrotation_count = 2\nrotated_string = left_rotate(string, rotation_count)\nprint(rotated_string)  # Output: \"lohel\""}
{"task_id": 974, "completion": "def min_total_path_sum(triangle):\n    n = len(triangle)\n    if n == 0:\n        return 0\n    dp = [[0] * (i + 1) for i in range(n)]\n    dp[0][0] = triangle[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + triangle[i][0]\n        dp[i][i] = dp[i - 1][i - 1] + triangle[i][i]\n        for j in range(1, i):\n            dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j]) + triangle[i][j]\n    return min(dp[-1])\n\n# Example usage:\ntriangle = [\n    [2],\n    [3, 4],\n    [6, 5, 7],\n    [4, 1, 8, 3]\n]\nprint(min_total_path_sum(triangle))  # Output: 11"}
